
STM32L4xx_RTOS_Tasks_Notify.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a18  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08005ba8  08005ba8  00015ba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c2c  08005c2c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08005c2c  08005c2c  00015c2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005c34  08005c34  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c34  08005c34  00015c34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005c38  08005c38  00015c38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005c3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004248  20000010  08005c4c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004258  08005c4c  00024258  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fe5b  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000263f  00000000  00000000  0002fede  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e68  00000000  00000000  00032520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b0e  00000000  00000000  00033388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000263b9  00000000  00000000  00033e96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010d61  00000000  00000000  0005a24f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ef987  00000000  00000000  0006afb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003ad4  00000000  00000000  0015a938  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  0015e40c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005b90 	.word	0x08005b90

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08005b90 	.word	0x08005b90

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b970 	b.w	80004c8 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	460d      	mov	r5, r1
 8000208:	4604      	mov	r4, r0
 800020a:	460f      	mov	r7, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14a      	bne.n	80002a6 <__udivmoddi4+0xa6>
 8000210:	428a      	cmp	r2, r1
 8000212:	4694      	mov	ip, r2
 8000214:	d965      	bls.n	80002e2 <__udivmoddi4+0xe2>
 8000216:	fab2 f382 	clz	r3, r2
 800021a:	b143      	cbz	r3, 800022e <__udivmoddi4+0x2e>
 800021c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000220:	f1c3 0220 	rsb	r2, r3, #32
 8000224:	409f      	lsls	r7, r3
 8000226:	fa20 f202 	lsr.w	r2, r0, r2
 800022a:	4317      	orrs	r7, r2
 800022c:	409c      	lsls	r4, r3
 800022e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000232:	fa1f f58c 	uxth.w	r5, ip
 8000236:	fbb7 f1fe 	udiv	r1, r7, lr
 800023a:	0c22      	lsrs	r2, r4, #16
 800023c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000240:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000244:	fb01 f005 	mul.w	r0, r1, r5
 8000248:	4290      	cmp	r0, r2
 800024a:	d90a      	bls.n	8000262 <__udivmoddi4+0x62>
 800024c:	eb1c 0202 	adds.w	r2, ip, r2
 8000250:	f101 37ff 	add.w	r7, r1, #4294967295
 8000254:	f080 811c 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000258:	4290      	cmp	r0, r2
 800025a:	f240 8119 	bls.w	8000490 <__udivmoddi4+0x290>
 800025e:	3902      	subs	r1, #2
 8000260:	4462      	add	r2, ip
 8000262:	1a12      	subs	r2, r2, r0
 8000264:	b2a4      	uxth	r4, r4
 8000266:	fbb2 f0fe 	udiv	r0, r2, lr
 800026a:	fb0e 2210 	mls	r2, lr, r0, r2
 800026e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000272:	fb00 f505 	mul.w	r5, r0, r5
 8000276:	42a5      	cmp	r5, r4
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x90>
 800027a:	eb1c 0404 	adds.w	r4, ip, r4
 800027e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000282:	f080 8107 	bcs.w	8000494 <__udivmoddi4+0x294>
 8000286:	42a5      	cmp	r5, r4
 8000288:	f240 8104 	bls.w	8000494 <__udivmoddi4+0x294>
 800028c:	4464      	add	r4, ip
 800028e:	3802      	subs	r0, #2
 8000290:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000294:	1b64      	subs	r4, r4, r5
 8000296:	2100      	movs	r1, #0
 8000298:	b11e      	cbz	r6, 80002a2 <__udivmoddi4+0xa2>
 800029a:	40dc      	lsrs	r4, r3
 800029c:	2300      	movs	r3, #0
 800029e:	e9c6 4300 	strd	r4, r3, [r6]
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d908      	bls.n	80002bc <__udivmoddi4+0xbc>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80ed 	beq.w	800048a <__udivmoddi4+0x28a>
 80002b0:	2100      	movs	r1, #0
 80002b2:	e9c6 0500 	strd	r0, r5, [r6]
 80002b6:	4608      	mov	r0, r1
 80002b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002bc:	fab3 f183 	clz	r1, r3
 80002c0:	2900      	cmp	r1, #0
 80002c2:	d149      	bne.n	8000358 <__udivmoddi4+0x158>
 80002c4:	42ab      	cmp	r3, r5
 80002c6:	d302      	bcc.n	80002ce <__udivmoddi4+0xce>
 80002c8:	4282      	cmp	r2, r0
 80002ca:	f200 80f8 	bhi.w	80004be <__udivmoddi4+0x2be>
 80002ce:	1a84      	subs	r4, r0, r2
 80002d0:	eb65 0203 	sbc.w	r2, r5, r3
 80002d4:	2001      	movs	r0, #1
 80002d6:	4617      	mov	r7, r2
 80002d8:	2e00      	cmp	r6, #0
 80002da:	d0e2      	beq.n	80002a2 <__udivmoddi4+0xa2>
 80002dc:	e9c6 4700 	strd	r4, r7, [r6]
 80002e0:	e7df      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002e2:	b902      	cbnz	r2, 80002e6 <__udivmoddi4+0xe6>
 80002e4:	deff      	udf	#255	; 0xff
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8090 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f0:	1a8a      	subs	r2, r1, r2
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2101      	movs	r1, #1
 80002fc:	fbb2 f5f7 	udiv	r5, r2, r7
 8000300:	fb07 2015 	mls	r0, r7, r5, r2
 8000304:	0c22      	lsrs	r2, r4, #16
 8000306:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030a:	fb0e f005 	mul.w	r0, lr, r5
 800030e:	4290      	cmp	r0, r2
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x124>
 8000312:	eb1c 0202 	adds.w	r2, ip, r2
 8000316:	f105 38ff 	add.w	r8, r5, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4290      	cmp	r0, r2
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2b8>
 8000322:	4645      	mov	r5, r8
 8000324:	1a12      	subs	r2, r2, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb2 f0f7 	udiv	r0, r2, r7
 800032c:	fb07 2210 	mls	r2, r7, r0, r2
 8000330:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x14e>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 32ff 	add.w	r2, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x14c>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2c2>
 800034c:	4610      	mov	r0, r2
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000356:	e79f      	b.n	8000298 <__udivmoddi4+0x98>
 8000358:	f1c1 0720 	rsb	r7, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa05 f401 	lsl.w	r4, r5, r1
 800036a:	fa20 f307 	lsr.w	r3, r0, r7
 800036e:	40fd      	lsrs	r5, r7
 8000370:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000374:	4323      	orrs	r3, r4
 8000376:	fbb5 f8f9 	udiv	r8, r5, r9
 800037a:	fa1f fe8c 	uxth.w	lr, ip
 800037e:	fb09 5518 	mls	r5, r9, r8, r5
 8000382:	0c1c      	lsrs	r4, r3, #16
 8000384:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000388:	fb08 f50e 	mul.w	r5, r8, lr
 800038c:	42a5      	cmp	r5, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	fa00 f001 	lsl.w	r0, r0, r1
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2b4>
 80003a4:	42a5      	cmp	r5, r4
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2b4>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4464      	add	r4, ip
 80003b0:	1b64      	subs	r4, r4, r5
 80003b2:	b29d      	uxth	r5, r3
 80003b4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b8:	fb09 4413 	mls	r4, r9, r3, r4
 80003bc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c4:	45a6      	cmp	lr, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1c 0404 	adds.w	r4, ip, r4
 80003cc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2ac>
 80003d2:	45a6      	cmp	lr, r4
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2ac>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	4464      	add	r4, ip
 80003da:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003de:	fba3 9502 	umull	r9, r5, r3, r2
 80003e2:	eba4 040e 	sub.w	r4, r4, lr
 80003e6:	42ac      	cmp	r4, r5
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46ae      	mov	lr, r5
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x29c>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x298>
 80003f0:	b156      	cbz	r6, 8000408 <__udivmoddi4+0x208>
 80003f2:	ebb0 0208 	subs.w	r2, r0, r8
 80003f6:	eb64 040e 	sbc.w	r4, r4, lr
 80003fa:	fa04 f707 	lsl.w	r7, r4, r7
 80003fe:	40ca      	lsrs	r2, r1
 8000400:	40cc      	lsrs	r4, r1
 8000402:	4317      	orrs	r7, r2
 8000404:	e9c6 7400 	strd	r7, r4, [r6]
 8000408:	4618      	mov	r0, r3
 800040a:	2100      	movs	r1, #0
 800040c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000410:	f1c3 0120 	rsb	r1, r3, #32
 8000414:	fa02 fc03 	lsl.w	ip, r2, r3
 8000418:	fa20 f201 	lsr.w	r2, r0, r1
 800041c:	fa25 f101 	lsr.w	r1, r5, r1
 8000420:	409d      	lsls	r5, r3
 8000422:	432a      	orrs	r2, r5
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000430:	fb07 1510 	mls	r5, r7, r0, r1
 8000434:	0c11      	lsrs	r1, r2, #16
 8000436:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043a:	fb00 f50e 	mul.w	r5, r0, lr
 800043e:	428d      	cmp	r5, r1
 8000440:	fa04 f403 	lsl.w	r4, r4, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x258>
 8000446:	eb1c 0101 	adds.w	r1, ip, r1
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000450:	428d      	cmp	r5, r1
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000454:	3802      	subs	r0, #2
 8000456:	4461      	add	r1, ip
 8000458:	1b49      	subs	r1, r1, r5
 800045a:	b292      	uxth	r2, r2
 800045c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000460:	fb07 1115 	mls	r1, r7, r5, r1
 8000464:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000468:	fb05 f10e 	mul.w	r1, r5, lr
 800046c:	4291      	cmp	r1, r2
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x282>
 8000470:	eb1c 0202 	adds.w	r2, ip, r2
 8000474:	f105 38ff 	add.w	r8, r5, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 800047a:	4291      	cmp	r1, r2
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800047e:	3d02      	subs	r5, #2
 8000480:	4462      	add	r2, ip
 8000482:	1a52      	subs	r2, r2, r1
 8000484:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0xfc>
 800048a:	4631      	mov	r1, r6
 800048c:	4630      	mov	r0, r6
 800048e:	e708      	b.n	80002a2 <__udivmoddi4+0xa2>
 8000490:	4639      	mov	r1, r7
 8000492:	e6e6      	b.n	8000262 <__udivmoddi4+0x62>
 8000494:	4610      	mov	r0, r2
 8000496:	e6fb      	b.n	8000290 <__udivmoddi4+0x90>
 8000498:	4548      	cmp	r0, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a4:	3b01      	subs	r3, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a8:	4645      	mov	r5, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x282>
 80004ac:	462b      	mov	r3, r5
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1da>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x258>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b8:	3d02      	subs	r5, #2
 80004ba:	4462      	add	r2, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x124>
 80004be:	4608      	mov	r0, r1
 80004c0:	e70a      	b.n	80002d8 <__udivmoddi4+0xd8>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x14e>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d2:	f000 fa43 	bl	800095c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d6:	f000 f829 	bl	800052c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004da:	f000 f8a9 	bl	8000630 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004de:	f000 f877 	bl	80005d0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* Task 1 Creation. */
  xTaskCreate(pBtnTaskHandler, "TASK-1", 500,
 80004e2:	4b0c      	ldr	r3, [pc, #48]	; (8000514 <main+0x48>)
 80004e4:	9301      	str	r3, [sp, #4]
 80004e6:	2302      	movs	r3, #2
 80004e8:	9300      	str	r3, [sp, #0]
 80004ea:	2300      	movs	r3, #0
 80004ec:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80004f0:	4909      	ldr	r1, [pc, #36]	; (8000518 <main+0x4c>)
 80004f2:	480a      	ldr	r0, [pc, #40]	; (800051c <main+0x50>)
 80004f4:	f003 fbe8 	bl	8003cc8 <xTaskCreate>
		  NULL, 2, &xTaskHandle1);

  /* Task 2 Creation. */
  xTaskCreate(pLedTaskHandler, "TASK-2", 500,
 80004f8:	4b09      	ldr	r3, [pc, #36]	; (8000520 <main+0x54>)
 80004fa:	9301      	str	r3, [sp, #4]
 80004fc:	2302      	movs	r3, #2
 80004fe:	9300      	str	r3, [sp, #0]
 8000500:	2300      	movs	r3, #0
 8000502:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000506:	4907      	ldr	r1, [pc, #28]	; (8000524 <main+0x58>)
 8000508:	4807      	ldr	r0, [pc, #28]	; (8000528 <main+0x5c>)
 800050a:	f003 fbdd 	bl	8003cc8 <xTaskCreate>
		  NULL, 2, &xTaskHandle2);

  /* Start the scheduler. */
  vTaskStartScheduler();
 800050e:	f003 fd31 	bl	8003f74 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000512:	e7fe      	b.n	8000512 <main+0x46>
 8000514:	200000b4 	.word	0x200000b4
 8000518:	08005ba8 	.word	0x08005ba8
 800051c:	080006fd 	.word	0x080006fd
 8000520:	200000b8 	.word	0x200000b8
 8000524:	08005bb0 	.word	0x08005bb0
 8000528:	08000739 	.word	0x08000739

0800052c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b096      	sub	sp, #88	; 0x58
 8000530:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000532:	f107 0314 	add.w	r3, r7, #20
 8000536:	2244      	movs	r2, #68	; 0x44
 8000538:	2100      	movs	r1, #0
 800053a:	4618      	mov	r0, r3
 800053c:	f005 faee 	bl	8005b1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000540:	463b      	mov	r3, r7
 8000542:	2200      	movs	r2, #0
 8000544:	601a      	str	r2, [r3, #0]
 8000546:	605a      	str	r2, [r3, #4]
 8000548:	609a      	str	r2, [r3, #8]
 800054a:	60da      	str	r2, [r3, #12]
 800054c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800054e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000552:	f000 fd53 	bl	8000ffc <HAL_PWREx_ControlVoltageScaling>
 8000556:	4603      	mov	r3, r0
 8000558:	2b00      	cmp	r3, #0
 800055a:	d001      	beq.n	8000560 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800055c:	f000 f926 	bl	80007ac <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000560:	2302      	movs	r3, #2
 8000562:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000564:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000568:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800056a:	2310      	movs	r3, #16
 800056c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800056e:	2302      	movs	r3, #2
 8000570:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000572:	2302      	movs	r3, #2
 8000574:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000576:	2301      	movs	r3, #1
 8000578:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800057a:	230a      	movs	r3, #10
 800057c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800057e:	2307      	movs	r3, #7
 8000580:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000582:	2302      	movs	r3, #2
 8000584:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000586:	2302      	movs	r3, #2
 8000588:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800058a:	f107 0314 	add.w	r3, r7, #20
 800058e:	4618      	mov	r0, r3
 8000590:	f000 fd8a 	bl	80010a8 <HAL_RCC_OscConfig>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800059a:	f000 f907 	bl	80007ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800059e:	230f      	movs	r3, #15
 80005a0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005a2:	2303      	movs	r3, #3
 80005a4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a6:	2300      	movs	r3, #0
 80005a8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005aa:	2300      	movs	r3, #0
 80005ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ae:	2300      	movs	r3, #0
 80005b0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005b2:	463b      	mov	r3, r7
 80005b4:	2104      	movs	r1, #4
 80005b6:	4618      	mov	r0, r3
 80005b8:	f001 f952 	bl	8001860 <HAL_RCC_ClockConfig>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d001      	beq.n	80005c6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005c2:	f000 f8f3 	bl	80007ac <Error_Handler>
  }
}
 80005c6:	bf00      	nop
 80005c8:	3758      	adds	r7, #88	; 0x58
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
	...

080005d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005d4:	4b14      	ldr	r3, [pc, #80]	; (8000628 <MX_USART2_UART_Init+0x58>)
 80005d6:	4a15      	ldr	r2, [pc, #84]	; (800062c <MX_USART2_UART_Init+0x5c>)
 80005d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80005da:	4b13      	ldr	r3, [pc, #76]	; (8000628 <MX_USART2_UART_Init+0x58>)
 80005dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005e2:	4b11      	ldr	r3, [pc, #68]	; (8000628 <MX_USART2_UART_Init+0x58>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005e8:	4b0f      	ldr	r3, [pc, #60]	; (8000628 <MX_USART2_UART_Init+0x58>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005ee:	4b0e      	ldr	r3, [pc, #56]	; (8000628 <MX_USART2_UART_Init+0x58>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005f4:	4b0c      	ldr	r3, [pc, #48]	; (8000628 <MX_USART2_UART_Init+0x58>)
 80005f6:	220c      	movs	r2, #12
 80005f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005fa:	4b0b      	ldr	r3, [pc, #44]	; (8000628 <MX_USART2_UART_Init+0x58>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000600:	4b09      	ldr	r3, [pc, #36]	; (8000628 <MX_USART2_UART_Init+0x58>)
 8000602:	2200      	movs	r2, #0
 8000604:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000606:	4b08      	ldr	r3, [pc, #32]	; (8000628 <MX_USART2_UART_Init+0x58>)
 8000608:	2200      	movs	r2, #0
 800060a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800060c:	4b06      	ldr	r3, [pc, #24]	; (8000628 <MX_USART2_UART_Init+0x58>)
 800060e:	2200      	movs	r2, #0
 8000610:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000612:	4805      	ldr	r0, [pc, #20]	; (8000628 <MX_USART2_UART_Init+0x58>)
 8000614:	f002 f804 	bl	8002620 <HAL_UART_Init>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800061e:	f000 f8c5 	bl	80007ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000622:	bf00      	nop
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	2000002c 	.word	0x2000002c
 800062c:	40004400 	.word	0x40004400

08000630 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b08a      	sub	sp, #40	; 0x28
 8000634:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000636:	f107 0314 	add.w	r3, r7, #20
 800063a:	2200      	movs	r2, #0
 800063c:	601a      	str	r2, [r3, #0]
 800063e:	605a      	str	r2, [r3, #4]
 8000640:	609a      	str	r2, [r3, #8]
 8000642:	60da      	str	r2, [r3, #12]
 8000644:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000646:	4b2b      	ldr	r3, [pc, #172]	; (80006f4 <MX_GPIO_Init+0xc4>)
 8000648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800064a:	4a2a      	ldr	r2, [pc, #168]	; (80006f4 <MX_GPIO_Init+0xc4>)
 800064c:	f043 0304 	orr.w	r3, r3, #4
 8000650:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000652:	4b28      	ldr	r3, [pc, #160]	; (80006f4 <MX_GPIO_Init+0xc4>)
 8000654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000656:	f003 0304 	and.w	r3, r3, #4
 800065a:	613b      	str	r3, [r7, #16]
 800065c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800065e:	4b25      	ldr	r3, [pc, #148]	; (80006f4 <MX_GPIO_Init+0xc4>)
 8000660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000662:	4a24      	ldr	r2, [pc, #144]	; (80006f4 <MX_GPIO_Init+0xc4>)
 8000664:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000668:	64d3      	str	r3, [r2, #76]	; 0x4c
 800066a:	4b22      	ldr	r3, [pc, #136]	; (80006f4 <MX_GPIO_Init+0xc4>)
 800066c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800066e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000672:	60fb      	str	r3, [r7, #12]
 8000674:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000676:	4b1f      	ldr	r3, [pc, #124]	; (80006f4 <MX_GPIO_Init+0xc4>)
 8000678:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800067a:	4a1e      	ldr	r2, [pc, #120]	; (80006f4 <MX_GPIO_Init+0xc4>)
 800067c:	f043 0301 	orr.w	r3, r3, #1
 8000680:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000682:	4b1c      	ldr	r3, [pc, #112]	; (80006f4 <MX_GPIO_Init+0xc4>)
 8000684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000686:	f003 0301 	and.w	r3, r3, #1
 800068a:	60bb      	str	r3, [r7, #8]
 800068c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800068e:	4b19      	ldr	r3, [pc, #100]	; (80006f4 <MX_GPIO_Init+0xc4>)
 8000690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000692:	4a18      	ldr	r2, [pc, #96]	; (80006f4 <MX_GPIO_Init+0xc4>)
 8000694:	f043 0302 	orr.w	r3, r3, #2
 8000698:	64d3      	str	r3, [r2, #76]	; 0x4c
 800069a:	4b16      	ldr	r3, [pc, #88]	; (80006f4 <MX_GPIO_Init+0xc4>)
 800069c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800069e:	f003 0302 	and.w	r3, r3, #2
 80006a2:	607b      	str	r3, [r7, #4]
 80006a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006a6:	2200      	movs	r2, #0
 80006a8:	2120      	movs	r1, #32
 80006aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006ae:	f000 fc65 	bl	8000f7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80006b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006b8:	2300      	movs	r3, #0
 80006ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006bc:	2300      	movs	r3, #0
 80006be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006c0:	f107 0314 	add.w	r3, r7, #20
 80006c4:	4619      	mov	r1, r3
 80006c6:	480c      	ldr	r0, [pc, #48]	; (80006f8 <MX_GPIO_Init+0xc8>)
 80006c8:	f000 fa96 	bl	8000bf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80006cc:	2320      	movs	r3, #32
 80006ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d0:	2301      	movs	r3, #1
 80006d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d4:	2300      	movs	r3, #0
 80006d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d8:	2300      	movs	r3, #0
 80006da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80006dc:	f107 0314 	add.w	r3, r7, #20
 80006e0:	4619      	mov	r1, r3
 80006e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006e6:	f000 fa87 	bl	8000bf8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006ea:	bf00      	nop
 80006ec:	3728      	adds	r7, #40	; 0x28
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	40021000 	.word	0x40021000
 80006f8:	48000800 	.word	0x48000800

080006fc <pBtnTaskHandler>:

	return;
}

void pBtnTaskHandler(void* pvParams)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b084      	sub	sp, #16
 8000700:	af02      	add	r7, sp, #8
 8000702:	6078      	str	r0, [r7, #4]
	while(1)
	{
		/* Check if the button is pressed. */
		if(GPIO_PIN_RESET == HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13))
 8000704:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000708:	4809      	ldr	r0, [pc, #36]	; (8000730 <pBtnTaskHandler+0x34>)
 800070a:	f000 fc1f 	bl	8000f4c <HAL_GPIO_ReadPin>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d1f7      	bne.n	8000704 <pBtnTaskHandler+0x8>
		{
			/* Wait for 100ms to avoid De-bouncing issue. */
			RtosDelay(100);
 8000714:	2064      	movs	r0, #100	; 0x64
 8000716:	f000 f825 	bl	8000764 <RtosDelay>

			/* Send the notification to LED task, Since Button pressed. */
			xTaskNotify(xTaskHandle2, 0x00, eNoAction);
 800071a:	4b06      	ldr	r3, [pc, #24]	; (8000734 <pBtnTaskHandler+0x38>)
 800071c:	6818      	ldr	r0, [r3, #0]
 800071e:	2300      	movs	r3, #0
 8000720:	9300      	str	r3, [sp, #0]
 8000722:	2300      	movs	r3, #0
 8000724:	2200      	movs	r2, #0
 8000726:	2100      	movs	r1, #0
 8000728:	f004 f96e 	bl	8004a08 <xTaskGenericNotify>
		if(GPIO_PIN_RESET == HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13))
 800072c:	e7ea      	b.n	8000704 <pBtnTaskHandler+0x8>
 800072e:	bf00      	nop
 8000730:	48000800 	.word	0x48000800
 8000734:	200000b8 	.word	0x200000b8

08000738 <pLedTaskHandler>:

	return;
}

void pLedTaskHandler(void* pvParams)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b084      	sub	sp, #16
 800073c:	af02      	add	r7, sp, #8
 800073e:	6078      	str	r0, [r7, #4]

	while(1)
	{
		/* Wait until any notification is received from button task. */
		if(pdTRUE == xTaskNotifyWait(0, 0, NULL, portMAX_DELAY))
 8000740:	f04f 33ff 	mov.w	r3, #4294967295
 8000744:	9300      	str	r3, [sp, #0]
 8000746:	2300      	movs	r3, #0
 8000748:	2200      	movs	r2, #0
 800074a:	2100      	movs	r1, #0
 800074c:	2000      	movs	r0, #0
 800074e:	f004 f8db 	bl	8004908 <xTaskGenericNotifyWait>
 8000752:	4603      	mov	r3, r0
 8000754:	2b01      	cmp	r3, #1
 8000756:	d1f3      	bne.n	8000740 <pLedTaskHandler+0x8>
		{
			/* Notification is received. */
			/* Toggle the user LED. */
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000758:	2120      	movs	r1, #32
 800075a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800075e:	f000 fc25 	bl	8000fac <HAL_GPIO_TogglePin>
		if(pdTRUE == xTaskNotifyWait(0, 0, NULL, portMAX_DELAY))
 8000762:	e7ed      	b.n	8000740 <pLedTaskHandler+0x8>

08000764 <RtosDelay>:

	return;
}

void RtosDelay(uint32_t uiMilliSec)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b084      	sub	sp, #16
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
	/* Variable Initialization. */
	uint32_t uiDelayInTicks = 0;
 800076c:	2300      	movs	r3, #0
 800076e:	60fb      	str	r3, [r7, #12]
	uint32_t uiCurrTickCnt = 0;
 8000770:	2300      	movs	r3, #0
 8000772:	60bb      	str	r3, [r7, #8]

	/* Get the current tick count. */
	uiCurrTickCnt = xTaskGetTickCount();
 8000774:	f003 fcf6 	bl	8004164 <xTaskGetTickCount>
 8000778:	60b8      	str	r0, [r7, #8]

	/* Convert Millisecond in terms of ticks. */
	uiDelayInTicks = (uiMilliSec * configTICK_RATE_HZ) / 1000;
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000780:	fb02 f303 	mul.w	r3, r2, r3
 8000784:	4a08      	ldr	r2, [pc, #32]	; (80007a8 <RtosDelay+0x44>)
 8000786:	fba2 2303 	umull	r2, r3, r2, r3
 800078a:	099b      	lsrs	r3, r3, #6
 800078c:	60fb      	str	r3, [r7, #12]

	/* Wait until the delay mets. */
	while(xTaskGetTickCount() < uiCurrTickCnt + uiDelayInTicks);
 800078e:	bf00      	nop
 8000790:	f003 fce8 	bl	8004164 <xTaskGetTickCount>
 8000794:	4601      	mov	r1, r0
 8000796:	68ba      	ldr	r2, [r7, #8]
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	4413      	add	r3, r2
 800079c:	4299      	cmp	r1, r3
 800079e:	d3f7      	bcc.n	8000790 <RtosDelay+0x2c>

	return;
 80007a0:	bf00      	nop
}
 80007a2:	3710      	adds	r7, #16
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	10624dd3 	.word	0x10624dd3

080007ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007b0:	b672      	cpsid	i
}
 80007b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007b4:	e7fe      	b.n	80007b4 <Error_Handler+0x8>
	...

080007b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b083      	sub	sp, #12
 80007bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007be:	4b0f      	ldr	r3, [pc, #60]	; (80007fc <HAL_MspInit+0x44>)
 80007c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007c2:	4a0e      	ldr	r2, [pc, #56]	; (80007fc <HAL_MspInit+0x44>)
 80007c4:	f043 0301 	orr.w	r3, r3, #1
 80007c8:	6613      	str	r3, [r2, #96]	; 0x60
 80007ca:	4b0c      	ldr	r3, [pc, #48]	; (80007fc <HAL_MspInit+0x44>)
 80007cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007ce:	f003 0301 	and.w	r3, r3, #1
 80007d2:	607b      	str	r3, [r7, #4]
 80007d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007d6:	4b09      	ldr	r3, [pc, #36]	; (80007fc <HAL_MspInit+0x44>)
 80007d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007da:	4a08      	ldr	r2, [pc, #32]	; (80007fc <HAL_MspInit+0x44>)
 80007dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007e0:	6593      	str	r3, [r2, #88]	; 0x58
 80007e2:	4b06      	ldr	r3, [pc, #24]	; (80007fc <HAL_MspInit+0x44>)
 80007e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ea:	603b      	str	r3, [r7, #0]
 80007ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ee:	bf00      	nop
 80007f0:	370c      	adds	r7, #12
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	40021000 	.word	0x40021000

08000800 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b0ac      	sub	sp, #176	; 0xb0
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000808:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800080c:	2200      	movs	r2, #0
 800080e:	601a      	str	r2, [r3, #0]
 8000810:	605a      	str	r2, [r3, #4]
 8000812:	609a      	str	r2, [r3, #8]
 8000814:	60da      	str	r2, [r3, #12]
 8000816:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000818:	f107 0314 	add.w	r3, r7, #20
 800081c:	2288      	movs	r2, #136	; 0x88
 800081e:	2100      	movs	r1, #0
 8000820:	4618      	mov	r0, r3
 8000822:	f005 f97b 	bl	8005b1c <memset>
  if(huart->Instance==USART2)
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	4a21      	ldr	r2, [pc, #132]	; (80008b0 <HAL_UART_MspInit+0xb0>)
 800082c:	4293      	cmp	r3, r2
 800082e:	d13b      	bne.n	80008a8 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000830:	2302      	movs	r3, #2
 8000832:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000834:	2300      	movs	r3, #0
 8000836:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000838:	f107 0314 	add.w	r3, r7, #20
 800083c:	4618      	mov	r0, r3
 800083e:	f001 fa33 	bl	8001ca8 <HAL_RCCEx_PeriphCLKConfig>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000848:	f7ff ffb0 	bl	80007ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800084c:	4b19      	ldr	r3, [pc, #100]	; (80008b4 <HAL_UART_MspInit+0xb4>)
 800084e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000850:	4a18      	ldr	r2, [pc, #96]	; (80008b4 <HAL_UART_MspInit+0xb4>)
 8000852:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000856:	6593      	str	r3, [r2, #88]	; 0x58
 8000858:	4b16      	ldr	r3, [pc, #88]	; (80008b4 <HAL_UART_MspInit+0xb4>)
 800085a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800085c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000860:	613b      	str	r3, [r7, #16]
 8000862:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000864:	4b13      	ldr	r3, [pc, #76]	; (80008b4 <HAL_UART_MspInit+0xb4>)
 8000866:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000868:	4a12      	ldr	r2, [pc, #72]	; (80008b4 <HAL_UART_MspInit+0xb4>)
 800086a:	f043 0301 	orr.w	r3, r3, #1
 800086e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000870:	4b10      	ldr	r3, [pc, #64]	; (80008b4 <HAL_UART_MspInit+0xb4>)
 8000872:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000874:	f003 0301 	and.w	r3, r3, #1
 8000878:	60fb      	str	r3, [r7, #12]
 800087a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800087c:	230c      	movs	r3, #12
 800087e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000882:	2302      	movs	r3, #2
 8000884:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000888:	2300      	movs	r3, #0
 800088a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800088e:	2303      	movs	r3, #3
 8000890:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000894:	2307      	movs	r3, #7
 8000896:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800089a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800089e:	4619      	mov	r1, r3
 80008a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008a4:	f000 f9a8 	bl	8000bf8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008a8:	bf00      	nop
 80008aa:	37b0      	adds	r7, #176	; 0xb0
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	40004400 	.word	0x40004400
 80008b4:	40021000 	.word	0x40021000

080008b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008bc:	e7fe      	b.n	80008bc <NMI_Handler+0x4>

080008be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008be:	b480      	push	{r7}
 80008c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008c2:	e7fe      	b.n	80008c2 <HardFault_Handler+0x4>

080008c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008c8:	e7fe      	b.n	80008c8 <MemManage_Handler+0x4>

080008ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008ca:	b480      	push	{r7}
 80008cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008ce:	e7fe      	b.n	80008ce <BusFault_Handler+0x4>

080008d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008d4:	e7fe      	b.n	80008d4 <UsageFault_Handler+0x4>

080008d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008d6:	b480      	push	{r7}
 80008d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008da:	bf00      	nop
 80008dc:	46bd      	mov	sp, r7
 80008de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e2:	4770      	bx	lr

080008e4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80008e8:	4b06      	ldr	r3, [pc, #24]	; (8000904 <SystemInit+0x20>)
 80008ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008ee:	4a05      	ldr	r2, [pc, #20]	; (8000904 <SystemInit+0x20>)
 80008f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80008f8:	bf00      	nop
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop
 8000904:	e000ed00 	.word	0xe000ed00

08000908 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000908:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000940 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800090c:	f7ff ffea 	bl	80008e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000910:	480c      	ldr	r0, [pc, #48]	; (8000944 <LoopForever+0x6>)
  ldr r1, =_edata
 8000912:	490d      	ldr	r1, [pc, #52]	; (8000948 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000914:	4a0d      	ldr	r2, [pc, #52]	; (800094c <LoopForever+0xe>)
  movs r3, #0
 8000916:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000918:	e002      	b.n	8000920 <LoopCopyDataInit>

0800091a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800091a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800091c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800091e:	3304      	adds	r3, #4

08000920 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000920:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000922:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000924:	d3f9      	bcc.n	800091a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000926:	4a0a      	ldr	r2, [pc, #40]	; (8000950 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000928:	4c0a      	ldr	r4, [pc, #40]	; (8000954 <LoopForever+0x16>)
  movs r3, #0
 800092a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800092c:	e001      	b.n	8000932 <LoopFillZerobss>

0800092e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800092e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000930:	3204      	adds	r2, #4

08000932 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000932:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000934:	d3fb      	bcc.n	800092e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000936:	f005 f8f9 	bl	8005b2c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800093a:	f7ff fdc7 	bl	80004cc <main>

0800093e <LoopForever>:

LoopForever:
    b LoopForever
 800093e:	e7fe      	b.n	800093e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000940:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000944:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000948:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800094c:	08005c3c 	.word	0x08005c3c
  ldr r2, =_sbss
 8000950:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000954:	20004258 	.word	0x20004258

08000958 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000958:	e7fe      	b.n	8000958 <ADC1_2_IRQHandler>
	...

0800095c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000962:	2300      	movs	r3, #0
 8000964:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000966:	4b0c      	ldr	r3, [pc, #48]	; (8000998 <HAL_Init+0x3c>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	4a0b      	ldr	r2, [pc, #44]	; (8000998 <HAL_Init+0x3c>)
 800096c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000970:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000972:	2003      	movs	r0, #3
 8000974:	f000 f90c 	bl	8000b90 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000978:	2000      	movs	r0, #0
 800097a:	f000 f80f 	bl	800099c <HAL_InitTick>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d002      	beq.n	800098a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000984:	2301      	movs	r3, #1
 8000986:	71fb      	strb	r3, [r7, #7]
 8000988:	e001      	b.n	800098e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800098a:	f7ff ff15 	bl	80007b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800098e:	79fb      	ldrb	r3, [r7, #7]
}
 8000990:	4618      	mov	r0, r3
 8000992:	3708      	adds	r7, #8
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	40022000 	.word	0x40022000

0800099c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b084      	sub	sp, #16
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80009a4:	2300      	movs	r3, #0
 80009a6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80009a8:	4b17      	ldr	r3, [pc, #92]	; (8000a08 <HAL_InitTick+0x6c>)
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d023      	beq.n	80009f8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80009b0:	4b16      	ldr	r3, [pc, #88]	; (8000a0c <HAL_InitTick+0x70>)
 80009b2:	681a      	ldr	r2, [r3, #0]
 80009b4:	4b14      	ldr	r3, [pc, #80]	; (8000a08 <HAL_InitTick+0x6c>)
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	4619      	mov	r1, r3
 80009ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009be:	fbb3 f3f1 	udiv	r3, r3, r1
 80009c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80009c6:	4618      	mov	r0, r3
 80009c8:	f000 f909 	bl	8000bde <HAL_SYSTICK_Config>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d10f      	bne.n	80009f2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	2b0f      	cmp	r3, #15
 80009d6:	d809      	bhi.n	80009ec <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009d8:	2200      	movs	r2, #0
 80009da:	6879      	ldr	r1, [r7, #4]
 80009dc:	f04f 30ff 	mov.w	r0, #4294967295
 80009e0:	f000 f8e1 	bl	8000ba6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009e4:	4a0a      	ldr	r2, [pc, #40]	; (8000a10 <HAL_InitTick+0x74>)
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	6013      	str	r3, [r2, #0]
 80009ea:	e007      	b.n	80009fc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80009ec:	2301      	movs	r3, #1
 80009ee:	73fb      	strb	r3, [r7, #15]
 80009f0:	e004      	b.n	80009fc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80009f2:	2301      	movs	r3, #1
 80009f4:	73fb      	strb	r3, [r7, #15]
 80009f6:	e001      	b.n	80009fc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80009f8:	2301      	movs	r3, #1
 80009fa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80009fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	3710      	adds	r7, #16
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	20000008 	.word	0x20000008
 8000a0c:	20000000 	.word	0x20000000
 8000a10:	20000004 	.word	0x20000004

08000a14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  return uwTick;
 8000a18:	4b03      	ldr	r3, [pc, #12]	; (8000a28 <HAL_GetTick+0x14>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
}
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	200000bc 	.word	0x200000bc

08000a2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b085      	sub	sp, #20
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	f003 0307 	and.w	r3, r3, #7
 8000a3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a3c:	4b0c      	ldr	r3, [pc, #48]	; (8000a70 <__NVIC_SetPriorityGrouping+0x44>)
 8000a3e:	68db      	ldr	r3, [r3, #12]
 8000a40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a42:	68ba      	ldr	r2, [r7, #8]
 8000a44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a48:	4013      	ands	r3, r2
 8000a4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a50:	68bb      	ldr	r3, [r7, #8]
 8000a52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a5e:	4a04      	ldr	r2, [pc, #16]	; (8000a70 <__NVIC_SetPriorityGrouping+0x44>)
 8000a60:	68bb      	ldr	r3, [r7, #8]
 8000a62:	60d3      	str	r3, [r2, #12]
}
 8000a64:	bf00      	nop
 8000a66:	3714      	adds	r7, #20
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr
 8000a70:	e000ed00 	.word	0xe000ed00

08000a74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a78:	4b04      	ldr	r3, [pc, #16]	; (8000a8c <__NVIC_GetPriorityGrouping+0x18>)
 8000a7a:	68db      	ldr	r3, [r3, #12]
 8000a7c:	0a1b      	lsrs	r3, r3, #8
 8000a7e:	f003 0307 	and.w	r3, r3, #7
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr
 8000a8c:	e000ed00 	.word	0xe000ed00

08000a90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b083      	sub	sp, #12
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	4603      	mov	r3, r0
 8000a98:	6039      	str	r1, [r7, #0]
 8000a9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	db0a      	blt.n	8000aba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	b2da      	uxtb	r2, r3
 8000aa8:	490c      	ldr	r1, [pc, #48]	; (8000adc <__NVIC_SetPriority+0x4c>)
 8000aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aae:	0112      	lsls	r2, r2, #4
 8000ab0:	b2d2      	uxtb	r2, r2
 8000ab2:	440b      	add	r3, r1
 8000ab4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ab8:	e00a      	b.n	8000ad0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	b2da      	uxtb	r2, r3
 8000abe:	4908      	ldr	r1, [pc, #32]	; (8000ae0 <__NVIC_SetPriority+0x50>)
 8000ac0:	79fb      	ldrb	r3, [r7, #7]
 8000ac2:	f003 030f 	and.w	r3, r3, #15
 8000ac6:	3b04      	subs	r3, #4
 8000ac8:	0112      	lsls	r2, r2, #4
 8000aca:	b2d2      	uxtb	r2, r2
 8000acc:	440b      	add	r3, r1
 8000ace:	761a      	strb	r2, [r3, #24]
}
 8000ad0:	bf00      	nop
 8000ad2:	370c      	adds	r7, #12
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr
 8000adc:	e000e100 	.word	0xe000e100
 8000ae0:	e000ed00 	.word	0xe000ed00

08000ae4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b089      	sub	sp, #36	; 0x24
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	60f8      	str	r0, [r7, #12]
 8000aec:	60b9      	str	r1, [r7, #8]
 8000aee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	f003 0307 	and.w	r3, r3, #7
 8000af6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000af8:	69fb      	ldr	r3, [r7, #28]
 8000afa:	f1c3 0307 	rsb	r3, r3, #7
 8000afe:	2b04      	cmp	r3, #4
 8000b00:	bf28      	it	cs
 8000b02:	2304      	movcs	r3, #4
 8000b04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b06:	69fb      	ldr	r3, [r7, #28]
 8000b08:	3304      	adds	r3, #4
 8000b0a:	2b06      	cmp	r3, #6
 8000b0c:	d902      	bls.n	8000b14 <NVIC_EncodePriority+0x30>
 8000b0e:	69fb      	ldr	r3, [r7, #28]
 8000b10:	3b03      	subs	r3, #3
 8000b12:	e000      	b.n	8000b16 <NVIC_EncodePriority+0x32>
 8000b14:	2300      	movs	r3, #0
 8000b16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b18:	f04f 32ff 	mov.w	r2, #4294967295
 8000b1c:	69bb      	ldr	r3, [r7, #24]
 8000b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b22:	43da      	mvns	r2, r3
 8000b24:	68bb      	ldr	r3, [r7, #8]
 8000b26:	401a      	ands	r2, r3
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b2c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	fa01 f303 	lsl.w	r3, r1, r3
 8000b36:	43d9      	mvns	r1, r3
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b3c:	4313      	orrs	r3, r2
         );
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	3724      	adds	r7, #36	; 0x24
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
	...

08000b4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	3b01      	subs	r3, #1
 8000b58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b5c:	d301      	bcc.n	8000b62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b5e:	2301      	movs	r3, #1
 8000b60:	e00f      	b.n	8000b82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b62:	4a0a      	ldr	r2, [pc, #40]	; (8000b8c <SysTick_Config+0x40>)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	3b01      	subs	r3, #1
 8000b68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b6a:	210f      	movs	r1, #15
 8000b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b70:	f7ff ff8e 	bl	8000a90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b74:	4b05      	ldr	r3, [pc, #20]	; (8000b8c <SysTick_Config+0x40>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b7a:	4b04      	ldr	r3, [pc, #16]	; (8000b8c <SysTick_Config+0x40>)
 8000b7c:	2207      	movs	r2, #7
 8000b7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b80:	2300      	movs	r3, #0
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	3708      	adds	r7, #8
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	e000e010 	.word	0xe000e010

08000b90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b98:	6878      	ldr	r0, [r7, #4]
 8000b9a:	f7ff ff47 	bl	8000a2c <__NVIC_SetPriorityGrouping>
}
 8000b9e:	bf00      	nop
 8000ba0:	3708      	adds	r7, #8
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}

08000ba6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ba6:	b580      	push	{r7, lr}
 8000ba8:	b086      	sub	sp, #24
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	4603      	mov	r3, r0
 8000bae:	60b9      	str	r1, [r7, #8]
 8000bb0:	607a      	str	r2, [r7, #4]
 8000bb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000bb8:	f7ff ff5c 	bl	8000a74 <__NVIC_GetPriorityGrouping>
 8000bbc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bbe:	687a      	ldr	r2, [r7, #4]
 8000bc0:	68b9      	ldr	r1, [r7, #8]
 8000bc2:	6978      	ldr	r0, [r7, #20]
 8000bc4:	f7ff ff8e 	bl	8000ae4 <NVIC_EncodePriority>
 8000bc8:	4602      	mov	r2, r0
 8000bca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bce:	4611      	mov	r1, r2
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f7ff ff5d 	bl	8000a90 <__NVIC_SetPriority>
}
 8000bd6:	bf00      	nop
 8000bd8:	3718      	adds	r7, #24
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}

08000bde <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bde:	b580      	push	{r7, lr}
 8000be0:	b082      	sub	sp, #8
 8000be2:	af00      	add	r7, sp, #0
 8000be4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000be6:	6878      	ldr	r0, [r7, #4]
 8000be8:	f7ff ffb0 	bl	8000b4c <SysTick_Config>
 8000bec:	4603      	mov	r3, r0
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	3708      	adds	r7, #8
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
	...

08000bf8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b087      	sub	sp, #28
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
 8000c00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c02:	2300      	movs	r3, #0
 8000c04:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c06:	e17f      	b.n	8000f08 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	681a      	ldr	r2, [r3, #0]
 8000c0c:	2101      	movs	r1, #1
 8000c0e:	697b      	ldr	r3, [r7, #20]
 8000c10:	fa01 f303 	lsl.w	r3, r1, r3
 8000c14:	4013      	ands	r3, r2
 8000c16:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	f000 8171 	beq.w	8000f02 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	685b      	ldr	r3, [r3, #4]
 8000c24:	f003 0303 	and.w	r3, r3, #3
 8000c28:	2b01      	cmp	r3, #1
 8000c2a:	d005      	beq.n	8000c38 <HAL_GPIO_Init+0x40>
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	f003 0303 	and.w	r3, r3, #3
 8000c34:	2b02      	cmp	r3, #2
 8000c36:	d130      	bne.n	8000c9a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	689b      	ldr	r3, [r3, #8]
 8000c3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000c3e:	697b      	ldr	r3, [r7, #20]
 8000c40:	005b      	lsls	r3, r3, #1
 8000c42:	2203      	movs	r2, #3
 8000c44:	fa02 f303 	lsl.w	r3, r2, r3
 8000c48:	43db      	mvns	r3, r3
 8000c4a:	693a      	ldr	r2, [r7, #16]
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	68da      	ldr	r2, [r3, #12]
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	005b      	lsls	r3, r3, #1
 8000c58:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5c:	693a      	ldr	r2, [r7, #16]
 8000c5e:	4313      	orrs	r3, r2
 8000c60:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	693a      	ldr	r2, [r7, #16]
 8000c66:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c6e:	2201      	movs	r2, #1
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	fa02 f303 	lsl.w	r3, r2, r3
 8000c76:	43db      	mvns	r3, r3
 8000c78:	693a      	ldr	r2, [r7, #16]
 8000c7a:	4013      	ands	r3, r2
 8000c7c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	685b      	ldr	r3, [r3, #4]
 8000c82:	091b      	lsrs	r3, r3, #4
 8000c84:	f003 0201 	and.w	r2, r3, #1
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8e:	693a      	ldr	r2, [r7, #16]
 8000c90:	4313      	orrs	r3, r2
 8000c92:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	693a      	ldr	r2, [r7, #16]
 8000c98:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	f003 0303 	and.w	r3, r3, #3
 8000ca2:	2b03      	cmp	r3, #3
 8000ca4:	d118      	bne.n	8000cd8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000caa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000cac:	2201      	movs	r2, #1
 8000cae:	697b      	ldr	r3, [r7, #20]
 8000cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb4:	43db      	mvns	r3, r3
 8000cb6:	693a      	ldr	r2, [r7, #16]
 8000cb8:	4013      	ands	r3, r2
 8000cba:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	08db      	lsrs	r3, r3, #3
 8000cc2:	f003 0201 	and.w	r2, r3, #1
 8000cc6:	697b      	ldr	r3, [r7, #20]
 8000cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ccc:	693a      	ldr	r2, [r7, #16]
 8000cce:	4313      	orrs	r3, r2
 8000cd0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	693a      	ldr	r2, [r7, #16]
 8000cd6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	f003 0303 	and.w	r3, r3, #3
 8000ce0:	2b03      	cmp	r3, #3
 8000ce2:	d017      	beq.n	8000d14 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	68db      	ldr	r3, [r3, #12]
 8000ce8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	005b      	lsls	r3, r3, #1
 8000cee:	2203      	movs	r2, #3
 8000cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf4:	43db      	mvns	r3, r3
 8000cf6:	693a      	ldr	r2, [r7, #16]
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	689a      	ldr	r2, [r3, #8]
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	005b      	lsls	r3, r3, #1
 8000d04:	fa02 f303 	lsl.w	r3, r2, r3
 8000d08:	693a      	ldr	r2, [r7, #16]
 8000d0a:	4313      	orrs	r3, r2
 8000d0c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	693a      	ldr	r2, [r7, #16]
 8000d12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	f003 0303 	and.w	r3, r3, #3
 8000d1c:	2b02      	cmp	r3, #2
 8000d1e:	d123      	bne.n	8000d68 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	08da      	lsrs	r2, r3, #3
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	3208      	adds	r2, #8
 8000d28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d2c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	f003 0307 	and.w	r3, r3, #7
 8000d34:	009b      	lsls	r3, r3, #2
 8000d36:	220f      	movs	r2, #15
 8000d38:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3c:	43db      	mvns	r3, r3
 8000d3e:	693a      	ldr	r2, [r7, #16]
 8000d40:	4013      	ands	r3, r2
 8000d42:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	691a      	ldr	r2, [r3, #16]
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	f003 0307 	and.w	r3, r3, #7
 8000d4e:	009b      	lsls	r3, r3, #2
 8000d50:	fa02 f303 	lsl.w	r3, r2, r3
 8000d54:	693a      	ldr	r2, [r7, #16]
 8000d56:	4313      	orrs	r3, r2
 8000d58:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	08da      	lsrs	r2, r3, #3
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	3208      	adds	r2, #8
 8000d62:	6939      	ldr	r1, [r7, #16]
 8000d64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000d6e:	697b      	ldr	r3, [r7, #20]
 8000d70:	005b      	lsls	r3, r3, #1
 8000d72:	2203      	movs	r2, #3
 8000d74:	fa02 f303 	lsl.w	r3, r2, r3
 8000d78:	43db      	mvns	r3, r3
 8000d7a:	693a      	ldr	r2, [r7, #16]
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	f003 0203 	and.w	r2, r3, #3
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	005b      	lsls	r3, r3, #1
 8000d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d90:	693a      	ldr	r2, [r7, #16]
 8000d92:	4313      	orrs	r3, r2
 8000d94:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	693a      	ldr	r2, [r7, #16]
 8000d9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	f000 80ac 	beq.w	8000f02 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000daa:	4b5f      	ldr	r3, [pc, #380]	; (8000f28 <HAL_GPIO_Init+0x330>)
 8000dac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dae:	4a5e      	ldr	r2, [pc, #376]	; (8000f28 <HAL_GPIO_Init+0x330>)
 8000db0:	f043 0301 	orr.w	r3, r3, #1
 8000db4:	6613      	str	r3, [r2, #96]	; 0x60
 8000db6:	4b5c      	ldr	r3, [pc, #368]	; (8000f28 <HAL_GPIO_Init+0x330>)
 8000db8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dba:	f003 0301 	and.w	r3, r3, #1
 8000dbe:	60bb      	str	r3, [r7, #8]
 8000dc0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000dc2:	4a5a      	ldr	r2, [pc, #360]	; (8000f2c <HAL_GPIO_Init+0x334>)
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	089b      	lsrs	r3, r3, #2
 8000dc8:	3302      	adds	r3, #2
 8000dca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dce:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	f003 0303 	and.w	r3, r3, #3
 8000dd6:	009b      	lsls	r3, r3, #2
 8000dd8:	220f      	movs	r2, #15
 8000dda:	fa02 f303 	lsl.w	r3, r2, r3
 8000dde:	43db      	mvns	r3, r3
 8000de0:	693a      	ldr	r2, [r7, #16]
 8000de2:	4013      	ands	r3, r2
 8000de4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000dec:	d025      	beq.n	8000e3a <HAL_GPIO_Init+0x242>
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	4a4f      	ldr	r2, [pc, #316]	; (8000f30 <HAL_GPIO_Init+0x338>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d01f      	beq.n	8000e36 <HAL_GPIO_Init+0x23e>
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	4a4e      	ldr	r2, [pc, #312]	; (8000f34 <HAL_GPIO_Init+0x33c>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d019      	beq.n	8000e32 <HAL_GPIO_Init+0x23a>
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	4a4d      	ldr	r2, [pc, #308]	; (8000f38 <HAL_GPIO_Init+0x340>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d013      	beq.n	8000e2e <HAL_GPIO_Init+0x236>
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4a4c      	ldr	r2, [pc, #304]	; (8000f3c <HAL_GPIO_Init+0x344>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d00d      	beq.n	8000e2a <HAL_GPIO_Init+0x232>
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4a4b      	ldr	r2, [pc, #300]	; (8000f40 <HAL_GPIO_Init+0x348>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d007      	beq.n	8000e26 <HAL_GPIO_Init+0x22e>
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	4a4a      	ldr	r2, [pc, #296]	; (8000f44 <HAL_GPIO_Init+0x34c>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d101      	bne.n	8000e22 <HAL_GPIO_Init+0x22a>
 8000e1e:	2306      	movs	r3, #6
 8000e20:	e00c      	b.n	8000e3c <HAL_GPIO_Init+0x244>
 8000e22:	2307      	movs	r3, #7
 8000e24:	e00a      	b.n	8000e3c <HAL_GPIO_Init+0x244>
 8000e26:	2305      	movs	r3, #5
 8000e28:	e008      	b.n	8000e3c <HAL_GPIO_Init+0x244>
 8000e2a:	2304      	movs	r3, #4
 8000e2c:	e006      	b.n	8000e3c <HAL_GPIO_Init+0x244>
 8000e2e:	2303      	movs	r3, #3
 8000e30:	e004      	b.n	8000e3c <HAL_GPIO_Init+0x244>
 8000e32:	2302      	movs	r3, #2
 8000e34:	e002      	b.n	8000e3c <HAL_GPIO_Init+0x244>
 8000e36:	2301      	movs	r3, #1
 8000e38:	e000      	b.n	8000e3c <HAL_GPIO_Init+0x244>
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	697a      	ldr	r2, [r7, #20]
 8000e3e:	f002 0203 	and.w	r2, r2, #3
 8000e42:	0092      	lsls	r2, r2, #2
 8000e44:	4093      	lsls	r3, r2
 8000e46:	693a      	ldr	r2, [r7, #16]
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e4c:	4937      	ldr	r1, [pc, #220]	; (8000f2c <HAL_GPIO_Init+0x334>)
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	089b      	lsrs	r3, r3, #2
 8000e52:	3302      	adds	r3, #2
 8000e54:	693a      	ldr	r2, [r7, #16]
 8000e56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000e5a:	4b3b      	ldr	r3, [pc, #236]	; (8000f48 <HAL_GPIO_Init+0x350>)
 8000e5c:	689b      	ldr	r3, [r3, #8]
 8000e5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	43db      	mvns	r3, r3
 8000e64:	693a      	ldr	r2, [r7, #16]
 8000e66:	4013      	ands	r3, r2
 8000e68:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d003      	beq.n	8000e7e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000e76:	693a      	ldr	r2, [r7, #16]
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000e7e:	4a32      	ldr	r2, [pc, #200]	; (8000f48 <HAL_GPIO_Init+0x350>)
 8000e80:	693b      	ldr	r3, [r7, #16]
 8000e82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000e84:	4b30      	ldr	r3, [pc, #192]	; (8000f48 <HAL_GPIO_Init+0x350>)
 8000e86:	68db      	ldr	r3, [r3, #12]
 8000e88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	43db      	mvns	r3, r3
 8000e8e:	693a      	ldr	r2, [r7, #16]
 8000e90:	4013      	ands	r3, r2
 8000e92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d003      	beq.n	8000ea8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000ea0:	693a      	ldr	r2, [r7, #16]
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000ea8:	4a27      	ldr	r2, [pc, #156]	; (8000f48 <HAL_GPIO_Init+0x350>)
 8000eaa:	693b      	ldr	r3, [r7, #16]
 8000eac:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000eae:	4b26      	ldr	r3, [pc, #152]	; (8000f48 <HAL_GPIO_Init+0x350>)
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	43db      	mvns	r3, r3
 8000eb8:	693a      	ldr	r2, [r7, #16]
 8000eba:	4013      	ands	r3, r2
 8000ebc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d003      	beq.n	8000ed2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000eca:	693a      	ldr	r2, [r7, #16]
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	4313      	orrs	r3, r2
 8000ed0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000ed2:	4a1d      	ldr	r2, [pc, #116]	; (8000f48 <HAL_GPIO_Init+0x350>)
 8000ed4:	693b      	ldr	r3, [r7, #16]
 8000ed6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000ed8:	4b1b      	ldr	r3, [pc, #108]	; (8000f48 <HAL_GPIO_Init+0x350>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	43db      	mvns	r3, r3
 8000ee2:	693a      	ldr	r2, [r7, #16]
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d003      	beq.n	8000efc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000ef4:	693a      	ldr	r2, [r7, #16]
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000efc:	4a12      	ldr	r2, [pc, #72]	; (8000f48 <HAL_GPIO_Init+0x350>)
 8000efe:	693b      	ldr	r3, [r7, #16]
 8000f00:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	3301      	adds	r3, #1
 8000f06:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	fa22 f303 	lsr.w	r3, r2, r3
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	f47f ae78 	bne.w	8000c08 <HAL_GPIO_Init+0x10>
  }
}
 8000f18:	bf00      	nop
 8000f1a:	bf00      	nop
 8000f1c:	371c      	adds	r7, #28
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	40021000 	.word	0x40021000
 8000f2c:	40010000 	.word	0x40010000
 8000f30:	48000400 	.word	0x48000400
 8000f34:	48000800 	.word	0x48000800
 8000f38:	48000c00 	.word	0x48000c00
 8000f3c:	48001000 	.word	0x48001000
 8000f40:	48001400 	.word	0x48001400
 8000f44:	48001800 	.word	0x48001800
 8000f48:	40010400 	.word	0x40010400

08000f4c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b085      	sub	sp, #20
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
 8000f54:	460b      	mov	r3, r1
 8000f56:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	691a      	ldr	r2, [r3, #16]
 8000f5c:	887b      	ldrh	r3, [r7, #2]
 8000f5e:	4013      	ands	r3, r2
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d002      	beq.n	8000f6a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000f64:	2301      	movs	r3, #1
 8000f66:	73fb      	strb	r3, [r7, #15]
 8000f68:	e001      	b.n	8000f6e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000f6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	3714      	adds	r7, #20
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr

08000f7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
 8000f84:	460b      	mov	r3, r1
 8000f86:	807b      	strh	r3, [r7, #2]
 8000f88:	4613      	mov	r3, r2
 8000f8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f8c:	787b      	ldrb	r3, [r7, #1]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d003      	beq.n	8000f9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f92:	887a      	ldrh	r2, [r7, #2]
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f98:	e002      	b.n	8000fa0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f9a:	887a      	ldrh	r2, [r7, #2]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000fa0:	bf00      	nop
 8000fa2:	370c      	adds	r7, #12
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr

08000fac <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b085      	sub	sp, #20
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	460b      	mov	r3, r1
 8000fb6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	695b      	ldr	r3, [r3, #20]
 8000fbc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000fbe:	887a      	ldrh	r2, [r7, #2]
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	041a      	lsls	r2, r3, #16
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	43d9      	mvns	r1, r3
 8000fca:	887b      	ldrh	r3, [r7, #2]
 8000fcc:	400b      	ands	r3, r1
 8000fce:	431a      	orrs	r2, r3
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	619a      	str	r2, [r3, #24]
}
 8000fd4:	bf00      	nop
 8000fd6:	3714      	adds	r7, #20
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr

08000fe0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000fe4:	4b04      	ldr	r3, [pc, #16]	; (8000ff8 <HAL_PWREx_GetVoltageRange+0x18>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	40007000 	.word	0x40007000

08000ffc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b085      	sub	sp, #20
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800100a:	d130      	bne.n	800106e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800100c:	4b23      	ldr	r3, [pc, #140]	; (800109c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001014:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001018:	d038      	beq.n	800108c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800101a:	4b20      	ldr	r3, [pc, #128]	; (800109c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001022:	4a1e      	ldr	r2, [pc, #120]	; (800109c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001024:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001028:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800102a:	4b1d      	ldr	r3, [pc, #116]	; (80010a0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	2232      	movs	r2, #50	; 0x32
 8001030:	fb02 f303 	mul.w	r3, r2, r3
 8001034:	4a1b      	ldr	r2, [pc, #108]	; (80010a4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001036:	fba2 2303 	umull	r2, r3, r2, r3
 800103a:	0c9b      	lsrs	r3, r3, #18
 800103c:	3301      	adds	r3, #1
 800103e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001040:	e002      	b.n	8001048 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	3b01      	subs	r3, #1
 8001046:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001048:	4b14      	ldr	r3, [pc, #80]	; (800109c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800104a:	695b      	ldr	r3, [r3, #20]
 800104c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001050:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001054:	d102      	bne.n	800105c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d1f2      	bne.n	8001042 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800105c:	4b0f      	ldr	r3, [pc, #60]	; (800109c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800105e:	695b      	ldr	r3, [r3, #20]
 8001060:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001064:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001068:	d110      	bne.n	800108c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800106a:	2303      	movs	r3, #3
 800106c:	e00f      	b.n	800108e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800106e:	4b0b      	ldr	r3, [pc, #44]	; (800109c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001076:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800107a:	d007      	beq.n	800108c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800107c:	4b07      	ldr	r3, [pc, #28]	; (800109c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001084:	4a05      	ldr	r2, [pc, #20]	; (800109c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001086:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800108a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800108c:	2300      	movs	r3, #0
}
 800108e:	4618      	mov	r0, r3
 8001090:	3714      	adds	r7, #20
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	40007000 	.word	0x40007000
 80010a0:	20000000 	.word	0x20000000
 80010a4:	431bde83 	.word	0x431bde83

080010a8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b088      	sub	sp, #32
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d101      	bne.n	80010ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010b6:	2301      	movs	r3, #1
 80010b8:	e3ca      	b.n	8001850 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80010ba:	4b97      	ldr	r3, [pc, #604]	; (8001318 <HAL_RCC_OscConfig+0x270>)
 80010bc:	689b      	ldr	r3, [r3, #8]
 80010be:	f003 030c 	and.w	r3, r3, #12
 80010c2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80010c4:	4b94      	ldr	r3, [pc, #592]	; (8001318 <HAL_RCC_OscConfig+0x270>)
 80010c6:	68db      	ldr	r3, [r3, #12]
 80010c8:	f003 0303 	and.w	r3, r3, #3
 80010cc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f003 0310 	and.w	r3, r3, #16
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	f000 80e4 	beq.w	80012a4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80010dc:	69bb      	ldr	r3, [r7, #24]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d007      	beq.n	80010f2 <HAL_RCC_OscConfig+0x4a>
 80010e2:	69bb      	ldr	r3, [r7, #24]
 80010e4:	2b0c      	cmp	r3, #12
 80010e6:	f040 808b 	bne.w	8001200 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	2b01      	cmp	r3, #1
 80010ee:	f040 8087 	bne.w	8001200 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80010f2:	4b89      	ldr	r3, [pc, #548]	; (8001318 <HAL_RCC_OscConfig+0x270>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f003 0302 	and.w	r3, r3, #2
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d005      	beq.n	800110a <HAL_RCC_OscConfig+0x62>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	699b      	ldr	r3, [r3, #24]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d101      	bne.n	800110a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001106:	2301      	movs	r3, #1
 8001108:	e3a2      	b.n	8001850 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6a1a      	ldr	r2, [r3, #32]
 800110e:	4b82      	ldr	r3, [pc, #520]	; (8001318 <HAL_RCC_OscConfig+0x270>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f003 0308 	and.w	r3, r3, #8
 8001116:	2b00      	cmp	r3, #0
 8001118:	d004      	beq.n	8001124 <HAL_RCC_OscConfig+0x7c>
 800111a:	4b7f      	ldr	r3, [pc, #508]	; (8001318 <HAL_RCC_OscConfig+0x270>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001122:	e005      	b.n	8001130 <HAL_RCC_OscConfig+0x88>
 8001124:	4b7c      	ldr	r3, [pc, #496]	; (8001318 <HAL_RCC_OscConfig+0x270>)
 8001126:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800112a:	091b      	lsrs	r3, r3, #4
 800112c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001130:	4293      	cmp	r3, r2
 8001132:	d223      	bcs.n	800117c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6a1b      	ldr	r3, [r3, #32]
 8001138:	4618      	mov	r0, r3
 800113a:	f000 fd55 	bl	8001be8 <RCC_SetFlashLatencyFromMSIRange>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001144:	2301      	movs	r3, #1
 8001146:	e383      	b.n	8001850 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001148:	4b73      	ldr	r3, [pc, #460]	; (8001318 <HAL_RCC_OscConfig+0x270>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a72      	ldr	r2, [pc, #456]	; (8001318 <HAL_RCC_OscConfig+0x270>)
 800114e:	f043 0308 	orr.w	r3, r3, #8
 8001152:	6013      	str	r3, [r2, #0]
 8001154:	4b70      	ldr	r3, [pc, #448]	; (8001318 <HAL_RCC_OscConfig+0x270>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6a1b      	ldr	r3, [r3, #32]
 8001160:	496d      	ldr	r1, [pc, #436]	; (8001318 <HAL_RCC_OscConfig+0x270>)
 8001162:	4313      	orrs	r3, r2
 8001164:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001166:	4b6c      	ldr	r3, [pc, #432]	; (8001318 <HAL_RCC_OscConfig+0x270>)
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	69db      	ldr	r3, [r3, #28]
 8001172:	021b      	lsls	r3, r3, #8
 8001174:	4968      	ldr	r1, [pc, #416]	; (8001318 <HAL_RCC_OscConfig+0x270>)
 8001176:	4313      	orrs	r3, r2
 8001178:	604b      	str	r3, [r1, #4]
 800117a:	e025      	b.n	80011c8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800117c:	4b66      	ldr	r3, [pc, #408]	; (8001318 <HAL_RCC_OscConfig+0x270>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a65      	ldr	r2, [pc, #404]	; (8001318 <HAL_RCC_OscConfig+0x270>)
 8001182:	f043 0308 	orr.w	r3, r3, #8
 8001186:	6013      	str	r3, [r2, #0]
 8001188:	4b63      	ldr	r3, [pc, #396]	; (8001318 <HAL_RCC_OscConfig+0x270>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6a1b      	ldr	r3, [r3, #32]
 8001194:	4960      	ldr	r1, [pc, #384]	; (8001318 <HAL_RCC_OscConfig+0x270>)
 8001196:	4313      	orrs	r3, r2
 8001198:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800119a:	4b5f      	ldr	r3, [pc, #380]	; (8001318 <HAL_RCC_OscConfig+0x270>)
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	69db      	ldr	r3, [r3, #28]
 80011a6:	021b      	lsls	r3, r3, #8
 80011a8:	495b      	ldr	r1, [pc, #364]	; (8001318 <HAL_RCC_OscConfig+0x270>)
 80011aa:	4313      	orrs	r3, r2
 80011ac:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80011ae:	69bb      	ldr	r3, [r7, #24]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d109      	bne.n	80011c8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6a1b      	ldr	r3, [r3, #32]
 80011b8:	4618      	mov	r0, r3
 80011ba:	f000 fd15 	bl	8001be8 <RCC_SetFlashLatencyFromMSIRange>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80011c4:	2301      	movs	r3, #1
 80011c6:	e343      	b.n	8001850 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80011c8:	f000 fc4a 	bl	8001a60 <HAL_RCC_GetSysClockFreq>
 80011cc:	4602      	mov	r2, r0
 80011ce:	4b52      	ldr	r3, [pc, #328]	; (8001318 <HAL_RCC_OscConfig+0x270>)
 80011d0:	689b      	ldr	r3, [r3, #8]
 80011d2:	091b      	lsrs	r3, r3, #4
 80011d4:	f003 030f 	and.w	r3, r3, #15
 80011d8:	4950      	ldr	r1, [pc, #320]	; (800131c <HAL_RCC_OscConfig+0x274>)
 80011da:	5ccb      	ldrb	r3, [r1, r3]
 80011dc:	f003 031f 	and.w	r3, r3, #31
 80011e0:	fa22 f303 	lsr.w	r3, r2, r3
 80011e4:	4a4e      	ldr	r2, [pc, #312]	; (8001320 <HAL_RCC_OscConfig+0x278>)
 80011e6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80011e8:	4b4e      	ldr	r3, [pc, #312]	; (8001324 <HAL_RCC_OscConfig+0x27c>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff fbd5 	bl	800099c <HAL_InitTick>
 80011f2:	4603      	mov	r3, r0
 80011f4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80011f6:	7bfb      	ldrb	r3, [r7, #15]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d052      	beq.n	80012a2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80011fc:	7bfb      	ldrb	r3, [r7, #15]
 80011fe:	e327      	b.n	8001850 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	699b      	ldr	r3, [r3, #24]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d032      	beq.n	800126e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001208:	4b43      	ldr	r3, [pc, #268]	; (8001318 <HAL_RCC_OscConfig+0x270>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a42      	ldr	r2, [pc, #264]	; (8001318 <HAL_RCC_OscConfig+0x270>)
 800120e:	f043 0301 	orr.w	r3, r3, #1
 8001212:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001214:	f7ff fbfe 	bl	8000a14 <HAL_GetTick>
 8001218:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800121a:	e008      	b.n	800122e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800121c:	f7ff fbfa 	bl	8000a14 <HAL_GetTick>
 8001220:	4602      	mov	r2, r0
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	1ad3      	subs	r3, r2, r3
 8001226:	2b02      	cmp	r3, #2
 8001228:	d901      	bls.n	800122e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800122a:	2303      	movs	r3, #3
 800122c:	e310      	b.n	8001850 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800122e:	4b3a      	ldr	r3, [pc, #232]	; (8001318 <HAL_RCC_OscConfig+0x270>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f003 0302 	and.w	r3, r3, #2
 8001236:	2b00      	cmp	r3, #0
 8001238:	d0f0      	beq.n	800121c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800123a:	4b37      	ldr	r3, [pc, #220]	; (8001318 <HAL_RCC_OscConfig+0x270>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a36      	ldr	r2, [pc, #216]	; (8001318 <HAL_RCC_OscConfig+0x270>)
 8001240:	f043 0308 	orr.w	r3, r3, #8
 8001244:	6013      	str	r3, [r2, #0]
 8001246:	4b34      	ldr	r3, [pc, #208]	; (8001318 <HAL_RCC_OscConfig+0x270>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6a1b      	ldr	r3, [r3, #32]
 8001252:	4931      	ldr	r1, [pc, #196]	; (8001318 <HAL_RCC_OscConfig+0x270>)
 8001254:	4313      	orrs	r3, r2
 8001256:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001258:	4b2f      	ldr	r3, [pc, #188]	; (8001318 <HAL_RCC_OscConfig+0x270>)
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	69db      	ldr	r3, [r3, #28]
 8001264:	021b      	lsls	r3, r3, #8
 8001266:	492c      	ldr	r1, [pc, #176]	; (8001318 <HAL_RCC_OscConfig+0x270>)
 8001268:	4313      	orrs	r3, r2
 800126a:	604b      	str	r3, [r1, #4]
 800126c:	e01a      	b.n	80012a4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800126e:	4b2a      	ldr	r3, [pc, #168]	; (8001318 <HAL_RCC_OscConfig+0x270>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a29      	ldr	r2, [pc, #164]	; (8001318 <HAL_RCC_OscConfig+0x270>)
 8001274:	f023 0301 	bic.w	r3, r3, #1
 8001278:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800127a:	f7ff fbcb 	bl	8000a14 <HAL_GetTick>
 800127e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001280:	e008      	b.n	8001294 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001282:	f7ff fbc7 	bl	8000a14 <HAL_GetTick>
 8001286:	4602      	mov	r2, r0
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	1ad3      	subs	r3, r2, r3
 800128c:	2b02      	cmp	r3, #2
 800128e:	d901      	bls.n	8001294 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001290:	2303      	movs	r3, #3
 8001292:	e2dd      	b.n	8001850 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001294:	4b20      	ldr	r3, [pc, #128]	; (8001318 <HAL_RCC_OscConfig+0x270>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f003 0302 	and.w	r3, r3, #2
 800129c:	2b00      	cmp	r3, #0
 800129e:	d1f0      	bne.n	8001282 <HAL_RCC_OscConfig+0x1da>
 80012a0:	e000      	b.n	80012a4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80012a2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f003 0301 	and.w	r3, r3, #1
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d074      	beq.n	800139a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80012b0:	69bb      	ldr	r3, [r7, #24]
 80012b2:	2b08      	cmp	r3, #8
 80012b4:	d005      	beq.n	80012c2 <HAL_RCC_OscConfig+0x21a>
 80012b6:	69bb      	ldr	r3, [r7, #24]
 80012b8:	2b0c      	cmp	r3, #12
 80012ba:	d10e      	bne.n	80012da <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	2b03      	cmp	r3, #3
 80012c0:	d10b      	bne.n	80012da <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012c2:	4b15      	ldr	r3, [pc, #84]	; (8001318 <HAL_RCC_OscConfig+0x270>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d064      	beq.n	8001398 <HAL_RCC_OscConfig+0x2f0>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d160      	bne.n	8001398 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
 80012d8:	e2ba      	b.n	8001850 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012e2:	d106      	bne.n	80012f2 <HAL_RCC_OscConfig+0x24a>
 80012e4:	4b0c      	ldr	r3, [pc, #48]	; (8001318 <HAL_RCC_OscConfig+0x270>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a0b      	ldr	r2, [pc, #44]	; (8001318 <HAL_RCC_OscConfig+0x270>)
 80012ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012ee:	6013      	str	r3, [r2, #0]
 80012f0:	e026      	b.n	8001340 <HAL_RCC_OscConfig+0x298>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012fa:	d115      	bne.n	8001328 <HAL_RCC_OscConfig+0x280>
 80012fc:	4b06      	ldr	r3, [pc, #24]	; (8001318 <HAL_RCC_OscConfig+0x270>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a05      	ldr	r2, [pc, #20]	; (8001318 <HAL_RCC_OscConfig+0x270>)
 8001302:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001306:	6013      	str	r3, [r2, #0]
 8001308:	4b03      	ldr	r3, [pc, #12]	; (8001318 <HAL_RCC_OscConfig+0x270>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a02      	ldr	r2, [pc, #8]	; (8001318 <HAL_RCC_OscConfig+0x270>)
 800130e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001312:	6013      	str	r3, [r2, #0]
 8001314:	e014      	b.n	8001340 <HAL_RCC_OscConfig+0x298>
 8001316:	bf00      	nop
 8001318:	40021000 	.word	0x40021000
 800131c:	08005be4 	.word	0x08005be4
 8001320:	20000000 	.word	0x20000000
 8001324:	20000004 	.word	0x20000004
 8001328:	4ba0      	ldr	r3, [pc, #640]	; (80015ac <HAL_RCC_OscConfig+0x504>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a9f      	ldr	r2, [pc, #636]	; (80015ac <HAL_RCC_OscConfig+0x504>)
 800132e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001332:	6013      	str	r3, [r2, #0]
 8001334:	4b9d      	ldr	r3, [pc, #628]	; (80015ac <HAL_RCC_OscConfig+0x504>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a9c      	ldr	r2, [pc, #624]	; (80015ac <HAL_RCC_OscConfig+0x504>)
 800133a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800133e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d013      	beq.n	8001370 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001348:	f7ff fb64 	bl	8000a14 <HAL_GetTick>
 800134c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800134e:	e008      	b.n	8001362 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001350:	f7ff fb60 	bl	8000a14 <HAL_GetTick>
 8001354:	4602      	mov	r2, r0
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	2b64      	cmp	r3, #100	; 0x64
 800135c:	d901      	bls.n	8001362 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800135e:	2303      	movs	r3, #3
 8001360:	e276      	b.n	8001850 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001362:	4b92      	ldr	r3, [pc, #584]	; (80015ac <HAL_RCC_OscConfig+0x504>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800136a:	2b00      	cmp	r3, #0
 800136c:	d0f0      	beq.n	8001350 <HAL_RCC_OscConfig+0x2a8>
 800136e:	e014      	b.n	800139a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001370:	f7ff fb50 	bl	8000a14 <HAL_GetTick>
 8001374:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001376:	e008      	b.n	800138a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001378:	f7ff fb4c 	bl	8000a14 <HAL_GetTick>
 800137c:	4602      	mov	r2, r0
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	2b64      	cmp	r3, #100	; 0x64
 8001384:	d901      	bls.n	800138a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001386:	2303      	movs	r3, #3
 8001388:	e262      	b.n	8001850 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800138a:	4b88      	ldr	r3, [pc, #544]	; (80015ac <HAL_RCC_OscConfig+0x504>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001392:	2b00      	cmp	r3, #0
 8001394:	d1f0      	bne.n	8001378 <HAL_RCC_OscConfig+0x2d0>
 8001396:	e000      	b.n	800139a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001398:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f003 0302 	and.w	r3, r3, #2
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d060      	beq.n	8001468 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80013a6:	69bb      	ldr	r3, [r7, #24]
 80013a8:	2b04      	cmp	r3, #4
 80013aa:	d005      	beq.n	80013b8 <HAL_RCC_OscConfig+0x310>
 80013ac:	69bb      	ldr	r3, [r7, #24]
 80013ae:	2b0c      	cmp	r3, #12
 80013b0:	d119      	bne.n	80013e6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	2b02      	cmp	r3, #2
 80013b6:	d116      	bne.n	80013e6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013b8:	4b7c      	ldr	r3, [pc, #496]	; (80015ac <HAL_RCC_OscConfig+0x504>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d005      	beq.n	80013d0 <HAL_RCC_OscConfig+0x328>
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	68db      	ldr	r3, [r3, #12]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d101      	bne.n	80013d0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80013cc:	2301      	movs	r3, #1
 80013ce:	e23f      	b.n	8001850 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013d0:	4b76      	ldr	r3, [pc, #472]	; (80015ac <HAL_RCC_OscConfig+0x504>)
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	691b      	ldr	r3, [r3, #16]
 80013dc:	061b      	lsls	r3, r3, #24
 80013de:	4973      	ldr	r1, [pc, #460]	; (80015ac <HAL_RCC_OscConfig+0x504>)
 80013e0:	4313      	orrs	r3, r2
 80013e2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013e4:	e040      	b.n	8001468 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	68db      	ldr	r3, [r3, #12]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d023      	beq.n	8001436 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013ee:	4b6f      	ldr	r3, [pc, #444]	; (80015ac <HAL_RCC_OscConfig+0x504>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a6e      	ldr	r2, [pc, #440]	; (80015ac <HAL_RCC_OscConfig+0x504>)
 80013f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013fa:	f7ff fb0b 	bl	8000a14 <HAL_GetTick>
 80013fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001400:	e008      	b.n	8001414 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001402:	f7ff fb07 	bl	8000a14 <HAL_GetTick>
 8001406:	4602      	mov	r2, r0
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	1ad3      	subs	r3, r2, r3
 800140c:	2b02      	cmp	r3, #2
 800140e:	d901      	bls.n	8001414 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001410:	2303      	movs	r3, #3
 8001412:	e21d      	b.n	8001850 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001414:	4b65      	ldr	r3, [pc, #404]	; (80015ac <HAL_RCC_OscConfig+0x504>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800141c:	2b00      	cmp	r3, #0
 800141e:	d0f0      	beq.n	8001402 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001420:	4b62      	ldr	r3, [pc, #392]	; (80015ac <HAL_RCC_OscConfig+0x504>)
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	691b      	ldr	r3, [r3, #16]
 800142c:	061b      	lsls	r3, r3, #24
 800142e:	495f      	ldr	r1, [pc, #380]	; (80015ac <HAL_RCC_OscConfig+0x504>)
 8001430:	4313      	orrs	r3, r2
 8001432:	604b      	str	r3, [r1, #4]
 8001434:	e018      	b.n	8001468 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001436:	4b5d      	ldr	r3, [pc, #372]	; (80015ac <HAL_RCC_OscConfig+0x504>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a5c      	ldr	r2, [pc, #368]	; (80015ac <HAL_RCC_OscConfig+0x504>)
 800143c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001440:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001442:	f7ff fae7 	bl	8000a14 <HAL_GetTick>
 8001446:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001448:	e008      	b.n	800145c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800144a:	f7ff fae3 	bl	8000a14 <HAL_GetTick>
 800144e:	4602      	mov	r2, r0
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	1ad3      	subs	r3, r2, r3
 8001454:	2b02      	cmp	r3, #2
 8001456:	d901      	bls.n	800145c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001458:	2303      	movs	r3, #3
 800145a:	e1f9      	b.n	8001850 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800145c:	4b53      	ldr	r3, [pc, #332]	; (80015ac <HAL_RCC_OscConfig+0x504>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001464:	2b00      	cmp	r3, #0
 8001466:	d1f0      	bne.n	800144a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f003 0308 	and.w	r3, r3, #8
 8001470:	2b00      	cmp	r3, #0
 8001472:	d03c      	beq.n	80014ee <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	695b      	ldr	r3, [r3, #20]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d01c      	beq.n	80014b6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800147c:	4b4b      	ldr	r3, [pc, #300]	; (80015ac <HAL_RCC_OscConfig+0x504>)
 800147e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001482:	4a4a      	ldr	r2, [pc, #296]	; (80015ac <HAL_RCC_OscConfig+0x504>)
 8001484:	f043 0301 	orr.w	r3, r3, #1
 8001488:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800148c:	f7ff fac2 	bl	8000a14 <HAL_GetTick>
 8001490:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001492:	e008      	b.n	80014a6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001494:	f7ff fabe 	bl	8000a14 <HAL_GetTick>
 8001498:	4602      	mov	r2, r0
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	2b02      	cmp	r3, #2
 80014a0:	d901      	bls.n	80014a6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80014a2:	2303      	movs	r3, #3
 80014a4:	e1d4      	b.n	8001850 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80014a6:	4b41      	ldr	r3, [pc, #260]	; (80015ac <HAL_RCC_OscConfig+0x504>)
 80014a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014ac:	f003 0302 	and.w	r3, r3, #2
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d0ef      	beq.n	8001494 <HAL_RCC_OscConfig+0x3ec>
 80014b4:	e01b      	b.n	80014ee <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014b6:	4b3d      	ldr	r3, [pc, #244]	; (80015ac <HAL_RCC_OscConfig+0x504>)
 80014b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014bc:	4a3b      	ldr	r2, [pc, #236]	; (80015ac <HAL_RCC_OscConfig+0x504>)
 80014be:	f023 0301 	bic.w	r3, r3, #1
 80014c2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014c6:	f7ff faa5 	bl	8000a14 <HAL_GetTick>
 80014ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80014cc:	e008      	b.n	80014e0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014ce:	f7ff faa1 	bl	8000a14 <HAL_GetTick>
 80014d2:	4602      	mov	r2, r0
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	1ad3      	subs	r3, r2, r3
 80014d8:	2b02      	cmp	r3, #2
 80014da:	d901      	bls.n	80014e0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80014dc:	2303      	movs	r3, #3
 80014de:	e1b7      	b.n	8001850 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80014e0:	4b32      	ldr	r3, [pc, #200]	; (80015ac <HAL_RCC_OscConfig+0x504>)
 80014e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014e6:	f003 0302 	and.w	r3, r3, #2
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d1ef      	bne.n	80014ce <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f003 0304 	and.w	r3, r3, #4
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	f000 80a6 	beq.w	8001648 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014fc:	2300      	movs	r3, #0
 80014fe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001500:	4b2a      	ldr	r3, [pc, #168]	; (80015ac <HAL_RCC_OscConfig+0x504>)
 8001502:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001504:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001508:	2b00      	cmp	r3, #0
 800150a:	d10d      	bne.n	8001528 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800150c:	4b27      	ldr	r3, [pc, #156]	; (80015ac <HAL_RCC_OscConfig+0x504>)
 800150e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001510:	4a26      	ldr	r2, [pc, #152]	; (80015ac <HAL_RCC_OscConfig+0x504>)
 8001512:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001516:	6593      	str	r3, [r2, #88]	; 0x58
 8001518:	4b24      	ldr	r3, [pc, #144]	; (80015ac <HAL_RCC_OscConfig+0x504>)
 800151a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800151c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001520:	60bb      	str	r3, [r7, #8]
 8001522:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001524:	2301      	movs	r3, #1
 8001526:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001528:	4b21      	ldr	r3, [pc, #132]	; (80015b0 <HAL_RCC_OscConfig+0x508>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001530:	2b00      	cmp	r3, #0
 8001532:	d118      	bne.n	8001566 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001534:	4b1e      	ldr	r3, [pc, #120]	; (80015b0 <HAL_RCC_OscConfig+0x508>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a1d      	ldr	r2, [pc, #116]	; (80015b0 <HAL_RCC_OscConfig+0x508>)
 800153a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800153e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001540:	f7ff fa68 	bl	8000a14 <HAL_GetTick>
 8001544:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001546:	e008      	b.n	800155a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001548:	f7ff fa64 	bl	8000a14 <HAL_GetTick>
 800154c:	4602      	mov	r2, r0
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	2b02      	cmp	r3, #2
 8001554:	d901      	bls.n	800155a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001556:	2303      	movs	r3, #3
 8001558:	e17a      	b.n	8001850 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800155a:	4b15      	ldr	r3, [pc, #84]	; (80015b0 <HAL_RCC_OscConfig+0x508>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001562:	2b00      	cmp	r3, #0
 8001564:	d0f0      	beq.n	8001548 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	2b01      	cmp	r3, #1
 800156c:	d108      	bne.n	8001580 <HAL_RCC_OscConfig+0x4d8>
 800156e:	4b0f      	ldr	r3, [pc, #60]	; (80015ac <HAL_RCC_OscConfig+0x504>)
 8001570:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001574:	4a0d      	ldr	r2, [pc, #52]	; (80015ac <HAL_RCC_OscConfig+0x504>)
 8001576:	f043 0301 	orr.w	r3, r3, #1
 800157a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800157e:	e029      	b.n	80015d4 <HAL_RCC_OscConfig+0x52c>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	2b05      	cmp	r3, #5
 8001586:	d115      	bne.n	80015b4 <HAL_RCC_OscConfig+0x50c>
 8001588:	4b08      	ldr	r3, [pc, #32]	; (80015ac <HAL_RCC_OscConfig+0x504>)
 800158a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800158e:	4a07      	ldr	r2, [pc, #28]	; (80015ac <HAL_RCC_OscConfig+0x504>)
 8001590:	f043 0304 	orr.w	r3, r3, #4
 8001594:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001598:	4b04      	ldr	r3, [pc, #16]	; (80015ac <HAL_RCC_OscConfig+0x504>)
 800159a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800159e:	4a03      	ldr	r2, [pc, #12]	; (80015ac <HAL_RCC_OscConfig+0x504>)
 80015a0:	f043 0301 	orr.w	r3, r3, #1
 80015a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80015a8:	e014      	b.n	80015d4 <HAL_RCC_OscConfig+0x52c>
 80015aa:	bf00      	nop
 80015ac:	40021000 	.word	0x40021000
 80015b0:	40007000 	.word	0x40007000
 80015b4:	4b9c      	ldr	r3, [pc, #624]	; (8001828 <HAL_RCC_OscConfig+0x780>)
 80015b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015ba:	4a9b      	ldr	r2, [pc, #620]	; (8001828 <HAL_RCC_OscConfig+0x780>)
 80015bc:	f023 0301 	bic.w	r3, r3, #1
 80015c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80015c4:	4b98      	ldr	r3, [pc, #608]	; (8001828 <HAL_RCC_OscConfig+0x780>)
 80015c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015ca:	4a97      	ldr	r2, [pc, #604]	; (8001828 <HAL_RCC_OscConfig+0x780>)
 80015cc:	f023 0304 	bic.w	r3, r3, #4
 80015d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d016      	beq.n	800160a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015dc:	f7ff fa1a 	bl	8000a14 <HAL_GetTick>
 80015e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80015e2:	e00a      	b.n	80015fa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015e4:	f7ff fa16 	bl	8000a14 <HAL_GetTick>
 80015e8:	4602      	mov	r2, r0
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d901      	bls.n	80015fa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80015f6:	2303      	movs	r3, #3
 80015f8:	e12a      	b.n	8001850 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80015fa:	4b8b      	ldr	r3, [pc, #556]	; (8001828 <HAL_RCC_OscConfig+0x780>)
 80015fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001600:	f003 0302 	and.w	r3, r3, #2
 8001604:	2b00      	cmp	r3, #0
 8001606:	d0ed      	beq.n	80015e4 <HAL_RCC_OscConfig+0x53c>
 8001608:	e015      	b.n	8001636 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800160a:	f7ff fa03 	bl	8000a14 <HAL_GetTick>
 800160e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001610:	e00a      	b.n	8001628 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001612:	f7ff f9ff 	bl	8000a14 <HAL_GetTick>
 8001616:	4602      	mov	r2, r0
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	1ad3      	subs	r3, r2, r3
 800161c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001620:	4293      	cmp	r3, r2
 8001622:	d901      	bls.n	8001628 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001624:	2303      	movs	r3, #3
 8001626:	e113      	b.n	8001850 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001628:	4b7f      	ldr	r3, [pc, #508]	; (8001828 <HAL_RCC_OscConfig+0x780>)
 800162a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800162e:	f003 0302 	and.w	r3, r3, #2
 8001632:	2b00      	cmp	r3, #0
 8001634:	d1ed      	bne.n	8001612 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001636:	7ffb      	ldrb	r3, [r7, #31]
 8001638:	2b01      	cmp	r3, #1
 800163a:	d105      	bne.n	8001648 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800163c:	4b7a      	ldr	r3, [pc, #488]	; (8001828 <HAL_RCC_OscConfig+0x780>)
 800163e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001640:	4a79      	ldr	r2, [pc, #484]	; (8001828 <HAL_RCC_OscConfig+0x780>)
 8001642:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001646:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800164c:	2b00      	cmp	r3, #0
 800164e:	f000 80fe 	beq.w	800184e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001656:	2b02      	cmp	r3, #2
 8001658:	f040 80d0 	bne.w	80017fc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800165c:	4b72      	ldr	r3, [pc, #456]	; (8001828 <HAL_RCC_OscConfig+0x780>)
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	f003 0203 	and.w	r2, r3, #3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800166c:	429a      	cmp	r2, r3
 800166e:	d130      	bne.n	80016d2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167a:	3b01      	subs	r3, #1
 800167c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800167e:	429a      	cmp	r2, r3
 8001680:	d127      	bne.n	80016d2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800168c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800168e:	429a      	cmp	r2, r3
 8001690:	d11f      	bne.n	80016d2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001698:	687a      	ldr	r2, [r7, #4]
 800169a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800169c:	2a07      	cmp	r2, #7
 800169e:	bf14      	ite	ne
 80016a0:	2201      	movne	r2, #1
 80016a2:	2200      	moveq	r2, #0
 80016a4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d113      	bne.n	80016d2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016b4:	085b      	lsrs	r3, r3, #1
 80016b6:	3b01      	subs	r3, #1
 80016b8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80016ba:	429a      	cmp	r2, r3
 80016bc:	d109      	bne.n	80016d2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c8:	085b      	lsrs	r3, r3, #1
 80016ca:	3b01      	subs	r3, #1
 80016cc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80016ce:	429a      	cmp	r2, r3
 80016d0:	d06e      	beq.n	80017b0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80016d2:	69bb      	ldr	r3, [r7, #24]
 80016d4:	2b0c      	cmp	r3, #12
 80016d6:	d069      	beq.n	80017ac <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80016d8:	4b53      	ldr	r3, [pc, #332]	; (8001828 <HAL_RCC_OscConfig+0x780>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d105      	bne.n	80016f0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80016e4:	4b50      	ldr	r3, [pc, #320]	; (8001828 <HAL_RCC_OscConfig+0x780>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80016f0:	2301      	movs	r3, #1
 80016f2:	e0ad      	b.n	8001850 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80016f4:	4b4c      	ldr	r3, [pc, #304]	; (8001828 <HAL_RCC_OscConfig+0x780>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a4b      	ldr	r2, [pc, #300]	; (8001828 <HAL_RCC_OscConfig+0x780>)
 80016fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80016fe:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001700:	f7ff f988 	bl	8000a14 <HAL_GetTick>
 8001704:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001706:	e008      	b.n	800171a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001708:	f7ff f984 	bl	8000a14 <HAL_GetTick>
 800170c:	4602      	mov	r2, r0
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	2b02      	cmp	r3, #2
 8001714:	d901      	bls.n	800171a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001716:	2303      	movs	r3, #3
 8001718:	e09a      	b.n	8001850 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800171a:	4b43      	ldr	r3, [pc, #268]	; (8001828 <HAL_RCC_OscConfig+0x780>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001722:	2b00      	cmp	r3, #0
 8001724:	d1f0      	bne.n	8001708 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001726:	4b40      	ldr	r3, [pc, #256]	; (8001828 <HAL_RCC_OscConfig+0x780>)
 8001728:	68da      	ldr	r2, [r3, #12]
 800172a:	4b40      	ldr	r3, [pc, #256]	; (800182c <HAL_RCC_OscConfig+0x784>)
 800172c:	4013      	ands	r3, r2
 800172e:	687a      	ldr	r2, [r7, #4]
 8001730:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001732:	687a      	ldr	r2, [r7, #4]
 8001734:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001736:	3a01      	subs	r2, #1
 8001738:	0112      	lsls	r2, r2, #4
 800173a:	4311      	orrs	r1, r2
 800173c:	687a      	ldr	r2, [r7, #4]
 800173e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001740:	0212      	lsls	r2, r2, #8
 8001742:	4311      	orrs	r1, r2
 8001744:	687a      	ldr	r2, [r7, #4]
 8001746:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001748:	0852      	lsrs	r2, r2, #1
 800174a:	3a01      	subs	r2, #1
 800174c:	0552      	lsls	r2, r2, #21
 800174e:	4311      	orrs	r1, r2
 8001750:	687a      	ldr	r2, [r7, #4]
 8001752:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001754:	0852      	lsrs	r2, r2, #1
 8001756:	3a01      	subs	r2, #1
 8001758:	0652      	lsls	r2, r2, #25
 800175a:	4311      	orrs	r1, r2
 800175c:	687a      	ldr	r2, [r7, #4]
 800175e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001760:	0912      	lsrs	r2, r2, #4
 8001762:	0452      	lsls	r2, r2, #17
 8001764:	430a      	orrs	r2, r1
 8001766:	4930      	ldr	r1, [pc, #192]	; (8001828 <HAL_RCC_OscConfig+0x780>)
 8001768:	4313      	orrs	r3, r2
 800176a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800176c:	4b2e      	ldr	r3, [pc, #184]	; (8001828 <HAL_RCC_OscConfig+0x780>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a2d      	ldr	r2, [pc, #180]	; (8001828 <HAL_RCC_OscConfig+0x780>)
 8001772:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001776:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001778:	4b2b      	ldr	r3, [pc, #172]	; (8001828 <HAL_RCC_OscConfig+0x780>)
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	4a2a      	ldr	r2, [pc, #168]	; (8001828 <HAL_RCC_OscConfig+0x780>)
 800177e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001782:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001784:	f7ff f946 	bl	8000a14 <HAL_GetTick>
 8001788:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800178a:	e008      	b.n	800179e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800178c:	f7ff f942 	bl	8000a14 <HAL_GetTick>
 8001790:	4602      	mov	r2, r0
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	2b02      	cmp	r3, #2
 8001798:	d901      	bls.n	800179e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800179a:	2303      	movs	r3, #3
 800179c:	e058      	b.n	8001850 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800179e:	4b22      	ldr	r3, [pc, #136]	; (8001828 <HAL_RCC_OscConfig+0x780>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d0f0      	beq.n	800178c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80017aa:	e050      	b.n	800184e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	e04f      	b.n	8001850 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017b0:	4b1d      	ldr	r3, [pc, #116]	; (8001828 <HAL_RCC_OscConfig+0x780>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d148      	bne.n	800184e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80017bc:	4b1a      	ldr	r3, [pc, #104]	; (8001828 <HAL_RCC_OscConfig+0x780>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a19      	ldr	r2, [pc, #100]	; (8001828 <HAL_RCC_OscConfig+0x780>)
 80017c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017c6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80017c8:	4b17      	ldr	r3, [pc, #92]	; (8001828 <HAL_RCC_OscConfig+0x780>)
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	4a16      	ldr	r2, [pc, #88]	; (8001828 <HAL_RCC_OscConfig+0x780>)
 80017ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017d2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80017d4:	f7ff f91e 	bl	8000a14 <HAL_GetTick>
 80017d8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017da:	e008      	b.n	80017ee <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017dc:	f7ff f91a 	bl	8000a14 <HAL_GetTick>
 80017e0:	4602      	mov	r2, r0
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	d901      	bls.n	80017ee <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80017ea:	2303      	movs	r3, #3
 80017ec:	e030      	b.n	8001850 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017ee:	4b0e      	ldr	r3, [pc, #56]	; (8001828 <HAL_RCC_OscConfig+0x780>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d0f0      	beq.n	80017dc <HAL_RCC_OscConfig+0x734>
 80017fa:	e028      	b.n	800184e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80017fc:	69bb      	ldr	r3, [r7, #24]
 80017fe:	2b0c      	cmp	r3, #12
 8001800:	d023      	beq.n	800184a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001802:	4b09      	ldr	r3, [pc, #36]	; (8001828 <HAL_RCC_OscConfig+0x780>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a08      	ldr	r2, [pc, #32]	; (8001828 <HAL_RCC_OscConfig+0x780>)
 8001808:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800180c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800180e:	f7ff f901 	bl	8000a14 <HAL_GetTick>
 8001812:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001814:	e00c      	b.n	8001830 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001816:	f7ff f8fd 	bl	8000a14 <HAL_GetTick>
 800181a:	4602      	mov	r2, r0
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	1ad3      	subs	r3, r2, r3
 8001820:	2b02      	cmp	r3, #2
 8001822:	d905      	bls.n	8001830 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001824:	2303      	movs	r3, #3
 8001826:	e013      	b.n	8001850 <HAL_RCC_OscConfig+0x7a8>
 8001828:	40021000 	.word	0x40021000
 800182c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001830:	4b09      	ldr	r3, [pc, #36]	; (8001858 <HAL_RCC_OscConfig+0x7b0>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001838:	2b00      	cmp	r3, #0
 800183a:	d1ec      	bne.n	8001816 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800183c:	4b06      	ldr	r3, [pc, #24]	; (8001858 <HAL_RCC_OscConfig+0x7b0>)
 800183e:	68da      	ldr	r2, [r3, #12]
 8001840:	4905      	ldr	r1, [pc, #20]	; (8001858 <HAL_RCC_OscConfig+0x7b0>)
 8001842:	4b06      	ldr	r3, [pc, #24]	; (800185c <HAL_RCC_OscConfig+0x7b4>)
 8001844:	4013      	ands	r3, r2
 8001846:	60cb      	str	r3, [r1, #12]
 8001848:	e001      	b.n	800184e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e000      	b.n	8001850 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800184e:	2300      	movs	r3, #0
}
 8001850:	4618      	mov	r0, r3
 8001852:	3720      	adds	r7, #32
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	40021000 	.word	0x40021000
 800185c:	feeefffc 	.word	0xfeeefffc

08001860 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d101      	bne.n	8001874 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	e0e7      	b.n	8001a44 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001874:	4b75      	ldr	r3, [pc, #468]	; (8001a4c <HAL_RCC_ClockConfig+0x1ec>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f003 0307 	and.w	r3, r3, #7
 800187c:	683a      	ldr	r2, [r7, #0]
 800187e:	429a      	cmp	r2, r3
 8001880:	d910      	bls.n	80018a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001882:	4b72      	ldr	r3, [pc, #456]	; (8001a4c <HAL_RCC_ClockConfig+0x1ec>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f023 0207 	bic.w	r2, r3, #7
 800188a:	4970      	ldr	r1, [pc, #448]	; (8001a4c <HAL_RCC_ClockConfig+0x1ec>)
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	4313      	orrs	r3, r2
 8001890:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001892:	4b6e      	ldr	r3, [pc, #440]	; (8001a4c <HAL_RCC_ClockConfig+0x1ec>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 0307 	and.w	r3, r3, #7
 800189a:	683a      	ldr	r2, [r7, #0]
 800189c:	429a      	cmp	r2, r3
 800189e:	d001      	beq.n	80018a4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	e0cf      	b.n	8001a44 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f003 0302 	and.w	r3, r3, #2
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d010      	beq.n	80018d2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	689a      	ldr	r2, [r3, #8]
 80018b4:	4b66      	ldr	r3, [pc, #408]	; (8001a50 <HAL_RCC_ClockConfig+0x1f0>)
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80018bc:	429a      	cmp	r2, r3
 80018be:	d908      	bls.n	80018d2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018c0:	4b63      	ldr	r3, [pc, #396]	; (8001a50 <HAL_RCC_ClockConfig+0x1f0>)
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	4960      	ldr	r1, [pc, #384]	; (8001a50 <HAL_RCC_ClockConfig+0x1f0>)
 80018ce:	4313      	orrs	r3, r2
 80018d0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 0301 	and.w	r3, r3, #1
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d04c      	beq.n	8001978 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	2b03      	cmp	r3, #3
 80018e4:	d107      	bne.n	80018f6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018e6:	4b5a      	ldr	r3, [pc, #360]	; (8001a50 <HAL_RCC_ClockConfig+0x1f0>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d121      	bne.n	8001936 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e0a6      	b.n	8001a44 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	2b02      	cmp	r3, #2
 80018fc:	d107      	bne.n	800190e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018fe:	4b54      	ldr	r3, [pc, #336]	; (8001a50 <HAL_RCC_ClockConfig+0x1f0>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001906:	2b00      	cmp	r3, #0
 8001908:	d115      	bne.n	8001936 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	e09a      	b.n	8001a44 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d107      	bne.n	8001926 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001916:	4b4e      	ldr	r3, [pc, #312]	; (8001a50 <HAL_RCC_ClockConfig+0x1f0>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 0302 	and.w	r3, r3, #2
 800191e:	2b00      	cmp	r3, #0
 8001920:	d109      	bne.n	8001936 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e08e      	b.n	8001a44 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001926:	4b4a      	ldr	r3, [pc, #296]	; (8001a50 <HAL_RCC_ClockConfig+0x1f0>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800192e:	2b00      	cmp	r3, #0
 8001930:	d101      	bne.n	8001936 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e086      	b.n	8001a44 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001936:	4b46      	ldr	r3, [pc, #280]	; (8001a50 <HAL_RCC_ClockConfig+0x1f0>)
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	f023 0203 	bic.w	r2, r3, #3
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	4943      	ldr	r1, [pc, #268]	; (8001a50 <HAL_RCC_ClockConfig+0x1f0>)
 8001944:	4313      	orrs	r3, r2
 8001946:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001948:	f7ff f864 	bl	8000a14 <HAL_GetTick>
 800194c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800194e:	e00a      	b.n	8001966 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001950:	f7ff f860 	bl	8000a14 <HAL_GetTick>
 8001954:	4602      	mov	r2, r0
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	f241 3288 	movw	r2, #5000	; 0x1388
 800195e:	4293      	cmp	r3, r2
 8001960:	d901      	bls.n	8001966 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001962:	2303      	movs	r3, #3
 8001964:	e06e      	b.n	8001a44 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001966:	4b3a      	ldr	r3, [pc, #232]	; (8001a50 <HAL_RCC_ClockConfig+0x1f0>)
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	f003 020c 	and.w	r2, r3, #12
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	429a      	cmp	r2, r3
 8001976:	d1eb      	bne.n	8001950 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 0302 	and.w	r3, r3, #2
 8001980:	2b00      	cmp	r3, #0
 8001982:	d010      	beq.n	80019a6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	689a      	ldr	r2, [r3, #8]
 8001988:	4b31      	ldr	r3, [pc, #196]	; (8001a50 <HAL_RCC_ClockConfig+0x1f0>)
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001990:	429a      	cmp	r2, r3
 8001992:	d208      	bcs.n	80019a6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001994:	4b2e      	ldr	r3, [pc, #184]	; (8001a50 <HAL_RCC_ClockConfig+0x1f0>)
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	492b      	ldr	r1, [pc, #172]	; (8001a50 <HAL_RCC_ClockConfig+0x1f0>)
 80019a2:	4313      	orrs	r3, r2
 80019a4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019a6:	4b29      	ldr	r3, [pc, #164]	; (8001a4c <HAL_RCC_ClockConfig+0x1ec>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 0307 	and.w	r3, r3, #7
 80019ae:	683a      	ldr	r2, [r7, #0]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d210      	bcs.n	80019d6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019b4:	4b25      	ldr	r3, [pc, #148]	; (8001a4c <HAL_RCC_ClockConfig+0x1ec>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f023 0207 	bic.w	r2, r3, #7
 80019bc:	4923      	ldr	r1, [pc, #140]	; (8001a4c <HAL_RCC_ClockConfig+0x1ec>)
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019c4:	4b21      	ldr	r3, [pc, #132]	; (8001a4c <HAL_RCC_ClockConfig+0x1ec>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 0307 	and.w	r3, r3, #7
 80019cc:	683a      	ldr	r2, [r7, #0]
 80019ce:	429a      	cmp	r2, r3
 80019d0:	d001      	beq.n	80019d6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e036      	b.n	8001a44 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0304 	and.w	r3, r3, #4
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d008      	beq.n	80019f4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019e2:	4b1b      	ldr	r3, [pc, #108]	; (8001a50 <HAL_RCC_ClockConfig+0x1f0>)
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	68db      	ldr	r3, [r3, #12]
 80019ee:	4918      	ldr	r1, [pc, #96]	; (8001a50 <HAL_RCC_ClockConfig+0x1f0>)
 80019f0:	4313      	orrs	r3, r2
 80019f2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 0308 	and.w	r3, r3, #8
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d009      	beq.n	8001a14 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a00:	4b13      	ldr	r3, [pc, #76]	; (8001a50 <HAL_RCC_ClockConfig+0x1f0>)
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	691b      	ldr	r3, [r3, #16]
 8001a0c:	00db      	lsls	r3, r3, #3
 8001a0e:	4910      	ldr	r1, [pc, #64]	; (8001a50 <HAL_RCC_ClockConfig+0x1f0>)
 8001a10:	4313      	orrs	r3, r2
 8001a12:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a14:	f000 f824 	bl	8001a60 <HAL_RCC_GetSysClockFreq>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	4b0d      	ldr	r3, [pc, #52]	; (8001a50 <HAL_RCC_ClockConfig+0x1f0>)
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	091b      	lsrs	r3, r3, #4
 8001a20:	f003 030f 	and.w	r3, r3, #15
 8001a24:	490b      	ldr	r1, [pc, #44]	; (8001a54 <HAL_RCC_ClockConfig+0x1f4>)
 8001a26:	5ccb      	ldrb	r3, [r1, r3]
 8001a28:	f003 031f 	and.w	r3, r3, #31
 8001a2c:	fa22 f303 	lsr.w	r3, r2, r3
 8001a30:	4a09      	ldr	r2, [pc, #36]	; (8001a58 <HAL_RCC_ClockConfig+0x1f8>)
 8001a32:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001a34:	4b09      	ldr	r3, [pc, #36]	; (8001a5c <HAL_RCC_ClockConfig+0x1fc>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f7fe ffaf 	bl	800099c <HAL_InitTick>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	72fb      	strb	r3, [r7, #11]

  return status;
 8001a42:	7afb      	ldrb	r3, [r7, #11]
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	3710      	adds	r7, #16
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	40022000 	.word	0x40022000
 8001a50:	40021000 	.word	0x40021000
 8001a54:	08005be4 	.word	0x08005be4
 8001a58:	20000000 	.word	0x20000000
 8001a5c:	20000004 	.word	0x20000004

08001a60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b089      	sub	sp, #36	; 0x24
 8001a64:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001a66:	2300      	movs	r3, #0
 8001a68:	61fb      	str	r3, [r7, #28]
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a6e:	4b3e      	ldr	r3, [pc, #248]	; (8001b68 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	f003 030c 	and.w	r3, r3, #12
 8001a76:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a78:	4b3b      	ldr	r3, [pc, #236]	; (8001b68 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	f003 0303 	and.w	r3, r3, #3
 8001a80:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d005      	beq.n	8001a94 <HAL_RCC_GetSysClockFreq+0x34>
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	2b0c      	cmp	r3, #12
 8001a8c:	d121      	bne.n	8001ad2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d11e      	bne.n	8001ad2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001a94:	4b34      	ldr	r3, [pc, #208]	; (8001b68 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 0308 	and.w	r3, r3, #8
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d107      	bne.n	8001ab0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001aa0:	4b31      	ldr	r3, [pc, #196]	; (8001b68 <HAL_RCC_GetSysClockFreq+0x108>)
 8001aa2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001aa6:	0a1b      	lsrs	r3, r3, #8
 8001aa8:	f003 030f 	and.w	r3, r3, #15
 8001aac:	61fb      	str	r3, [r7, #28]
 8001aae:	e005      	b.n	8001abc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001ab0:	4b2d      	ldr	r3, [pc, #180]	; (8001b68 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	091b      	lsrs	r3, r3, #4
 8001ab6:	f003 030f 	and.w	r3, r3, #15
 8001aba:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001abc:	4a2b      	ldr	r2, [pc, #172]	; (8001b6c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ac4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d10d      	bne.n	8001ae8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001acc:	69fb      	ldr	r3, [r7, #28]
 8001ace:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ad0:	e00a      	b.n	8001ae8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	2b04      	cmp	r3, #4
 8001ad6:	d102      	bne.n	8001ade <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001ad8:	4b25      	ldr	r3, [pc, #148]	; (8001b70 <HAL_RCC_GetSysClockFreq+0x110>)
 8001ada:	61bb      	str	r3, [r7, #24]
 8001adc:	e004      	b.n	8001ae8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	2b08      	cmp	r3, #8
 8001ae2:	d101      	bne.n	8001ae8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ae4:	4b23      	ldr	r3, [pc, #140]	; (8001b74 <HAL_RCC_GetSysClockFreq+0x114>)
 8001ae6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	2b0c      	cmp	r3, #12
 8001aec:	d134      	bne.n	8001b58 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001aee:	4b1e      	ldr	r3, [pc, #120]	; (8001b68 <HAL_RCC_GetSysClockFreq+0x108>)
 8001af0:	68db      	ldr	r3, [r3, #12]
 8001af2:	f003 0303 	and.w	r3, r3, #3
 8001af6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	2b02      	cmp	r3, #2
 8001afc:	d003      	beq.n	8001b06 <HAL_RCC_GetSysClockFreq+0xa6>
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	2b03      	cmp	r3, #3
 8001b02:	d003      	beq.n	8001b0c <HAL_RCC_GetSysClockFreq+0xac>
 8001b04:	e005      	b.n	8001b12 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001b06:	4b1a      	ldr	r3, [pc, #104]	; (8001b70 <HAL_RCC_GetSysClockFreq+0x110>)
 8001b08:	617b      	str	r3, [r7, #20]
      break;
 8001b0a:	e005      	b.n	8001b18 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001b0c:	4b19      	ldr	r3, [pc, #100]	; (8001b74 <HAL_RCC_GetSysClockFreq+0x114>)
 8001b0e:	617b      	str	r3, [r7, #20]
      break;
 8001b10:	e002      	b.n	8001b18 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	617b      	str	r3, [r7, #20]
      break;
 8001b16:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001b18:	4b13      	ldr	r3, [pc, #76]	; (8001b68 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	091b      	lsrs	r3, r3, #4
 8001b1e:	f003 0307 	and.w	r3, r3, #7
 8001b22:	3301      	adds	r3, #1
 8001b24:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001b26:	4b10      	ldr	r3, [pc, #64]	; (8001b68 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b28:	68db      	ldr	r3, [r3, #12]
 8001b2a:	0a1b      	lsrs	r3, r3, #8
 8001b2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001b30:	697a      	ldr	r2, [r7, #20]
 8001b32:	fb03 f202 	mul.w	r2, r3, r2
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b3c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001b3e:	4b0a      	ldr	r3, [pc, #40]	; (8001b68 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b40:	68db      	ldr	r3, [r3, #12]
 8001b42:	0e5b      	lsrs	r3, r3, #25
 8001b44:	f003 0303 	and.w	r3, r3, #3
 8001b48:	3301      	adds	r3, #1
 8001b4a:	005b      	lsls	r3, r3, #1
 8001b4c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001b4e:	697a      	ldr	r2, [r7, #20]
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b56:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001b58:	69bb      	ldr	r3, [r7, #24]
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3724      	adds	r7, #36	; 0x24
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	40021000 	.word	0x40021000
 8001b6c:	08005bfc 	.word	0x08005bfc
 8001b70:	00f42400 	.word	0x00f42400
 8001b74:	007a1200 	.word	0x007a1200

08001b78 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b7c:	4b03      	ldr	r3, [pc, #12]	; (8001b8c <HAL_RCC_GetHCLKFreq+0x14>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	20000000 	.word	0x20000000

08001b90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001b94:	f7ff fff0 	bl	8001b78 <HAL_RCC_GetHCLKFreq>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	4b06      	ldr	r3, [pc, #24]	; (8001bb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	0a1b      	lsrs	r3, r3, #8
 8001ba0:	f003 0307 	and.w	r3, r3, #7
 8001ba4:	4904      	ldr	r1, [pc, #16]	; (8001bb8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001ba6:	5ccb      	ldrb	r3, [r1, r3]
 8001ba8:	f003 031f 	and.w	r3, r3, #31
 8001bac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	40021000 	.word	0x40021000
 8001bb8:	08005bf4 	.word	0x08005bf4

08001bbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001bc0:	f7ff ffda 	bl	8001b78 <HAL_RCC_GetHCLKFreq>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	4b06      	ldr	r3, [pc, #24]	; (8001be0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	0adb      	lsrs	r3, r3, #11
 8001bcc:	f003 0307 	and.w	r3, r3, #7
 8001bd0:	4904      	ldr	r1, [pc, #16]	; (8001be4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001bd2:	5ccb      	ldrb	r3, [r1, r3]
 8001bd4:	f003 031f 	and.w	r3, r3, #31
 8001bd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	40021000 	.word	0x40021000
 8001be4:	08005bf4 	.word	0x08005bf4

08001be8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b086      	sub	sp, #24
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001bf4:	4b2a      	ldr	r3, [pc, #168]	; (8001ca0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001bf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d003      	beq.n	8001c08 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001c00:	f7ff f9ee 	bl	8000fe0 <HAL_PWREx_GetVoltageRange>
 8001c04:	6178      	str	r0, [r7, #20]
 8001c06:	e014      	b.n	8001c32 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001c08:	4b25      	ldr	r3, [pc, #148]	; (8001ca0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c0c:	4a24      	ldr	r2, [pc, #144]	; (8001ca0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c12:	6593      	str	r3, [r2, #88]	; 0x58
 8001c14:	4b22      	ldr	r3, [pc, #136]	; (8001ca0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c1c:	60fb      	str	r3, [r7, #12]
 8001c1e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001c20:	f7ff f9de 	bl	8000fe0 <HAL_PWREx_GetVoltageRange>
 8001c24:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001c26:	4b1e      	ldr	r3, [pc, #120]	; (8001ca0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c2a:	4a1d      	ldr	r2, [pc, #116]	; (8001ca0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c30:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c38:	d10b      	bne.n	8001c52 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2b80      	cmp	r3, #128	; 0x80
 8001c3e:	d919      	bls.n	8001c74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2ba0      	cmp	r3, #160	; 0xa0
 8001c44:	d902      	bls.n	8001c4c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001c46:	2302      	movs	r3, #2
 8001c48:	613b      	str	r3, [r7, #16]
 8001c4a:	e013      	b.n	8001c74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	613b      	str	r3, [r7, #16]
 8001c50:	e010      	b.n	8001c74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2b80      	cmp	r3, #128	; 0x80
 8001c56:	d902      	bls.n	8001c5e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001c58:	2303      	movs	r3, #3
 8001c5a:	613b      	str	r3, [r7, #16]
 8001c5c:	e00a      	b.n	8001c74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2b80      	cmp	r3, #128	; 0x80
 8001c62:	d102      	bne.n	8001c6a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001c64:	2302      	movs	r3, #2
 8001c66:	613b      	str	r3, [r7, #16]
 8001c68:	e004      	b.n	8001c74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2b70      	cmp	r3, #112	; 0x70
 8001c6e:	d101      	bne.n	8001c74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001c70:	2301      	movs	r3, #1
 8001c72:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001c74:	4b0b      	ldr	r3, [pc, #44]	; (8001ca4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f023 0207 	bic.w	r2, r3, #7
 8001c7c:	4909      	ldr	r1, [pc, #36]	; (8001ca4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001c84:	4b07      	ldr	r3, [pc, #28]	; (8001ca4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 0307 	and.w	r3, r3, #7
 8001c8c:	693a      	ldr	r2, [r7, #16]
 8001c8e:	429a      	cmp	r2, r3
 8001c90:	d001      	beq.n	8001c96 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e000      	b.n	8001c98 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001c96:	2300      	movs	r3, #0
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3718      	adds	r7, #24
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	40021000 	.word	0x40021000
 8001ca4:	40022000 	.word	0x40022000

08001ca8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b086      	sub	sp, #24
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d041      	beq.n	8001d48 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001cc8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001ccc:	d02a      	beq.n	8001d24 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001cce:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001cd2:	d824      	bhi.n	8001d1e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001cd4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001cd8:	d008      	beq.n	8001cec <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001cda:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001cde:	d81e      	bhi.n	8001d1e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d00a      	beq.n	8001cfa <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001ce4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ce8:	d010      	beq.n	8001d0c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001cea:	e018      	b.n	8001d1e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001cec:	4b86      	ldr	r3, [pc, #536]	; (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	4a85      	ldr	r2, [pc, #532]	; (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001cf2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cf6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001cf8:	e015      	b.n	8001d26 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	3304      	adds	r3, #4
 8001cfe:	2100      	movs	r1, #0
 8001d00:	4618      	mov	r0, r3
 8001d02:	f000 fabb 	bl	800227c <RCCEx_PLLSAI1_Config>
 8001d06:	4603      	mov	r3, r0
 8001d08:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001d0a:	e00c      	b.n	8001d26 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	3320      	adds	r3, #32
 8001d10:	2100      	movs	r1, #0
 8001d12:	4618      	mov	r0, r3
 8001d14:	f000 fba6 	bl	8002464 <RCCEx_PLLSAI2_Config>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001d1c:	e003      	b.n	8001d26 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	74fb      	strb	r3, [r7, #19]
      break;
 8001d22:	e000      	b.n	8001d26 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001d24:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001d26:	7cfb      	ldrb	r3, [r7, #19]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d10b      	bne.n	8001d44 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001d2c:	4b76      	ldr	r3, [pc, #472]	; (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d32:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001d3a:	4973      	ldr	r1, [pc, #460]	; (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001d42:	e001      	b.n	8001d48 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001d44:	7cfb      	ldrb	r3, [r7, #19]
 8001d46:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d041      	beq.n	8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001d58:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001d5c:	d02a      	beq.n	8001db4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001d5e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001d62:	d824      	bhi.n	8001dae <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001d64:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001d68:	d008      	beq.n	8001d7c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001d6a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001d6e:	d81e      	bhi.n	8001dae <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d00a      	beq.n	8001d8a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001d74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d78:	d010      	beq.n	8001d9c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001d7a:	e018      	b.n	8001dae <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001d7c:	4b62      	ldr	r3, [pc, #392]	; (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	4a61      	ldr	r2, [pc, #388]	; (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d86:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001d88:	e015      	b.n	8001db6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	3304      	adds	r3, #4
 8001d8e:	2100      	movs	r1, #0
 8001d90:	4618      	mov	r0, r3
 8001d92:	f000 fa73 	bl	800227c <RCCEx_PLLSAI1_Config>
 8001d96:	4603      	mov	r3, r0
 8001d98:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001d9a:	e00c      	b.n	8001db6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	3320      	adds	r3, #32
 8001da0:	2100      	movs	r1, #0
 8001da2:	4618      	mov	r0, r3
 8001da4:	f000 fb5e 	bl	8002464 <RCCEx_PLLSAI2_Config>
 8001da8:	4603      	mov	r3, r0
 8001daa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001dac:	e003      	b.n	8001db6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	74fb      	strb	r3, [r7, #19]
      break;
 8001db2:	e000      	b.n	8001db6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001db4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001db6:	7cfb      	ldrb	r3, [r7, #19]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d10b      	bne.n	8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001dbc:	4b52      	ldr	r3, [pc, #328]	; (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dc2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001dca:	494f      	ldr	r1, [pc, #316]	; (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001dd2:	e001      	b.n	8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001dd4:	7cfb      	ldrb	r3, [r7, #19]
 8001dd6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	f000 80a0 	beq.w	8001f26 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001de6:	2300      	movs	r3, #0
 8001de8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001dea:	4b47      	ldr	r3, [pc, #284]	; (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001dec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d101      	bne.n	8001dfa <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001df6:	2301      	movs	r3, #1
 8001df8:	e000      	b.n	8001dfc <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d00d      	beq.n	8001e1c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e00:	4b41      	ldr	r3, [pc, #260]	; (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e04:	4a40      	ldr	r2, [pc, #256]	; (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e0a:	6593      	str	r3, [r2, #88]	; 0x58
 8001e0c:	4b3e      	ldr	r3, [pc, #248]	; (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e14:	60bb      	str	r3, [r7, #8]
 8001e16:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e1c:	4b3b      	ldr	r3, [pc, #236]	; (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a3a      	ldr	r2, [pc, #232]	; (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001e22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e26:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001e28:	f7fe fdf4 	bl	8000a14 <HAL_GetTick>
 8001e2c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001e2e:	e009      	b.n	8001e44 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e30:	f7fe fdf0 	bl	8000a14 <HAL_GetTick>
 8001e34:	4602      	mov	r2, r0
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	2b02      	cmp	r3, #2
 8001e3c:	d902      	bls.n	8001e44 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	74fb      	strb	r3, [r7, #19]
        break;
 8001e42:	e005      	b.n	8001e50 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001e44:	4b31      	ldr	r3, [pc, #196]	; (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d0ef      	beq.n	8001e30 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8001e50:	7cfb      	ldrb	r3, [r7, #19]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d15c      	bne.n	8001f10 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001e56:	4b2c      	ldr	r3, [pc, #176]	; (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e60:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d01f      	beq.n	8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e6e:	697a      	ldr	r2, [r7, #20]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d019      	beq.n	8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001e74:	4b24      	ldr	r3, [pc, #144]	; (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e7e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001e80:	4b21      	ldr	r3, [pc, #132]	; (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e86:	4a20      	ldr	r2, [pc, #128]	; (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001e90:	4b1d      	ldr	r3, [pc, #116]	; (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e96:	4a1c      	ldr	r2, [pc, #112]	; (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001ea0:	4a19      	ldr	r2, [pc, #100]	; (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	f003 0301 	and.w	r3, r3, #1
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d016      	beq.n	8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eb2:	f7fe fdaf 	bl	8000a14 <HAL_GetTick>
 8001eb6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001eb8:	e00b      	b.n	8001ed2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eba:	f7fe fdab 	bl	8000a14 <HAL_GetTick>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d902      	bls.n	8001ed2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8001ecc:	2303      	movs	r3, #3
 8001ece:	74fb      	strb	r3, [r7, #19]
            break;
 8001ed0:	e006      	b.n	8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ed2:	4b0d      	ldr	r3, [pc, #52]	; (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ed4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ed8:	f003 0302 	and.w	r3, r3, #2
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d0ec      	beq.n	8001eba <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8001ee0:	7cfb      	ldrb	r3, [r7, #19]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d10c      	bne.n	8001f00 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ee6:	4b08      	ldr	r3, [pc, #32]	; (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ef6:	4904      	ldr	r1, [pc, #16]	; (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001efe:	e009      	b.n	8001f14 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001f00:	7cfb      	ldrb	r3, [r7, #19]
 8001f02:	74bb      	strb	r3, [r7, #18]
 8001f04:	e006      	b.n	8001f14 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8001f06:	bf00      	nop
 8001f08:	40021000 	.word	0x40021000
 8001f0c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f10:	7cfb      	ldrb	r3, [r7, #19]
 8001f12:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f14:	7c7b      	ldrb	r3, [r7, #17]
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d105      	bne.n	8001f26 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f1a:	4b9e      	ldr	r3, [pc, #632]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f1e:	4a9d      	ldr	r2, [pc, #628]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f24:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0301 	and.w	r3, r3, #1
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d00a      	beq.n	8001f48 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f32:	4b98      	ldr	r3, [pc, #608]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f38:	f023 0203 	bic.w	r2, r3, #3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f40:	4994      	ldr	r1, [pc, #592]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f42:	4313      	orrs	r3, r2
 8001f44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0302 	and.w	r3, r3, #2
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d00a      	beq.n	8001f6a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001f54:	4b8f      	ldr	r3, [pc, #572]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f5a:	f023 020c 	bic.w	r2, r3, #12
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f62:	498c      	ldr	r1, [pc, #560]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f64:	4313      	orrs	r3, r2
 8001f66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 0304 	and.w	r3, r3, #4
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d00a      	beq.n	8001f8c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001f76:	4b87      	ldr	r3, [pc, #540]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f7c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f84:	4983      	ldr	r1, [pc, #524]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f86:	4313      	orrs	r3, r2
 8001f88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 0308 	and.w	r3, r3, #8
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d00a      	beq.n	8001fae <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001f98:	4b7e      	ldr	r3, [pc, #504]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f9e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fa6:	497b      	ldr	r1, [pc, #492]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0310 	and.w	r3, r3, #16
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d00a      	beq.n	8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001fba:	4b76      	ldr	r3, [pc, #472]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fc0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fc8:	4972      	ldr	r1, [pc, #456]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 0320 	and.w	r3, r3, #32
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d00a      	beq.n	8001ff2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001fdc:	4b6d      	ldr	r3, [pc, #436]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fe2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fea:	496a      	ldr	r1, [pc, #424]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fec:	4313      	orrs	r3, r2
 8001fee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d00a      	beq.n	8002014 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001ffe:	4b65      	ldr	r3, [pc, #404]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002000:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002004:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800200c:	4961      	ldr	r1, [pc, #388]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800200e:	4313      	orrs	r3, r2
 8002010:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800201c:	2b00      	cmp	r3, #0
 800201e:	d00a      	beq.n	8002036 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002020:	4b5c      	ldr	r3, [pc, #368]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002022:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002026:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800202e:	4959      	ldr	r1, [pc, #356]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002030:	4313      	orrs	r3, r2
 8002032:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800203e:	2b00      	cmp	r3, #0
 8002040:	d00a      	beq.n	8002058 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002042:	4b54      	ldr	r3, [pc, #336]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002044:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002048:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002050:	4950      	ldr	r1, [pc, #320]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002052:	4313      	orrs	r3, r2
 8002054:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002060:	2b00      	cmp	r3, #0
 8002062:	d00a      	beq.n	800207a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002064:	4b4b      	ldr	r3, [pc, #300]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002066:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800206a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002072:	4948      	ldr	r1, [pc, #288]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002074:	4313      	orrs	r3, r2
 8002076:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002082:	2b00      	cmp	r3, #0
 8002084:	d00a      	beq.n	800209c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002086:	4b43      	ldr	r3, [pc, #268]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002088:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800208c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002094:	493f      	ldr	r1, [pc, #252]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002096:	4313      	orrs	r3, r2
 8002098:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d028      	beq.n	80020fa <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80020a8:	4b3a      	ldr	r3, [pc, #232]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020ae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80020b6:	4937      	ldr	r1, [pc, #220]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020b8:	4313      	orrs	r3, r2
 80020ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80020c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80020c6:	d106      	bne.n	80020d6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80020c8:	4b32      	ldr	r3, [pc, #200]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	4a31      	ldr	r2, [pc, #196]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80020d2:	60d3      	str	r3, [r2, #12]
 80020d4:	e011      	b.n	80020fa <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80020da:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80020de:	d10c      	bne.n	80020fa <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	3304      	adds	r3, #4
 80020e4:	2101      	movs	r1, #1
 80020e6:	4618      	mov	r0, r3
 80020e8:	f000 f8c8 	bl	800227c <RCCEx_PLLSAI1_Config>
 80020ec:	4603      	mov	r3, r0
 80020ee:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80020f0:	7cfb      	ldrb	r3, [r7, #19]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d001      	beq.n	80020fa <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80020f6:	7cfb      	ldrb	r3, [r7, #19]
 80020f8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d028      	beq.n	8002158 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002106:	4b23      	ldr	r3, [pc, #140]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002108:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800210c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002114:	491f      	ldr	r1, [pc, #124]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002116:	4313      	orrs	r3, r2
 8002118:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002120:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002124:	d106      	bne.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002126:	4b1b      	ldr	r3, [pc, #108]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002128:	68db      	ldr	r3, [r3, #12]
 800212a:	4a1a      	ldr	r2, [pc, #104]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800212c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002130:	60d3      	str	r3, [r2, #12]
 8002132:	e011      	b.n	8002158 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002138:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800213c:	d10c      	bne.n	8002158 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	3304      	adds	r3, #4
 8002142:	2101      	movs	r1, #1
 8002144:	4618      	mov	r0, r3
 8002146:	f000 f899 	bl	800227c <RCCEx_PLLSAI1_Config>
 800214a:	4603      	mov	r3, r0
 800214c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800214e:	7cfb      	ldrb	r3, [r7, #19]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d001      	beq.n	8002158 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002154:	7cfb      	ldrb	r3, [r7, #19]
 8002156:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002160:	2b00      	cmp	r3, #0
 8002162:	d02b      	beq.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002164:	4b0b      	ldr	r3, [pc, #44]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002166:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800216a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002172:	4908      	ldr	r1, [pc, #32]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002174:	4313      	orrs	r3, r2
 8002176:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800217e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002182:	d109      	bne.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002184:	4b03      	ldr	r3, [pc, #12]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	4a02      	ldr	r2, [pc, #8]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800218a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800218e:	60d3      	str	r3, [r2, #12]
 8002190:	e014      	b.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002192:	bf00      	nop
 8002194:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800219c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80021a0:	d10c      	bne.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	3304      	adds	r3, #4
 80021a6:	2101      	movs	r1, #1
 80021a8:	4618      	mov	r0, r3
 80021aa:	f000 f867 	bl	800227c <RCCEx_PLLSAI1_Config>
 80021ae:	4603      	mov	r3, r0
 80021b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80021b2:	7cfb      	ldrb	r3, [r7, #19]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d001      	beq.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80021b8:	7cfb      	ldrb	r3, [r7, #19]
 80021ba:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d02f      	beq.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80021c8:	4b2b      	ldr	r3, [pc, #172]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80021ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021ce:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80021d6:	4928      	ldr	r1, [pc, #160]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80021d8:	4313      	orrs	r3, r2
 80021da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80021e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80021e6:	d10d      	bne.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	3304      	adds	r3, #4
 80021ec:	2102      	movs	r1, #2
 80021ee:	4618      	mov	r0, r3
 80021f0:	f000 f844 	bl	800227c <RCCEx_PLLSAI1_Config>
 80021f4:	4603      	mov	r3, r0
 80021f6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80021f8:	7cfb      	ldrb	r3, [r7, #19]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d014      	beq.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80021fe:	7cfb      	ldrb	r3, [r7, #19]
 8002200:	74bb      	strb	r3, [r7, #18]
 8002202:	e011      	b.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002208:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800220c:	d10c      	bne.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	3320      	adds	r3, #32
 8002212:	2102      	movs	r1, #2
 8002214:	4618      	mov	r0, r3
 8002216:	f000 f925 	bl	8002464 <RCCEx_PLLSAI2_Config>
 800221a:	4603      	mov	r3, r0
 800221c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800221e:	7cfb      	ldrb	r3, [r7, #19]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d001      	beq.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002224:	7cfb      	ldrb	r3, [r7, #19]
 8002226:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002230:	2b00      	cmp	r3, #0
 8002232:	d00a      	beq.n	800224a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002234:	4b10      	ldr	r3, [pc, #64]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002236:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800223a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002242:	490d      	ldr	r1, [pc, #52]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002244:	4313      	orrs	r3, r2
 8002246:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d00b      	beq.n	800226e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002256:	4b08      	ldr	r3, [pc, #32]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002258:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800225c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002266:	4904      	ldr	r1, [pc, #16]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002268:	4313      	orrs	r3, r2
 800226a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800226e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002270:	4618      	mov	r0, r3
 8002272:	3718      	adds	r7, #24
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}
 8002278:	40021000 	.word	0x40021000

0800227c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b084      	sub	sp, #16
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
 8002284:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002286:	2300      	movs	r3, #0
 8002288:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800228a:	4b75      	ldr	r3, [pc, #468]	; (8002460 <RCCEx_PLLSAI1_Config+0x1e4>)
 800228c:	68db      	ldr	r3, [r3, #12]
 800228e:	f003 0303 	and.w	r3, r3, #3
 8002292:	2b00      	cmp	r3, #0
 8002294:	d018      	beq.n	80022c8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002296:	4b72      	ldr	r3, [pc, #456]	; (8002460 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002298:	68db      	ldr	r3, [r3, #12]
 800229a:	f003 0203 	and.w	r2, r3, #3
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	429a      	cmp	r2, r3
 80022a4:	d10d      	bne.n	80022c2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
       ||
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d009      	beq.n	80022c2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80022ae:	4b6c      	ldr	r3, [pc, #432]	; (8002460 <RCCEx_PLLSAI1_Config+0x1e4>)
 80022b0:	68db      	ldr	r3, [r3, #12]
 80022b2:	091b      	lsrs	r3, r3, #4
 80022b4:	f003 0307 	and.w	r3, r3, #7
 80022b8:	1c5a      	adds	r2, r3, #1
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	685b      	ldr	r3, [r3, #4]
       ||
 80022be:	429a      	cmp	r2, r3
 80022c0:	d047      	beq.n	8002352 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	73fb      	strb	r3, [r7, #15]
 80022c6:	e044      	b.n	8002352 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	2b03      	cmp	r3, #3
 80022ce:	d018      	beq.n	8002302 <RCCEx_PLLSAI1_Config+0x86>
 80022d0:	2b03      	cmp	r3, #3
 80022d2:	d825      	bhi.n	8002320 <RCCEx_PLLSAI1_Config+0xa4>
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d002      	beq.n	80022de <RCCEx_PLLSAI1_Config+0x62>
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d009      	beq.n	80022f0 <RCCEx_PLLSAI1_Config+0x74>
 80022dc:	e020      	b.n	8002320 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80022de:	4b60      	ldr	r3, [pc, #384]	; (8002460 <RCCEx_PLLSAI1_Config+0x1e4>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0302 	and.w	r3, r3, #2
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d11d      	bne.n	8002326 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022ee:	e01a      	b.n	8002326 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80022f0:	4b5b      	ldr	r3, [pc, #364]	; (8002460 <RCCEx_PLLSAI1_Config+0x1e4>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d116      	bne.n	800232a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002300:	e013      	b.n	800232a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002302:	4b57      	ldr	r3, [pc, #348]	; (8002460 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d10f      	bne.n	800232e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800230e:	4b54      	ldr	r3, [pc, #336]	; (8002460 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d109      	bne.n	800232e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800231e:	e006      	b.n	800232e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	73fb      	strb	r3, [r7, #15]
      break;
 8002324:	e004      	b.n	8002330 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002326:	bf00      	nop
 8002328:	e002      	b.n	8002330 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800232a:	bf00      	nop
 800232c:	e000      	b.n	8002330 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800232e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002330:	7bfb      	ldrb	r3, [r7, #15]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d10d      	bne.n	8002352 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002336:	4b4a      	ldr	r3, [pc, #296]	; (8002460 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002338:	68db      	ldr	r3, [r3, #12]
 800233a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6819      	ldr	r1, [r3, #0]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	3b01      	subs	r3, #1
 8002348:	011b      	lsls	r3, r3, #4
 800234a:	430b      	orrs	r3, r1
 800234c:	4944      	ldr	r1, [pc, #272]	; (8002460 <RCCEx_PLLSAI1_Config+0x1e4>)
 800234e:	4313      	orrs	r3, r2
 8002350:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002352:	7bfb      	ldrb	r3, [r7, #15]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d17d      	bne.n	8002454 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002358:	4b41      	ldr	r3, [pc, #260]	; (8002460 <RCCEx_PLLSAI1_Config+0x1e4>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a40      	ldr	r2, [pc, #256]	; (8002460 <RCCEx_PLLSAI1_Config+0x1e4>)
 800235e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002362:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002364:	f7fe fb56 	bl	8000a14 <HAL_GetTick>
 8002368:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800236a:	e009      	b.n	8002380 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800236c:	f7fe fb52 	bl	8000a14 <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	2b02      	cmp	r3, #2
 8002378:	d902      	bls.n	8002380 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800237a:	2303      	movs	r3, #3
 800237c:	73fb      	strb	r3, [r7, #15]
        break;
 800237e:	e005      	b.n	800238c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002380:	4b37      	ldr	r3, [pc, #220]	; (8002460 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002388:	2b00      	cmp	r3, #0
 800238a:	d1ef      	bne.n	800236c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800238c:	7bfb      	ldrb	r3, [r7, #15]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d160      	bne.n	8002454 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d111      	bne.n	80023bc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002398:	4b31      	ldr	r3, [pc, #196]	; (8002460 <RCCEx_PLLSAI1_Config+0x1e4>)
 800239a:	691b      	ldr	r3, [r3, #16]
 800239c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80023a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023a4:	687a      	ldr	r2, [r7, #4]
 80023a6:	6892      	ldr	r2, [r2, #8]
 80023a8:	0211      	lsls	r1, r2, #8
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	68d2      	ldr	r2, [r2, #12]
 80023ae:	0912      	lsrs	r2, r2, #4
 80023b0:	0452      	lsls	r2, r2, #17
 80023b2:	430a      	orrs	r2, r1
 80023b4:	492a      	ldr	r1, [pc, #168]	; (8002460 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023b6:	4313      	orrs	r3, r2
 80023b8:	610b      	str	r3, [r1, #16]
 80023ba:	e027      	b.n	800240c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d112      	bne.n	80023e8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80023c2:	4b27      	ldr	r3, [pc, #156]	; (8002460 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023c4:	691b      	ldr	r3, [r3, #16]
 80023c6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80023ca:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	6892      	ldr	r2, [r2, #8]
 80023d2:	0211      	lsls	r1, r2, #8
 80023d4:	687a      	ldr	r2, [r7, #4]
 80023d6:	6912      	ldr	r2, [r2, #16]
 80023d8:	0852      	lsrs	r2, r2, #1
 80023da:	3a01      	subs	r2, #1
 80023dc:	0552      	lsls	r2, r2, #21
 80023de:	430a      	orrs	r2, r1
 80023e0:	491f      	ldr	r1, [pc, #124]	; (8002460 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023e2:	4313      	orrs	r3, r2
 80023e4:	610b      	str	r3, [r1, #16]
 80023e6:	e011      	b.n	800240c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80023e8:	4b1d      	ldr	r3, [pc, #116]	; (8002460 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023ea:	691b      	ldr	r3, [r3, #16]
 80023ec:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80023f0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80023f4:	687a      	ldr	r2, [r7, #4]
 80023f6:	6892      	ldr	r2, [r2, #8]
 80023f8:	0211      	lsls	r1, r2, #8
 80023fa:	687a      	ldr	r2, [r7, #4]
 80023fc:	6952      	ldr	r2, [r2, #20]
 80023fe:	0852      	lsrs	r2, r2, #1
 8002400:	3a01      	subs	r2, #1
 8002402:	0652      	lsls	r2, r2, #25
 8002404:	430a      	orrs	r2, r1
 8002406:	4916      	ldr	r1, [pc, #88]	; (8002460 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002408:	4313      	orrs	r3, r2
 800240a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800240c:	4b14      	ldr	r3, [pc, #80]	; (8002460 <RCCEx_PLLSAI1_Config+0x1e4>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a13      	ldr	r2, [pc, #76]	; (8002460 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002412:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002416:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002418:	f7fe fafc 	bl	8000a14 <HAL_GetTick>
 800241c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800241e:	e009      	b.n	8002434 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002420:	f7fe faf8 	bl	8000a14 <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	2b02      	cmp	r3, #2
 800242c:	d902      	bls.n	8002434 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	73fb      	strb	r3, [r7, #15]
          break;
 8002432:	e005      	b.n	8002440 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002434:	4b0a      	ldr	r3, [pc, #40]	; (8002460 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800243c:	2b00      	cmp	r3, #0
 800243e:	d0ef      	beq.n	8002420 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002440:	7bfb      	ldrb	r3, [r7, #15]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d106      	bne.n	8002454 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002446:	4b06      	ldr	r3, [pc, #24]	; (8002460 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002448:	691a      	ldr	r2, [r3, #16]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	699b      	ldr	r3, [r3, #24]
 800244e:	4904      	ldr	r1, [pc, #16]	; (8002460 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002450:	4313      	orrs	r3, r2
 8002452:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002454:	7bfb      	ldrb	r3, [r7, #15]
}
 8002456:	4618      	mov	r0, r3
 8002458:	3710      	adds	r7, #16
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	40021000 	.word	0x40021000

08002464 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b084      	sub	sp, #16
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800246e:	2300      	movs	r3, #0
 8002470:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002472:	4b6a      	ldr	r3, [pc, #424]	; (800261c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002474:	68db      	ldr	r3, [r3, #12]
 8002476:	f003 0303 	and.w	r3, r3, #3
 800247a:	2b00      	cmp	r3, #0
 800247c:	d018      	beq.n	80024b0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800247e:	4b67      	ldr	r3, [pc, #412]	; (800261c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002480:	68db      	ldr	r3, [r3, #12]
 8002482:	f003 0203 	and.w	r2, r3, #3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	429a      	cmp	r2, r3
 800248c:	d10d      	bne.n	80024aa <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
       ||
 8002492:	2b00      	cmp	r3, #0
 8002494:	d009      	beq.n	80024aa <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002496:	4b61      	ldr	r3, [pc, #388]	; (800261c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002498:	68db      	ldr	r3, [r3, #12]
 800249a:	091b      	lsrs	r3, r3, #4
 800249c:	f003 0307 	and.w	r3, r3, #7
 80024a0:	1c5a      	adds	r2, r3, #1
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	685b      	ldr	r3, [r3, #4]
       ||
 80024a6:	429a      	cmp	r2, r3
 80024a8:	d047      	beq.n	800253a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	73fb      	strb	r3, [r7, #15]
 80024ae:	e044      	b.n	800253a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	2b03      	cmp	r3, #3
 80024b6:	d018      	beq.n	80024ea <RCCEx_PLLSAI2_Config+0x86>
 80024b8:	2b03      	cmp	r3, #3
 80024ba:	d825      	bhi.n	8002508 <RCCEx_PLLSAI2_Config+0xa4>
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d002      	beq.n	80024c6 <RCCEx_PLLSAI2_Config+0x62>
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d009      	beq.n	80024d8 <RCCEx_PLLSAI2_Config+0x74>
 80024c4:	e020      	b.n	8002508 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80024c6:	4b55      	ldr	r3, [pc, #340]	; (800261c <RCCEx_PLLSAI2_Config+0x1b8>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0302 	and.w	r3, r3, #2
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d11d      	bne.n	800250e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024d6:	e01a      	b.n	800250e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80024d8:	4b50      	ldr	r3, [pc, #320]	; (800261c <RCCEx_PLLSAI2_Config+0x1b8>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d116      	bne.n	8002512 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024e8:	e013      	b.n	8002512 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80024ea:	4b4c      	ldr	r3, [pc, #304]	; (800261c <RCCEx_PLLSAI2_Config+0x1b8>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d10f      	bne.n	8002516 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80024f6:	4b49      	ldr	r3, [pc, #292]	; (800261c <RCCEx_PLLSAI2_Config+0x1b8>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d109      	bne.n	8002516 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002506:	e006      	b.n	8002516 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	73fb      	strb	r3, [r7, #15]
      break;
 800250c:	e004      	b.n	8002518 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800250e:	bf00      	nop
 8002510:	e002      	b.n	8002518 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002512:	bf00      	nop
 8002514:	e000      	b.n	8002518 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002516:	bf00      	nop
    }

    if(status == HAL_OK)
 8002518:	7bfb      	ldrb	r3, [r7, #15]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d10d      	bne.n	800253a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800251e:	4b3f      	ldr	r3, [pc, #252]	; (800261c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002520:	68db      	ldr	r3, [r3, #12]
 8002522:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6819      	ldr	r1, [r3, #0]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	3b01      	subs	r3, #1
 8002530:	011b      	lsls	r3, r3, #4
 8002532:	430b      	orrs	r3, r1
 8002534:	4939      	ldr	r1, [pc, #228]	; (800261c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002536:	4313      	orrs	r3, r2
 8002538:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800253a:	7bfb      	ldrb	r3, [r7, #15]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d167      	bne.n	8002610 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002540:	4b36      	ldr	r3, [pc, #216]	; (800261c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a35      	ldr	r2, [pc, #212]	; (800261c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002546:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800254a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800254c:	f7fe fa62 	bl	8000a14 <HAL_GetTick>
 8002550:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002552:	e009      	b.n	8002568 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002554:	f7fe fa5e 	bl	8000a14 <HAL_GetTick>
 8002558:	4602      	mov	r2, r0
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	2b02      	cmp	r3, #2
 8002560:	d902      	bls.n	8002568 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002562:	2303      	movs	r3, #3
 8002564:	73fb      	strb	r3, [r7, #15]
        break;
 8002566:	e005      	b.n	8002574 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002568:	4b2c      	ldr	r3, [pc, #176]	; (800261c <RCCEx_PLLSAI2_Config+0x1b8>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002570:	2b00      	cmp	r3, #0
 8002572:	d1ef      	bne.n	8002554 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002574:	7bfb      	ldrb	r3, [r7, #15]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d14a      	bne.n	8002610 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d111      	bne.n	80025a4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002580:	4b26      	ldr	r3, [pc, #152]	; (800261c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002582:	695b      	ldr	r3, [r3, #20]
 8002584:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002588:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	6892      	ldr	r2, [r2, #8]
 8002590:	0211      	lsls	r1, r2, #8
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	68d2      	ldr	r2, [r2, #12]
 8002596:	0912      	lsrs	r2, r2, #4
 8002598:	0452      	lsls	r2, r2, #17
 800259a:	430a      	orrs	r2, r1
 800259c:	491f      	ldr	r1, [pc, #124]	; (800261c <RCCEx_PLLSAI2_Config+0x1b8>)
 800259e:	4313      	orrs	r3, r2
 80025a0:	614b      	str	r3, [r1, #20]
 80025a2:	e011      	b.n	80025c8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80025a4:	4b1d      	ldr	r3, [pc, #116]	; (800261c <RCCEx_PLLSAI2_Config+0x1b8>)
 80025a6:	695b      	ldr	r3, [r3, #20]
 80025a8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80025ac:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80025b0:	687a      	ldr	r2, [r7, #4]
 80025b2:	6892      	ldr	r2, [r2, #8]
 80025b4:	0211      	lsls	r1, r2, #8
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	6912      	ldr	r2, [r2, #16]
 80025ba:	0852      	lsrs	r2, r2, #1
 80025bc:	3a01      	subs	r2, #1
 80025be:	0652      	lsls	r2, r2, #25
 80025c0:	430a      	orrs	r2, r1
 80025c2:	4916      	ldr	r1, [pc, #88]	; (800261c <RCCEx_PLLSAI2_Config+0x1b8>)
 80025c4:	4313      	orrs	r3, r2
 80025c6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80025c8:	4b14      	ldr	r3, [pc, #80]	; (800261c <RCCEx_PLLSAI2_Config+0x1b8>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a13      	ldr	r2, [pc, #76]	; (800261c <RCCEx_PLLSAI2_Config+0x1b8>)
 80025ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025d2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025d4:	f7fe fa1e 	bl	8000a14 <HAL_GetTick>
 80025d8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80025da:	e009      	b.n	80025f0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80025dc:	f7fe fa1a 	bl	8000a14 <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	d902      	bls.n	80025f0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80025ea:	2303      	movs	r3, #3
 80025ec:	73fb      	strb	r3, [r7, #15]
          break;
 80025ee:	e005      	b.n	80025fc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80025f0:	4b0a      	ldr	r3, [pc, #40]	; (800261c <RCCEx_PLLSAI2_Config+0x1b8>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d0ef      	beq.n	80025dc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80025fc:	7bfb      	ldrb	r3, [r7, #15]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d106      	bne.n	8002610 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002602:	4b06      	ldr	r3, [pc, #24]	; (800261c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002604:	695a      	ldr	r2, [r3, #20]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	695b      	ldr	r3, [r3, #20]
 800260a:	4904      	ldr	r1, [pc, #16]	; (800261c <RCCEx_PLLSAI2_Config+0x1b8>)
 800260c:	4313      	orrs	r3, r2
 800260e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002610:	7bfb      	ldrb	r3, [r7, #15]
}
 8002612:	4618      	mov	r0, r3
 8002614:	3710      	adds	r7, #16
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	40021000 	.word	0x40021000

08002620 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b082      	sub	sp, #8
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d101      	bne.n	8002632 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e040      	b.n	80026b4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002636:	2b00      	cmp	r3, #0
 8002638:	d106      	bne.n	8002648 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2200      	movs	r2, #0
 800263e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f7fe f8dc 	bl	8000800 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2224      	movs	r2, #36	; 0x24
 800264c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f022 0201 	bic.w	r2, r2, #1
 800265c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002662:	2b00      	cmp	r3, #0
 8002664:	d002      	beq.n	800266c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f000 fae0 	bl	8002c2c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	f000 f825 	bl	80026bc <UART_SetConfig>
 8002672:	4603      	mov	r3, r0
 8002674:	2b01      	cmp	r3, #1
 8002676:	d101      	bne.n	800267c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e01b      	b.n	80026b4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	685a      	ldr	r2, [r3, #4]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800268a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	689a      	ldr	r2, [r3, #8]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800269a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f042 0201 	orr.w	r2, r2, #1
 80026aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	f000 fb5f 	bl	8002d70 <UART_CheckIdleState>
 80026b2:	4603      	mov	r3, r0
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3708      	adds	r7, #8
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}

080026bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80026bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026c0:	b08a      	sub	sp, #40	; 0x28
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80026c6:	2300      	movs	r3, #0
 80026c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	689a      	ldr	r2, [r3, #8]
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	691b      	ldr	r3, [r3, #16]
 80026d4:	431a      	orrs	r2, r3
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	695b      	ldr	r3, [r3, #20]
 80026da:	431a      	orrs	r2, r3
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	69db      	ldr	r3, [r3, #28]
 80026e0:	4313      	orrs	r3, r2
 80026e2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	4ba4      	ldr	r3, [pc, #656]	; (800297c <UART_SetConfig+0x2c0>)
 80026ec:	4013      	ands	r3, r2
 80026ee:	68fa      	ldr	r2, [r7, #12]
 80026f0:	6812      	ldr	r2, [r2, #0]
 80026f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026f4:	430b      	orrs	r3, r1
 80026f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	68da      	ldr	r2, [r3, #12]
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	430a      	orrs	r2, r1
 800270c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	699b      	ldr	r3, [r3, #24]
 8002712:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a99      	ldr	r2, [pc, #612]	; (8002980 <UART_SetConfig+0x2c4>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d004      	beq.n	8002728 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	6a1b      	ldr	r3, [r3, #32]
 8002722:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002724:	4313      	orrs	r3, r2
 8002726:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002738:	430a      	orrs	r2, r1
 800273a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a90      	ldr	r2, [pc, #576]	; (8002984 <UART_SetConfig+0x2c8>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d126      	bne.n	8002794 <UART_SetConfig+0xd8>
 8002746:	4b90      	ldr	r3, [pc, #576]	; (8002988 <UART_SetConfig+0x2cc>)
 8002748:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800274c:	f003 0303 	and.w	r3, r3, #3
 8002750:	2b03      	cmp	r3, #3
 8002752:	d81b      	bhi.n	800278c <UART_SetConfig+0xd0>
 8002754:	a201      	add	r2, pc, #4	; (adr r2, 800275c <UART_SetConfig+0xa0>)
 8002756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800275a:	bf00      	nop
 800275c:	0800276d 	.word	0x0800276d
 8002760:	0800277d 	.word	0x0800277d
 8002764:	08002775 	.word	0x08002775
 8002768:	08002785 	.word	0x08002785
 800276c:	2301      	movs	r3, #1
 800276e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002772:	e116      	b.n	80029a2 <UART_SetConfig+0x2e6>
 8002774:	2302      	movs	r3, #2
 8002776:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800277a:	e112      	b.n	80029a2 <UART_SetConfig+0x2e6>
 800277c:	2304      	movs	r3, #4
 800277e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002782:	e10e      	b.n	80029a2 <UART_SetConfig+0x2e6>
 8002784:	2308      	movs	r3, #8
 8002786:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800278a:	e10a      	b.n	80029a2 <UART_SetConfig+0x2e6>
 800278c:	2310      	movs	r3, #16
 800278e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002792:	e106      	b.n	80029a2 <UART_SetConfig+0x2e6>
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a7c      	ldr	r2, [pc, #496]	; (800298c <UART_SetConfig+0x2d0>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d138      	bne.n	8002810 <UART_SetConfig+0x154>
 800279e:	4b7a      	ldr	r3, [pc, #488]	; (8002988 <UART_SetConfig+0x2cc>)
 80027a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027a4:	f003 030c 	and.w	r3, r3, #12
 80027a8:	2b0c      	cmp	r3, #12
 80027aa:	d82d      	bhi.n	8002808 <UART_SetConfig+0x14c>
 80027ac:	a201      	add	r2, pc, #4	; (adr r2, 80027b4 <UART_SetConfig+0xf8>)
 80027ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027b2:	bf00      	nop
 80027b4:	080027e9 	.word	0x080027e9
 80027b8:	08002809 	.word	0x08002809
 80027bc:	08002809 	.word	0x08002809
 80027c0:	08002809 	.word	0x08002809
 80027c4:	080027f9 	.word	0x080027f9
 80027c8:	08002809 	.word	0x08002809
 80027cc:	08002809 	.word	0x08002809
 80027d0:	08002809 	.word	0x08002809
 80027d4:	080027f1 	.word	0x080027f1
 80027d8:	08002809 	.word	0x08002809
 80027dc:	08002809 	.word	0x08002809
 80027e0:	08002809 	.word	0x08002809
 80027e4:	08002801 	.word	0x08002801
 80027e8:	2300      	movs	r3, #0
 80027ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80027ee:	e0d8      	b.n	80029a2 <UART_SetConfig+0x2e6>
 80027f0:	2302      	movs	r3, #2
 80027f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80027f6:	e0d4      	b.n	80029a2 <UART_SetConfig+0x2e6>
 80027f8:	2304      	movs	r3, #4
 80027fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80027fe:	e0d0      	b.n	80029a2 <UART_SetConfig+0x2e6>
 8002800:	2308      	movs	r3, #8
 8002802:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002806:	e0cc      	b.n	80029a2 <UART_SetConfig+0x2e6>
 8002808:	2310      	movs	r3, #16
 800280a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800280e:	e0c8      	b.n	80029a2 <UART_SetConfig+0x2e6>
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a5e      	ldr	r2, [pc, #376]	; (8002990 <UART_SetConfig+0x2d4>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d125      	bne.n	8002866 <UART_SetConfig+0x1aa>
 800281a:	4b5b      	ldr	r3, [pc, #364]	; (8002988 <UART_SetConfig+0x2cc>)
 800281c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002820:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002824:	2b30      	cmp	r3, #48	; 0x30
 8002826:	d016      	beq.n	8002856 <UART_SetConfig+0x19a>
 8002828:	2b30      	cmp	r3, #48	; 0x30
 800282a:	d818      	bhi.n	800285e <UART_SetConfig+0x1a2>
 800282c:	2b20      	cmp	r3, #32
 800282e:	d00a      	beq.n	8002846 <UART_SetConfig+0x18a>
 8002830:	2b20      	cmp	r3, #32
 8002832:	d814      	bhi.n	800285e <UART_SetConfig+0x1a2>
 8002834:	2b00      	cmp	r3, #0
 8002836:	d002      	beq.n	800283e <UART_SetConfig+0x182>
 8002838:	2b10      	cmp	r3, #16
 800283a:	d008      	beq.n	800284e <UART_SetConfig+0x192>
 800283c:	e00f      	b.n	800285e <UART_SetConfig+0x1a2>
 800283e:	2300      	movs	r3, #0
 8002840:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002844:	e0ad      	b.n	80029a2 <UART_SetConfig+0x2e6>
 8002846:	2302      	movs	r3, #2
 8002848:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800284c:	e0a9      	b.n	80029a2 <UART_SetConfig+0x2e6>
 800284e:	2304      	movs	r3, #4
 8002850:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002854:	e0a5      	b.n	80029a2 <UART_SetConfig+0x2e6>
 8002856:	2308      	movs	r3, #8
 8002858:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800285c:	e0a1      	b.n	80029a2 <UART_SetConfig+0x2e6>
 800285e:	2310      	movs	r3, #16
 8002860:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002864:	e09d      	b.n	80029a2 <UART_SetConfig+0x2e6>
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a4a      	ldr	r2, [pc, #296]	; (8002994 <UART_SetConfig+0x2d8>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d125      	bne.n	80028bc <UART_SetConfig+0x200>
 8002870:	4b45      	ldr	r3, [pc, #276]	; (8002988 <UART_SetConfig+0x2cc>)
 8002872:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002876:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800287a:	2bc0      	cmp	r3, #192	; 0xc0
 800287c:	d016      	beq.n	80028ac <UART_SetConfig+0x1f0>
 800287e:	2bc0      	cmp	r3, #192	; 0xc0
 8002880:	d818      	bhi.n	80028b4 <UART_SetConfig+0x1f8>
 8002882:	2b80      	cmp	r3, #128	; 0x80
 8002884:	d00a      	beq.n	800289c <UART_SetConfig+0x1e0>
 8002886:	2b80      	cmp	r3, #128	; 0x80
 8002888:	d814      	bhi.n	80028b4 <UART_SetConfig+0x1f8>
 800288a:	2b00      	cmp	r3, #0
 800288c:	d002      	beq.n	8002894 <UART_SetConfig+0x1d8>
 800288e:	2b40      	cmp	r3, #64	; 0x40
 8002890:	d008      	beq.n	80028a4 <UART_SetConfig+0x1e8>
 8002892:	e00f      	b.n	80028b4 <UART_SetConfig+0x1f8>
 8002894:	2300      	movs	r3, #0
 8002896:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800289a:	e082      	b.n	80029a2 <UART_SetConfig+0x2e6>
 800289c:	2302      	movs	r3, #2
 800289e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80028a2:	e07e      	b.n	80029a2 <UART_SetConfig+0x2e6>
 80028a4:	2304      	movs	r3, #4
 80028a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80028aa:	e07a      	b.n	80029a2 <UART_SetConfig+0x2e6>
 80028ac:	2308      	movs	r3, #8
 80028ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80028b2:	e076      	b.n	80029a2 <UART_SetConfig+0x2e6>
 80028b4:	2310      	movs	r3, #16
 80028b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80028ba:	e072      	b.n	80029a2 <UART_SetConfig+0x2e6>
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a35      	ldr	r2, [pc, #212]	; (8002998 <UART_SetConfig+0x2dc>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d12a      	bne.n	800291c <UART_SetConfig+0x260>
 80028c6:	4b30      	ldr	r3, [pc, #192]	; (8002988 <UART_SetConfig+0x2cc>)
 80028c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80028d4:	d01a      	beq.n	800290c <UART_SetConfig+0x250>
 80028d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80028da:	d81b      	bhi.n	8002914 <UART_SetConfig+0x258>
 80028dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028e0:	d00c      	beq.n	80028fc <UART_SetConfig+0x240>
 80028e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028e6:	d815      	bhi.n	8002914 <UART_SetConfig+0x258>
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d003      	beq.n	80028f4 <UART_SetConfig+0x238>
 80028ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028f0:	d008      	beq.n	8002904 <UART_SetConfig+0x248>
 80028f2:	e00f      	b.n	8002914 <UART_SetConfig+0x258>
 80028f4:	2300      	movs	r3, #0
 80028f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80028fa:	e052      	b.n	80029a2 <UART_SetConfig+0x2e6>
 80028fc:	2302      	movs	r3, #2
 80028fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002902:	e04e      	b.n	80029a2 <UART_SetConfig+0x2e6>
 8002904:	2304      	movs	r3, #4
 8002906:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800290a:	e04a      	b.n	80029a2 <UART_SetConfig+0x2e6>
 800290c:	2308      	movs	r3, #8
 800290e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002912:	e046      	b.n	80029a2 <UART_SetConfig+0x2e6>
 8002914:	2310      	movs	r3, #16
 8002916:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800291a:	e042      	b.n	80029a2 <UART_SetConfig+0x2e6>
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a17      	ldr	r2, [pc, #92]	; (8002980 <UART_SetConfig+0x2c4>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d13a      	bne.n	800299c <UART_SetConfig+0x2e0>
 8002926:	4b18      	ldr	r3, [pc, #96]	; (8002988 <UART_SetConfig+0x2cc>)
 8002928:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800292c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002930:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002934:	d01a      	beq.n	800296c <UART_SetConfig+0x2b0>
 8002936:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800293a:	d81b      	bhi.n	8002974 <UART_SetConfig+0x2b8>
 800293c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002940:	d00c      	beq.n	800295c <UART_SetConfig+0x2a0>
 8002942:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002946:	d815      	bhi.n	8002974 <UART_SetConfig+0x2b8>
 8002948:	2b00      	cmp	r3, #0
 800294a:	d003      	beq.n	8002954 <UART_SetConfig+0x298>
 800294c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002950:	d008      	beq.n	8002964 <UART_SetConfig+0x2a8>
 8002952:	e00f      	b.n	8002974 <UART_SetConfig+0x2b8>
 8002954:	2300      	movs	r3, #0
 8002956:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800295a:	e022      	b.n	80029a2 <UART_SetConfig+0x2e6>
 800295c:	2302      	movs	r3, #2
 800295e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002962:	e01e      	b.n	80029a2 <UART_SetConfig+0x2e6>
 8002964:	2304      	movs	r3, #4
 8002966:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800296a:	e01a      	b.n	80029a2 <UART_SetConfig+0x2e6>
 800296c:	2308      	movs	r3, #8
 800296e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002972:	e016      	b.n	80029a2 <UART_SetConfig+0x2e6>
 8002974:	2310      	movs	r3, #16
 8002976:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800297a:	e012      	b.n	80029a2 <UART_SetConfig+0x2e6>
 800297c:	efff69f3 	.word	0xefff69f3
 8002980:	40008000 	.word	0x40008000
 8002984:	40013800 	.word	0x40013800
 8002988:	40021000 	.word	0x40021000
 800298c:	40004400 	.word	0x40004400
 8002990:	40004800 	.word	0x40004800
 8002994:	40004c00 	.word	0x40004c00
 8002998:	40005000 	.word	0x40005000
 800299c:	2310      	movs	r3, #16
 800299e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a9f      	ldr	r2, [pc, #636]	; (8002c24 <UART_SetConfig+0x568>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d17a      	bne.n	8002aa2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80029ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80029b0:	2b08      	cmp	r3, #8
 80029b2:	d824      	bhi.n	80029fe <UART_SetConfig+0x342>
 80029b4:	a201      	add	r2, pc, #4	; (adr r2, 80029bc <UART_SetConfig+0x300>)
 80029b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029ba:	bf00      	nop
 80029bc:	080029e1 	.word	0x080029e1
 80029c0:	080029ff 	.word	0x080029ff
 80029c4:	080029e9 	.word	0x080029e9
 80029c8:	080029ff 	.word	0x080029ff
 80029cc:	080029ef 	.word	0x080029ef
 80029d0:	080029ff 	.word	0x080029ff
 80029d4:	080029ff 	.word	0x080029ff
 80029d8:	080029ff 	.word	0x080029ff
 80029dc:	080029f7 	.word	0x080029f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80029e0:	f7ff f8d6 	bl	8001b90 <HAL_RCC_GetPCLK1Freq>
 80029e4:	61f8      	str	r0, [r7, #28]
        break;
 80029e6:	e010      	b.n	8002a0a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80029e8:	4b8f      	ldr	r3, [pc, #572]	; (8002c28 <UART_SetConfig+0x56c>)
 80029ea:	61fb      	str	r3, [r7, #28]
        break;
 80029ec:	e00d      	b.n	8002a0a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80029ee:	f7ff f837 	bl	8001a60 <HAL_RCC_GetSysClockFreq>
 80029f2:	61f8      	str	r0, [r7, #28]
        break;
 80029f4:	e009      	b.n	8002a0a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80029f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029fa:	61fb      	str	r3, [r7, #28]
        break;
 80029fc:	e005      	b.n	8002a0a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80029fe:	2300      	movs	r3, #0
 8002a00:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002a08:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	f000 80fb 	beq.w	8002c08 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	685a      	ldr	r2, [r3, #4]
 8002a16:	4613      	mov	r3, r2
 8002a18:	005b      	lsls	r3, r3, #1
 8002a1a:	4413      	add	r3, r2
 8002a1c:	69fa      	ldr	r2, [r7, #28]
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d305      	bcc.n	8002a2e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002a28:	69fa      	ldr	r2, [r7, #28]
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	d903      	bls.n	8002a36 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002a34:	e0e8      	b.n	8002c08 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	461c      	mov	r4, r3
 8002a3c:	4615      	mov	r5, r2
 8002a3e:	f04f 0200 	mov.w	r2, #0
 8002a42:	f04f 0300 	mov.w	r3, #0
 8002a46:	022b      	lsls	r3, r5, #8
 8002a48:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002a4c:	0222      	lsls	r2, r4, #8
 8002a4e:	68f9      	ldr	r1, [r7, #12]
 8002a50:	6849      	ldr	r1, [r1, #4]
 8002a52:	0849      	lsrs	r1, r1, #1
 8002a54:	2000      	movs	r0, #0
 8002a56:	4688      	mov	r8, r1
 8002a58:	4681      	mov	r9, r0
 8002a5a:	eb12 0a08 	adds.w	sl, r2, r8
 8002a5e:	eb43 0b09 	adc.w	fp, r3, r9
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	2200      	movs	r2, #0
 8002a68:	603b      	str	r3, [r7, #0]
 8002a6a:	607a      	str	r2, [r7, #4]
 8002a6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002a70:	4650      	mov	r0, sl
 8002a72:	4659      	mov	r1, fp
 8002a74:	f7fd fbac 	bl	80001d0 <__aeabi_uldivmod>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	460b      	mov	r3, r1
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002a80:	69bb      	ldr	r3, [r7, #24]
 8002a82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a86:	d308      	bcc.n	8002a9a <UART_SetConfig+0x3de>
 8002a88:	69bb      	ldr	r3, [r7, #24]
 8002a8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a8e:	d204      	bcs.n	8002a9a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	69ba      	ldr	r2, [r7, #24]
 8002a96:	60da      	str	r2, [r3, #12]
 8002a98:	e0b6      	b.n	8002c08 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002aa0:	e0b2      	b.n	8002c08 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	69db      	ldr	r3, [r3, #28]
 8002aa6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002aaa:	d15e      	bne.n	8002b6a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8002aac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002ab0:	2b08      	cmp	r3, #8
 8002ab2:	d828      	bhi.n	8002b06 <UART_SetConfig+0x44a>
 8002ab4:	a201      	add	r2, pc, #4	; (adr r2, 8002abc <UART_SetConfig+0x400>)
 8002ab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aba:	bf00      	nop
 8002abc:	08002ae1 	.word	0x08002ae1
 8002ac0:	08002ae9 	.word	0x08002ae9
 8002ac4:	08002af1 	.word	0x08002af1
 8002ac8:	08002b07 	.word	0x08002b07
 8002acc:	08002af7 	.word	0x08002af7
 8002ad0:	08002b07 	.word	0x08002b07
 8002ad4:	08002b07 	.word	0x08002b07
 8002ad8:	08002b07 	.word	0x08002b07
 8002adc:	08002aff 	.word	0x08002aff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ae0:	f7ff f856 	bl	8001b90 <HAL_RCC_GetPCLK1Freq>
 8002ae4:	61f8      	str	r0, [r7, #28]
        break;
 8002ae6:	e014      	b.n	8002b12 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002ae8:	f7ff f868 	bl	8001bbc <HAL_RCC_GetPCLK2Freq>
 8002aec:	61f8      	str	r0, [r7, #28]
        break;
 8002aee:	e010      	b.n	8002b12 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002af0:	4b4d      	ldr	r3, [pc, #308]	; (8002c28 <UART_SetConfig+0x56c>)
 8002af2:	61fb      	str	r3, [r7, #28]
        break;
 8002af4:	e00d      	b.n	8002b12 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002af6:	f7fe ffb3 	bl	8001a60 <HAL_RCC_GetSysClockFreq>
 8002afa:	61f8      	str	r0, [r7, #28]
        break;
 8002afc:	e009      	b.n	8002b12 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002afe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b02:	61fb      	str	r3, [r7, #28]
        break;
 8002b04:	e005      	b.n	8002b12 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8002b06:	2300      	movs	r3, #0
 8002b08:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002b10:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d077      	beq.n	8002c08 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	005a      	lsls	r2, r3, #1
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	085b      	lsrs	r3, r3, #1
 8002b22:	441a      	add	r2, r3
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b2c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002b2e:	69bb      	ldr	r3, [r7, #24]
 8002b30:	2b0f      	cmp	r3, #15
 8002b32:	d916      	bls.n	8002b62 <UART_SetConfig+0x4a6>
 8002b34:	69bb      	ldr	r3, [r7, #24]
 8002b36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b3a:	d212      	bcs.n	8002b62 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002b3c:	69bb      	ldr	r3, [r7, #24]
 8002b3e:	b29b      	uxth	r3, r3
 8002b40:	f023 030f 	bic.w	r3, r3, #15
 8002b44:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002b46:	69bb      	ldr	r3, [r7, #24]
 8002b48:	085b      	lsrs	r3, r3, #1
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	f003 0307 	and.w	r3, r3, #7
 8002b50:	b29a      	uxth	r2, r3
 8002b52:	8afb      	ldrh	r3, [r7, #22]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	8afa      	ldrh	r2, [r7, #22]
 8002b5e:	60da      	str	r2, [r3, #12]
 8002b60:	e052      	b.n	8002c08 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002b68:	e04e      	b.n	8002c08 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002b6a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002b6e:	2b08      	cmp	r3, #8
 8002b70:	d827      	bhi.n	8002bc2 <UART_SetConfig+0x506>
 8002b72:	a201      	add	r2, pc, #4	; (adr r2, 8002b78 <UART_SetConfig+0x4bc>)
 8002b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b78:	08002b9d 	.word	0x08002b9d
 8002b7c:	08002ba5 	.word	0x08002ba5
 8002b80:	08002bad 	.word	0x08002bad
 8002b84:	08002bc3 	.word	0x08002bc3
 8002b88:	08002bb3 	.word	0x08002bb3
 8002b8c:	08002bc3 	.word	0x08002bc3
 8002b90:	08002bc3 	.word	0x08002bc3
 8002b94:	08002bc3 	.word	0x08002bc3
 8002b98:	08002bbb 	.word	0x08002bbb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b9c:	f7fe fff8 	bl	8001b90 <HAL_RCC_GetPCLK1Freq>
 8002ba0:	61f8      	str	r0, [r7, #28]
        break;
 8002ba2:	e014      	b.n	8002bce <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002ba4:	f7ff f80a 	bl	8001bbc <HAL_RCC_GetPCLK2Freq>
 8002ba8:	61f8      	str	r0, [r7, #28]
        break;
 8002baa:	e010      	b.n	8002bce <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002bac:	4b1e      	ldr	r3, [pc, #120]	; (8002c28 <UART_SetConfig+0x56c>)
 8002bae:	61fb      	str	r3, [r7, #28]
        break;
 8002bb0:	e00d      	b.n	8002bce <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002bb2:	f7fe ff55 	bl	8001a60 <HAL_RCC_GetSysClockFreq>
 8002bb6:	61f8      	str	r0, [r7, #28]
        break;
 8002bb8:	e009      	b.n	8002bce <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002bba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002bbe:	61fb      	str	r3, [r7, #28]
        break;
 8002bc0:	e005      	b.n	8002bce <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002bcc:	bf00      	nop
    }

    if (pclk != 0U)
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d019      	beq.n	8002c08 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	085a      	lsrs	r2, r3, #1
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	441a      	add	r2, r3
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002be6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002be8:	69bb      	ldr	r3, [r7, #24]
 8002bea:	2b0f      	cmp	r3, #15
 8002bec:	d909      	bls.n	8002c02 <UART_SetConfig+0x546>
 8002bee:	69bb      	ldr	r3, [r7, #24]
 8002bf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bf4:	d205      	bcs.n	8002c02 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002bf6:	69bb      	ldr	r3, [r7, #24]
 8002bf8:	b29a      	uxth	r2, r3
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	60da      	str	r2, [r3, #12]
 8002c00:	e002      	b.n	8002c08 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2200      	movs	r2, #0
 8002c12:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002c14:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3728      	adds	r7, #40	; 0x28
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c22:	bf00      	nop
 8002c24:	40008000 	.word	0x40008000
 8002c28:	00f42400 	.word	0x00f42400

08002c2c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b083      	sub	sp, #12
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c38:	f003 0308 	and.w	r3, r3, #8
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d00a      	beq.n	8002c56 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	430a      	orrs	r2, r1
 8002c54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5a:	f003 0301 	and.w	r3, r3, #1
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d00a      	beq.n	8002c78 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	430a      	orrs	r2, r1
 8002c76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7c:	f003 0302 	and.w	r3, r3, #2
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d00a      	beq.n	8002c9a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	430a      	orrs	r2, r1
 8002c98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9e:	f003 0304 	and.w	r3, r3, #4
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d00a      	beq.n	8002cbc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	430a      	orrs	r2, r1
 8002cba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc0:	f003 0310 	and.w	r3, r3, #16
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d00a      	beq.n	8002cde <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	430a      	orrs	r2, r1
 8002cdc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce2:	f003 0320 	and.w	r3, r3, #32
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d00a      	beq.n	8002d00 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	430a      	orrs	r2, r1
 8002cfe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d01a      	beq.n	8002d42 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	430a      	orrs	r2, r1
 8002d20:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d2a:	d10a      	bne.n	8002d42 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	430a      	orrs	r2, r1
 8002d40:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d00a      	beq.n	8002d64 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	430a      	orrs	r2, r1
 8002d62:	605a      	str	r2, [r3, #4]
  }
}
 8002d64:	bf00      	nop
 8002d66:	370c      	adds	r7, #12
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr

08002d70 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b098      	sub	sp, #96	; 0x60
 8002d74:	af02      	add	r7, sp, #8
 8002d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002d80:	f7fd fe48 	bl	8000a14 <HAL_GetTick>
 8002d84:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0308 	and.w	r3, r3, #8
 8002d90:	2b08      	cmp	r3, #8
 8002d92:	d12e      	bne.n	8002df2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d94:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002d98:	9300      	str	r3, [sp, #0]
 8002d9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f000 f88c 	bl	8002ec0 <UART_WaitOnFlagUntilTimeout>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d021      	beq.n	8002df2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002db6:	e853 3f00 	ldrex	r3, [r3]
 8002dba:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002dbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dbe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002dc2:	653b      	str	r3, [r7, #80]	; 0x50
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	461a      	mov	r2, r3
 8002dca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002dcc:	647b      	str	r3, [r7, #68]	; 0x44
 8002dce:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dd0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002dd2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002dd4:	e841 2300 	strex	r3, r2, [r1]
 8002dd8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002dda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d1e6      	bne.n	8002dae <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2220      	movs	r2, #32
 8002de4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2200      	movs	r2, #0
 8002dea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	e062      	b.n	8002eb8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 0304 	and.w	r3, r3, #4
 8002dfc:	2b04      	cmp	r3, #4
 8002dfe:	d149      	bne.n	8002e94 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e00:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002e04:	9300      	str	r3, [sp, #0]
 8002e06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e08:	2200      	movs	r2, #0
 8002e0a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f000 f856 	bl	8002ec0 <UART_WaitOnFlagUntilTimeout>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d03c      	beq.n	8002e94 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e22:	e853 3f00 	ldrex	r3, [r3]
 8002e26:	623b      	str	r3, [r7, #32]
   return(result);
 8002e28:	6a3b      	ldr	r3, [r7, #32]
 8002e2a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002e2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	461a      	mov	r2, r3
 8002e36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e38:	633b      	str	r3, [r7, #48]	; 0x30
 8002e3a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e3c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002e3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e40:	e841 2300 	strex	r3, r2, [r1]
 8002e44:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d1e6      	bne.n	8002e1a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	3308      	adds	r3, #8
 8002e52:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	e853 3f00 	ldrex	r3, [r3]
 8002e5a:	60fb      	str	r3, [r7, #12]
   return(result);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f023 0301 	bic.w	r3, r3, #1
 8002e62:	64bb      	str	r3, [r7, #72]	; 0x48
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	3308      	adds	r3, #8
 8002e6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002e6c:	61fa      	str	r2, [r7, #28]
 8002e6e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e70:	69b9      	ldr	r1, [r7, #24]
 8002e72:	69fa      	ldr	r2, [r7, #28]
 8002e74:	e841 2300 	strex	r3, r2, [r1]
 8002e78:	617b      	str	r3, [r7, #20]
   return(result);
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d1e5      	bne.n	8002e4c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2220      	movs	r2, #32
 8002e84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002e90:	2303      	movs	r3, #3
 8002e92:	e011      	b.n	8002eb8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2220      	movs	r2, #32
 8002e98:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2220      	movs	r2, #32
 8002e9e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8002eb6:	2300      	movs	r3, #0
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3758      	adds	r7, #88	; 0x58
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}

08002ec0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b084      	sub	sp, #16
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	60f8      	str	r0, [r7, #12]
 8002ec8:	60b9      	str	r1, [r7, #8]
 8002eca:	603b      	str	r3, [r7, #0]
 8002ecc:	4613      	mov	r3, r2
 8002ece:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ed0:	e04f      	b.n	8002f72 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ed2:	69bb      	ldr	r3, [r7, #24]
 8002ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ed8:	d04b      	beq.n	8002f72 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eda:	f7fd fd9b 	bl	8000a14 <HAL_GetTick>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	69ba      	ldr	r2, [r7, #24]
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d302      	bcc.n	8002ef0 <UART_WaitOnFlagUntilTimeout+0x30>
 8002eea:	69bb      	ldr	r3, [r7, #24]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d101      	bne.n	8002ef4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002ef0:	2303      	movs	r3, #3
 8002ef2:	e04e      	b.n	8002f92 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 0304 	and.w	r3, r3, #4
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d037      	beq.n	8002f72 <UART_WaitOnFlagUntilTimeout+0xb2>
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	2b80      	cmp	r3, #128	; 0x80
 8002f06:	d034      	beq.n	8002f72 <UART_WaitOnFlagUntilTimeout+0xb2>
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	2b40      	cmp	r3, #64	; 0x40
 8002f0c:	d031      	beq.n	8002f72 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	69db      	ldr	r3, [r3, #28]
 8002f14:	f003 0308 	and.w	r3, r3, #8
 8002f18:	2b08      	cmp	r3, #8
 8002f1a:	d110      	bne.n	8002f3e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	2208      	movs	r2, #8
 8002f22:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002f24:	68f8      	ldr	r0, [r7, #12]
 8002f26:	f000 f838 	bl	8002f9a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2208      	movs	r2, #8
 8002f2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2200      	movs	r2, #0
 8002f36:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e029      	b.n	8002f92 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	69db      	ldr	r3, [r3, #28]
 8002f44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f4c:	d111      	bne.n	8002f72 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f56:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002f58:	68f8      	ldr	r0, [r7, #12]
 8002f5a:	f000 f81e 	bl	8002f9a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2220      	movs	r2, #32
 8002f62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e00f      	b.n	8002f92 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	69da      	ldr	r2, [r3, #28]
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	68ba      	ldr	r2, [r7, #8]
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	bf0c      	ite	eq
 8002f82:	2301      	moveq	r3, #1
 8002f84:	2300      	movne	r3, #0
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	461a      	mov	r2, r3
 8002f8a:	79fb      	ldrb	r3, [r7, #7]
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d0a0      	beq.n	8002ed2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f90:	2300      	movs	r3, #0
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3710      	adds	r7, #16
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}

08002f9a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002f9a:	b480      	push	{r7}
 8002f9c:	b095      	sub	sp, #84	; 0x54
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002faa:	e853 3f00 	ldrex	r3, [r3]
 8002fae:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fb2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002fb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fc0:	643b      	str	r3, [r7, #64]	; 0x40
 8002fc2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fc4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002fc6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002fc8:	e841 2300 	strex	r3, r2, [r1]
 8002fcc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d1e6      	bne.n	8002fa2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	3308      	adds	r3, #8
 8002fda:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fdc:	6a3b      	ldr	r3, [r7, #32]
 8002fde:	e853 3f00 	ldrex	r3, [r3]
 8002fe2:	61fb      	str	r3, [r7, #28]
   return(result);
 8002fe4:	69fb      	ldr	r3, [r7, #28]
 8002fe6:	f023 0301 	bic.w	r3, r3, #1
 8002fea:	64bb      	str	r3, [r7, #72]	; 0x48
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	3308      	adds	r3, #8
 8002ff2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002ff4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002ff6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ff8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ffa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ffc:	e841 2300 	strex	r3, r2, [r1]
 8003000:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003004:	2b00      	cmp	r3, #0
 8003006:	d1e5      	bne.n	8002fd4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800300c:	2b01      	cmp	r3, #1
 800300e:	d118      	bne.n	8003042 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	e853 3f00 	ldrex	r3, [r3]
 800301c:	60bb      	str	r3, [r7, #8]
   return(result);
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	f023 0310 	bic.w	r3, r3, #16
 8003024:	647b      	str	r3, [r7, #68]	; 0x44
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	461a      	mov	r2, r3
 800302c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800302e:	61bb      	str	r3, [r7, #24]
 8003030:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003032:	6979      	ldr	r1, [r7, #20]
 8003034:	69ba      	ldr	r2, [r7, #24]
 8003036:	e841 2300 	strex	r3, r2, [r1]
 800303a:	613b      	str	r3, [r7, #16]
   return(result);
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d1e6      	bne.n	8003010 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2220      	movs	r2, #32
 8003046:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2200      	movs	r2, #0
 800304e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2200      	movs	r2, #0
 8003054:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003056:	bf00      	nop
 8003058:	3754      	adds	r7, #84	; 0x54
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr

08003062 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003062:	b480      	push	{r7}
 8003064:	b083      	sub	sp, #12
 8003066:	af00      	add	r7, sp, #0
 8003068:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	f103 0208 	add.w	r2, r3, #8
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	f04f 32ff 	mov.w	r2, #4294967295
 800307a:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	f103 0208 	add.w	r2, r3, #8
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	f103 0208 	add.w	r2, r3, #8
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2200      	movs	r2, #0
 8003094:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003096:	bf00      	nop
 8003098:	370c      	adds	r7, #12
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr

080030a2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80030a2:	b480      	push	{r7}
 80030a4:	b083      	sub	sp, #12
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2200      	movs	r2, #0
 80030ae:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80030b0:	bf00      	nop
 80030b2:	370c      	adds	r7, #12
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr

080030bc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80030bc:	b480      	push	{r7}
 80030be:	b085      	sub	sp, #20
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	68fa      	ldr	r2, [r7, #12]
 80030d0:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	689a      	ldr	r2, [r3, #8]
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	683a      	ldr	r2, [r7, #0]
 80030e0:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	683a      	ldr	r2, [r7, #0]
 80030e6:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	1c5a      	adds	r2, r3, #1
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	601a      	str	r2, [r3, #0]
}
 80030f8:	bf00      	nop
 80030fa:	3714      	adds	r7, #20
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr

08003104 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8003104:	b480      	push	{r7}
 8003106:	b085      	sub	sp, #20
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
 800310c:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	f1b3 3fff 	cmp.w	r3, #4294967295
 800311a:	d103      	bne.n	8003124 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	691b      	ldr	r3, [r3, #16]
 8003120:	60fb      	str	r3, [r7, #12]
 8003122:	e00c      	b.n	800313e <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	3308      	adds	r3, #8
 8003128:	60fb      	str	r3, [r7, #12]
 800312a:	e002      	b.n	8003132 <vListInsert+0x2e>
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	60fb      	str	r3, [r7, #12]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	68ba      	ldr	r2, [r7, #8]
 800313a:	429a      	cmp	r2, r3
 800313c:	d2f6      	bcs.n	800312c <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	685a      	ldr	r2, [r3, #4]
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	683a      	ldr	r2, [r7, #0]
 800314c:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	68fa      	ldr	r2, [r7, #12]
 8003152:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	683a      	ldr	r2, [r7, #0]
 8003158:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	687a      	ldr	r2, [r7, #4]
 800315e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	1c5a      	adds	r2, r3, #1
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	601a      	str	r2, [r3, #0]
}
 800316a:	bf00      	nop
 800316c:	3714      	adds	r7, #20
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr

08003176 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003176:	b480      	push	{r7}
 8003178:	b085      	sub	sp, #20
 800317a:	af00      	add	r7, sp, #0
 800317c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	691b      	ldr	r3, [r3, #16]
 8003182:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	687a      	ldr	r2, [r7, #4]
 800318a:	6892      	ldr	r2, [r2, #8]
 800318c:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	687a      	ldr	r2, [r7, #4]
 8003194:	6852      	ldr	r2, [r2, #4]
 8003196:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	687a      	ldr	r2, [r7, #4]
 800319e:	429a      	cmp	r2, r3
 80031a0:	d103      	bne.n	80031aa <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	689a      	ldr	r2, [r3, #8]
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2200      	movs	r2, #0
 80031ae:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	1e5a      	subs	r2, r3, #1
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3714      	adds	r7, #20
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr
	...

080031cc <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b084      	sub	sp, #16
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
 80031d4:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d10a      	bne.n	80031f6 <xQueueGenericReset+0x2a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80031e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031e4:	f383 8811 	msr	BASEPRI, r3
 80031e8:	f3bf 8f6f 	isb	sy
 80031ec:	f3bf 8f4f 	dsb	sy
 80031f0:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80031f2:	bf00      	nop
 80031f4:	e7fe      	b.n	80031f4 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 80031f6:	f002 f98f 	bl	8005518 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003202:	68f9      	ldr	r1, [r7, #12]
 8003204:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003206:	fb01 f303 	mul.w	r3, r1, r3
 800320a:	441a      	add	r2, r3
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2200      	movs	r2, #0
 8003214:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003226:	3b01      	subs	r3, #1
 8003228:	68f9      	ldr	r1, [r7, #12]
 800322a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800322c:	fb01 f303 	mul.w	r3, r1, r3
 8003230:	441a      	add	r2, r3
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	22ff      	movs	r2, #255	; 0xff
 800323a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	22ff      	movs	r2, #255	; 0xff
 8003242:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d114      	bne.n	8003276 <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	691b      	ldr	r3, [r3, #16]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d01a      	beq.n	800328a <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	3310      	adds	r3, #16
 8003258:	4618      	mov	r0, r3
 800325a:	f001 f911 	bl	8004480 <xTaskRemoveFromEventList>
 800325e:	4603      	mov	r3, r0
 8003260:	2b00      	cmp	r3, #0
 8003262:	d012      	beq.n	800328a <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8003264:	4b0c      	ldr	r3, [pc, #48]	; (8003298 <xQueueGenericReset+0xcc>)
 8003266:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800326a:	601a      	str	r2, [r3, #0]
 800326c:	f3bf 8f4f 	dsb	sy
 8003270:	f3bf 8f6f 	isb	sy
 8003274:	e009      	b.n	800328a <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	3310      	adds	r3, #16
 800327a:	4618      	mov	r0, r3
 800327c:	f7ff fef1 	bl	8003062 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	3324      	adds	r3, #36	; 0x24
 8003284:	4618      	mov	r0, r3
 8003286:	f7ff feec 	bl	8003062 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 800328a:	f002 f975 	bl	8005578 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 800328e:	2301      	movs	r3, #1
}
 8003290:	4618      	mov	r0, r3
 8003292:	3710      	adds	r7, #16
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}
 8003298:	e000ed04 	.word	0xe000ed04

0800329c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 800329c:	b580      	push	{r7, lr}
 800329e:	b08c      	sub	sp, #48	; 0x30
 80032a0:	af02      	add	r7, sp, #8
 80032a2:	60f8      	str	r0, [r7, #12]
 80032a4:	60b9      	str	r1, [r7, #8]
 80032a6:	4613      	mov	r3, r2
 80032a8:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d10a      	bne.n	80032c6 <xQueueGenericCreate+0x2a>
        __asm volatile
 80032b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032b4:	f383 8811 	msr	BASEPRI, r3
 80032b8:	f3bf 8f6f 	isb	sy
 80032bc:	f3bf 8f4f 	dsb	sy
 80032c0:	61bb      	str	r3, [r7, #24]
    }
 80032c2:	bf00      	nop
 80032c4:	e7fe      	b.n	80032c4 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	68ba      	ldr	r2, [r7, #8]
 80032ca:	fb02 f303 	mul.w	r3, r2, r3
 80032ce:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d006      	beq.n	80032e4 <xQueueGenericCreate+0x48>
 80032d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	fbb2 f3f3 	udiv	r3, r2, r3
 80032de:	68fa      	ldr	r2, [r7, #12]
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d101      	bne.n	80032e8 <xQueueGenericCreate+0x4c>
 80032e4:	2301      	movs	r3, #1
 80032e6:	e000      	b.n	80032ea <xQueueGenericCreate+0x4e>
 80032e8:	2300      	movs	r3, #0
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d10a      	bne.n	8003304 <xQueueGenericCreate+0x68>
        __asm volatile
 80032ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032f2:	f383 8811 	msr	BASEPRI, r3
 80032f6:	f3bf 8f6f 	isb	sy
 80032fa:	f3bf 8f4f 	dsb	sy
 80032fe:	617b      	str	r3, [r7, #20]
    }
 8003300:	bf00      	nop
 8003302:	e7fe      	b.n	8003302 <xQueueGenericCreate+0x66>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003306:	3354      	adds	r3, #84	; 0x54
 8003308:	4618      	mov	r0, r3
 800330a:	f002 fa1d 	bl	8005748 <pvPortMalloc>
 800330e:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8003310:	6a3b      	ldr	r3, [r7, #32]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d00d      	beq.n	8003332 <xQueueGenericCreate+0x96>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003316:	6a3b      	ldr	r3, [r7, #32]
 8003318:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	3354      	adds	r3, #84	; 0x54
 800331e:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003320:	79fa      	ldrb	r2, [r7, #7]
 8003322:	6a3b      	ldr	r3, [r7, #32]
 8003324:	9300      	str	r3, [sp, #0]
 8003326:	4613      	mov	r3, r2
 8003328:	69fa      	ldr	r2, [r7, #28]
 800332a:	68b9      	ldr	r1, [r7, #8]
 800332c:	68f8      	ldr	r0, [r7, #12]
 800332e:	f000 f805 	bl	800333c <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8003332:	6a3b      	ldr	r3, [r7, #32]
    }
 8003334:	4618      	mov	r0, r3
 8003336:	3728      	adds	r7, #40	; 0x28
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}

0800333c <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b084      	sub	sp, #16
 8003340:	af00      	add	r7, sp, #0
 8003342:	60f8      	str	r0, [r7, #12]
 8003344:	60b9      	str	r1, [r7, #8]
 8003346:	607a      	str	r2, [r7, #4]
 8003348:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d103      	bne.n	8003358 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003350:	69bb      	ldr	r3, [r7, #24]
 8003352:	69ba      	ldr	r2, [r7, #24]
 8003354:	601a      	str	r2, [r3, #0]
 8003356:	e002      	b.n	800335e <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003358:	69bb      	ldr	r3, [r7, #24]
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800335e:	69bb      	ldr	r3, [r7, #24]
 8003360:	68fa      	ldr	r2, [r7, #12]
 8003362:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8003364:	69bb      	ldr	r3, [r7, #24]
 8003366:	68ba      	ldr	r2, [r7, #8]
 8003368:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800336a:	2101      	movs	r1, #1
 800336c:	69b8      	ldr	r0, [r7, #24]
 800336e:	f7ff ff2d 	bl	80031cc <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8003372:	69bb      	ldr	r3, [r7, #24]
 8003374:	78fa      	ldrb	r2, [r7, #3]
 8003376:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        }
    #endif /* configUSE_TRACE_FACILITY */

    #if ( configUSE_QUEUE_SETS == 1 )
        {
            pxNewQueue->pxQueueSetContainer = NULL;
 800337a:	69bb      	ldr	r3, [r7, #24]
 800337c:	2200      	movs	r2, #0
 800337e:	649a      	str	r2, [r3, #72]	; 0x48
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8003380:	bf00      	nop
 8003382:	3710      	adds	r7, #16
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}

08003388 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b08e      	sub	sp, #56	; 0x38
 800338c:	af00      	add	r7, sp, #0
 800338e:	60f8      	str	r0, [r7, #12]
 8003390:	60b9      	str	r1, [r7, #8]
 8003392:	607a      	str	r2, [r7, #4]
 8003394:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003396:	2300      	movs	r3, #0
 8003398:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 800339e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d10a      	bne.n	80033ba <xQueueGenericSend+0x32>
        __asm volatile
 80033a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033a8:	f383 8811 	msr	BASEPRI, r3
 80033ac:	f3bf 8f6f 	isb	sy
 80033b0:	f3bf 8f4f 	dsb	sy
 80033b4:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80033b6:	bf00      	nop
 80033b8:	e7fe      	b.n	80033b8 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d103      	bne.n	80033c8 <xQueueGenericSend+0x40>
 80033c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d101      	bne.n	80033cc <xQueueGenericSend+0x44>
 80033c8:	2301      	movs	r3, #1
 80033ca:	e000      	b.n	80033ce <xQueueGenericSend+0x46>
 80033cc:	2300      	movs	r3, #0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d10a      	bne.n	80033e8 <xQueueGenericSend+0x60>
        __asm volatile
 80033d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033d6:	f383 8811 	msr	BASEPRI, r3
 80033da:	f3bf 8f6f 	isb	sy
 80033de:	f3bf 8f4f 	dsb	sy
 80033e2:	623b      	str	r3, [r7, #32]
    }
 80033e4:	bf00      	nop
 80033e6:	e7fe      	b.n	80033e6 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	2b02      	cmp	r3, #2
 80033ec:	d103      	bne.n	80033f6 <xQueueGenericSend+0x6e>
 80033ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d101      	bne.n	80033fa <xQueueGenericSend+0x72>
 80033f6:	2301      	movs	r3, #1
 80033f8:	e000      	b.n	80033fc <xQueueGenericSend+0x74>
 80033fa:	2300      	movs	r3, #0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d10a      	bne.n	8003416 <xQueueGenericSend+0x8e>
        __asm volatile
 8003400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003404:	f383 8811 	msr	BASEPRI, r3
 8003408:	f3bf 8f6f 	isb	sy
 800340c:	f3bf 8f4f 	dsb	sy
 8003410:	61fb      	str	r3, [r7, #28]
    }
 8003412:	bf00      	nop
 8003414:	e7fe      	b.n	8003414 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003416:	f001 f9df 	bl	80047d8 <xTaskGetSchedulerState>
 800341a:	4603      	mov	r3, r0
 800341c:	2b00      	cmp	r3, #0
 800341e:	d102      	bne.n	8003426 <xQueueGenericSend+0x9e>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d101      	bne.n	800342a <xQueueGenericSend+0xa2>
 8003426:	2301      	movs	r3, #1
 8003428:	e000      	b.n	800342c <xQueueGenericSend+0xa4>
 800342a:	2300      	movs	r3, #0
 800342c:	2b00      	cmp	r3, #0
 800342e:	d10a      	bne.n	8003446 <xQueueGenericSend+0xbe>
        __asm volatile
 8003430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003434:	f383 8811 	msr	BASEPRI, r3
 8003438:	f3bf 8f6f 	isb	sy
 800343c:	f3bf 8f4f 	dsb	sy
 8003440:	61bb      	str	r3, [r7, #24]
    }
 8003442:	bf00      	nop
 8003444:	e7fe      	b.n	8003444 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003446:	f002 f867 	bl	8005518 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800344a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800344c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800344e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003450:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003452:	429a      	cmp	r2, r3
 8003454:	d302      	bcc.n	800345c <xQueueGenericSend+0xd4>
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	2b02      	cmp	r3, #2
 800345a:	d145      	bne.n	80034e8 <xQueueGenericSend+0x160>
            {
                traceQUEUE_SEND( pxQueue );

                #if ( configUSE_QUEUE_SETS == 1 )
                    {
                        const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800345c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800345e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003460:	62fb      	str	r3, [r7, #44]	; 0x2c

                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003462:	683a      	ldr	r2, [r7, #0]
 8003464:	68b9      	ldr	r1, [r7, #8]
 8003466:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003468:	f000 fa4a 	bl	8003900 <prvCopyDataToQueue>
 800346c:	62b8      	str	r0, [r7, #40]	; 0x28

                        if( pxQueue->pxQueueSetContainer != NULL )
 800346e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003470:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003472:	2b00      	cmp	r3, #0
 8003474:	d014      	beq.n	80034a0 <xQueueGenericSend+0x118>
                        {
                            if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 ) )
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	2b02      	cmp	r3, #2
 800347a:	d102      	bne.n	8003482 <xQueueGenericSend+0xfa>
 800347c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800347e:	2b00      	cmp	r3, #0
 8003480:	d12e      	bne.n	80034e0 <xQueueGenericSend+0x158>
                                /* Do not notify the queue set as an existing item
                                 * was overwritten in the queue so the number of items
                                 * in the queue has not changed. */
                                mtCOVERAGE_TEST_MARKER();
                            }
                            else if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 8003482:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003484:	f000 fbb8 	bl	8003bf8 <prvNotifyQueueSetContainer>
 8003488:	4603      	mov	r3, r0
 800348a:	2b00      	cmp	r3, #0
 800348c:	d028      	beq.n	80034e0 <xQueueGenericSend+0x158>
                            {
                                /* The queue is a member of a queue set, and posting
                                 * to the queue set caused a higher priority task to
                                 * unblock. A context switch is required. */
                                queueYIELD_IF_USING_PREEMPTION();
 800348e:	4b4a      	ldr	r3, [pc, #296]	; (80035b8 <xQueueGenericSend+0x230>)
 8003490:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003494:	601a      	str	r2, [r3, #0]
 8003496:	f3bf 8f4f 	dsb	sy
 800349a:	f3bf 8f6f 	isb	sy
 800349e:	e01f      	b.n	80034e0 <xQueueGenericSend+0x158>
                        }
                        else
                        {
                            /* If there was a task waiting for data to arrive on the
                             * queue then unblock it now. */
                            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80034a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d010      	beq.n	80034ca <xQueueGenericSend+0x142>
                            {
                                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80034a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034aa:	3324      	adds	r3, #36	; 0x24
 80034ac:	4618      	mov	r0, r3
 80034ae:	f000 ffe7 	bl	8004480 <xTaskRemoveFromEventList>
 80034b2:	4603      	mov	r3, r0
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d013      	beq.n	80034e0 <xQueueGenericSend+0x158>
                                {
                                    /* The unblocked task has a priority higher than
                                     * our own so yield immediately.  Yes it is ok to
                                     * do this from within the critical section - the
                                     * kernel takes care of that. */
                                    queueYIELD_IF_USING_PREEMPTION();
 80034b8:	4b3f      	ldr	r3, [pc, #252]	; (80035b8 <xQueueGenericSend+0x230>)
 80034ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034be:	601a      	str	r2, [r3, #0]
 80034c0:	f3bf 8f4f 	dsb	sy
 80034c4:	f3bf 8f6f 	isb	sy
 80034c8:	e00a      	b.n	80034e0 <xQueueGenericSend+0x158>
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }
                            }
                            else if( xYieldRequired != pdFALSE )
 80034ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d007      	beq.n	80034e0 <xQueueGenericSend+0x158>
                            {
                                /* This path is a special case that will only get
                                 * executed if the task was holding multiple mutexes
                                 * and the mutexes were given back in an order that is
                                 * different to that in which they were taken. */
                                queueYIELD_IF_USING_PREEMPTION();
 80034d0:	4b39      	ldr	r3, [pc, #228]	; (80035b8 <xQueueGenericSend+0x230>)
 80034d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034d6:	601a      	str	r2, [r3, #0]
 80034d8:	f3bf 8f4f 	dsb	sy
 80034dc:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80034e0:	f002 f84a 	bl	8005578 <vPortExitCritical>
                return pdPASS;
 80034e4:	2301      	movs	r3, #1
 80034e6:	e063      	b.n	80035b0 <xQueueGenericSend+0x228>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d103      	bne.n	80034f6 <xQueueGenericSend+0x16e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80034ee:	f002 f843 	bl	8005578 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 80034f2:	2300      	movs	r3, #0
 80034f4:	e05c      	b.n	80035b0 <xQueueGenericSend+0x228>
                }
                else if( xEntryTimeSet == pdFALSE )
 80034f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d106      	bne.n	800350a <xQueueGenericSend+0x182>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80034fc:	f107 0310 	add.w	r3, r7, #16
 8003500:	4618      	mov	r0, r3
 8003502:	f001 f81f 	bl	8004544 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003506:	2301      	movs	r3, #1
 8003508:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800350a:	f002 f835 	bl	8005578 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800350e:	f000 fd7f 	bl	8004010 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003512:	f002 f801 	bl	8005518 <vPortEnterCritical>
 8003516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003518:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800351c:	b25b      	sxtb	r3, r3
 800351e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003522:	d103      	bne.n	800352c <xQueueGenericSend+0x1a4>
 8003524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003526:	2200      	movs	r2, #0
 8003528:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800352c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800352e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003532:	b25b      	sxtb	r3, r3
 8003534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003538:	d103      	bne.n	8003542 <xQueueGenericSend+0x1ba>
 800353a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800353c:	2200      	movs	r2, #0
 800353e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003542:	f002 f819 	bl	8005578 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003546:	1d3a      	adds	r2, r7, #4
 8003548:	f107 0310 	add.w	r3, r7, #16
 800354c:	4611      	mov	r1, r2
 800354e:	4618      	mov	r0, r3
 8003550:	f001 f80e 	bl	8004570 <xTaskCheckForTimeOut>
 8003554:	4603      	mov	r3, r0
 8003556:	2b00      	cmp	r3, #0
 8003558:	d124      	bne.n	80035a4 <xQueueGenericSend+0x21c>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800355a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800355c:	f000 fad5 	bl	8003b0a <prvIsQueueFull>
 8003560:	4603      	mov	r3, r0
 8003562:	2b00      	cmp	r3, #0
 8003564:	d018      	beq.n	8003598 <xQueueGenericSend+0x210>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003568:	3310      	adds	r3, #16
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	4611      	mov	r1, r2
 800356e:	4618      	mov	r0, r3
 8003570:	f000 ff36 	bl	80043e0 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8003574:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003576:	f000 fa53 	bl	8003a20 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 800357a:	f000 fd57 	bl	800402c <xTaskResumeAll>
 800357e:	4603      	mov	r3, r0
 8003580:	2b00      	cmp	r3, #0
 8003582:	f47f af60 	bne.w	8003446 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8003586:	4b0c      	ldr	r3, [pc, #48]	; (80035b8 <xQueueGenericSend+0x230>)
 8003588:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800358c:	601a      	str	r2, [r3, #0]
 800358e:	f3bf 8f4f 	dsb	sy
 8003592:	f3bf 8f6f 	isb	sy
 8003596:	e756      	b.n	8003446 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8003598:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800359a:	f000 fa41 	bl	8003a20 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800359e:	f000 fd45 	bl	800402c <xTaskResumeAll>
 80035a2:	e750      	b.n	8003446 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80035a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80035a6:	f000 fa3b 	bl	8003a20 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80035aa:	f000 fd3f 	bl	800402c <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 80035ae:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	3738      	adds	r7, #56	; 0x38
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}
 80035b8:	e000ed04 	.word	0xe000ed04

080035bc <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b090      	sub	sp, #64	; 0x40
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	60f8      	str	r0, [r7, #12]
 80035c4:	60b9      	str	r1, [r7, #8]
 80035c6:	607a      	str	r2, [r7, #4]
 80035c8:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 80035ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d10a      	bne.n	80035ea <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 80035d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035d8:	f383 8811 	msr	BASEPRI, r3
 80035dc:	f3bf 8f6f 	isb	sy
 80035e0:	f3bf 8f4f 	dsb	sy
 80035e4:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80035e6:	bf00      	nop
 80035e8:	e7fe      	b.n	80035e8 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d103      	bne.n	80035f8 <xQueueGenericSendFromISR+0x3c>
 80035f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d101      	bne.n	80035fc <xQueueGenericSendFromISR+0x40>
 80035f8:	2301      	movs	r3, #1
 80035fa:	e000      	b.n	80035fe <xQueueGenericSendFromISR+0x42>
 80035fc:	2300      	movs	r3, #0
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d10a      	bne.n	8003618 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8003602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003606:	f383 8811 	msr	BASEPRI, r3
 800360a:	f3bf 8f6f 	isb	sy
 800360e:	f3bf 8f4f 	dsb	sy
 8003612:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8003614:	bf00      	nop
 8003616:	e7fe      	b.n	8003616 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	2b02      	cmp	r3, #2
 800361c:	d103      	bne.n	8003626 <xQueueGenericSendFromISR+0x6a>
 800361e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003622:	2b01      	cmp	r3, #1
 8003624:	d101      	bne.n	800362a <xQueueGenericSendFromISR+0x6e>
 8003626:	2301      	movs	r3, #1
 8003628:	e000      	b.n	800362c <xQueueGenericSendFromISR+0x70>
 800362a:	2300      	movs	r3, #0
 800362c:	2b00      	cmp	r3, #0
 800362e:	d10a      	bne.n	8003646 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8003630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003634:	f383 8811 	msr	BASEPRI, r3
 8003638:	f3bf 8f6f 	isb	sy
 800363c:	f3bf 8f4f 	dsb	sy
 8003640:	623b      	str	r3, [r7, #32]
    }
 8003642:	bf00      	nop
 8003644:	e7fe      	b.n	8003644 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003646:	f002 f83f 	bl	80056c8 <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 800364a:	f3ef 8211 	mrs	r2, BASEPRI
 800364e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003652:	f383 8811 	msr	BASEPRI, r3
 8003656:	f3bf 8f6f 	isb	sy
 800365a:	f3bf 8f4f 	dsb	sy
 800365e:	61fa      	str	r2, [r7, #28]
 8003660:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8003662:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003664:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003668:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800366a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800366c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800366e:	429a      	cmp	r2, r3
 8003670:	d302      	bcc.n	8003678 <xQueueGenericSendFromISR+0xbc>
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	2b02      	cmp	r3, #2
 8003676:	d155      	bne.n	8003724 <xQueueGenericSendFromISR+0x168>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8003678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800367a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800367e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003686:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003688:	683a      	ldr	r2, [r7, #0]
 800368a:	68b9      	ldr	r1, [r7, #8]
 800368c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800368e:	f000 f937 	bl	8003900 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8003692:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003696:	f1b3 3fff 	cmp.w	r3, #4294967295
 800369a:	d129      	bne.n	80036f0 <xQueueGenericSendFromISR+0x134>
            {
                #if ( configUSE_QUEUE_SETS == 1 )
                    {
                        if( pxQueue->pxQueueSetContainer != NULL )
 800369c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800369e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d012      	beq.n	80036ca <xQueueGenericSendFromISR+0x10e>
                        {
                            if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 ) )
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	2b02      	cmp	r3, #2
 80036a8:	d102      	bne.n	80036b0 <xQueueGenericSendFromISR+0xf4>
 80036aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d136      	bne.n	800371e <xQueueGenericSendFromISR+0x162>
                                /* Do not notify the queue set as an existing item
                                 * was overwritten in the queue so the number of items
                                 * in the queue has not changed. */
                                mtCOVERAGE_TEST_MARKER();
                            }
                            else if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 80036b0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80036b2:	f000 faa1 	bl	8003bf8 <prvNotifyQueueSetContainer>
 80036b6:	4603      	mov	r3, r0
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d030      	beq.n	800371e <xQueueGenericSendFromISR+0x162>
                            {
                                /* The queue is a member of a queue set, and posting
                                 * to the queue set caused a higher priority task to
                                 * unblock.  A context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d02d      	beq.n	800371e <xQueueGenericSendFromISR+0x162>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2201      	movs	r2, #1
 80036c6:	601a      	str	r2, [r3, #0]
 80036c8:	e029      	b.n	800371e <xQueueGenericSendFromISR+0x162>
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else
                        {
                            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80036ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d025      	beq.n	800371e <xQueueGenericSendFromISR+0x162>
                            {
                                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80036d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036d4:	3324      	adds	r3, #36	; 0x24
 80036d6:	4618      	mov	r0, r3
 80036d8:	f000 fed2 	bl	8004480 <xTaskRemoveFromEventList>
 80036dc:	4603      	mov	r3, r0
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d01d      	beq.n	800371e <xQueueGenericSendFromISR+0x162>
                                {
                                    /* The task waiting has a higher priority so
                                     *  record that a context switch is required. */
                                    if( pxHigherPriorityTaskWoken != NULL )
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d01a      	beq.n	800371e <xQueueGenericSendFromISR+0x162>
                                    {
                                        *pxHigherPriorityTaskWoken = pdTRUE;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2201      	movs	r2, #1
 80036ec:	601a      	str	r2, [r3, #0]
 80036ee:	e016      	b.n	800371e <xQueueGenericSendFromISR+0x162>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 80036f0:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80036f4:	2b7f      	cmp	r3, #127	; 0x7f
 80036f6:	d10a      	bne.n	800370e <xQueueGenericSendFromISR+0x152>
        __asm volatile
 80036f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036fc:	f383 8811 	msr	BASEPRI, r3
 8003700:	f3bf 8f6f 	isb	sy
 8003704:	f3bf 8f4f 	dsb	sy
 8003708:	617b      	str	r3, [r7, #20]
    }
 800370a:	bf00      	nop
 800370c:	e7fe      	b.n	800370c <xQueueGenericSendFromISR+0x150>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800370e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003712:	3301      	adds	r3, #1
 8003714:	b2db      	uxtb	r3, r3
 8003716:	b25a      	sxtb	r2, r3
 8003718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800371a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 800371e:	2301      	movs	r3, #1
 8003720:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8003722:	e001      	b.n	8003728 <xQueueGenericSendFromISR+0x16c>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8003724:	2300      	movs	r3, #0
 8003726:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003728:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800372a:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003732:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8003734:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003736:	4618      	mov	r0, r3
 8003738:	3740      	adds	r7, #64	; 0x40
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
	...

08003740 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b08c      	sub	sp, #48	; 0x30
 8003744:	af00      	add	r7, sp, #0
 8003746:	60f8      	str	r0, [r7, #12]
 8003748:	60b9      	str	r1, [r7, #8]
 800374a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 800374c:	2300      	movs	r3, #0
 800374e:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8003754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003756:	2b00      	cmp	r3, #0
 8003758:	d10a      	bne.n	8003770 <xQueueReceive+0x30>
        __asm volatile
 800375a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800375e:	f383 8811 	msr	BASEPRI, r3
 8003762:	f3bf 8f6f 	isb	sy
 8003766:	f3bf 8f4f 	dsb	sy
 800376a:	623b      	str	r3, [r7, #32]
    }
 800376c:	bf00      	nop
 800376e:	e7fe      	b.n	800376e <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d103      	bne.n	800377e <xQueueReceive+0x3e>
 8003776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377a:	2b00      	cmp	r3, #0
 800377c:	d101      	bne.n	8003782 <xQueueReceive+0x42>
 800377e:	2301      	movs	r3, #1
 8003780:	e000      	b.n	8003784 <xQueueReceive+0x44>
 8003782:	2300      	movs	r3, #0
 8003784:	2b00      	cmp	r3, #0
 8003786:	d10a      	bne.n	800379e <xQueueReceive+0x5e>
        __asm volatile
 8003788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800378c:	f383 8811 	msr	BASEPRI, r3
 8003790:	f3bf 8f6f 	isb	sy
 8003794:	f3bf 8f4f 	dsb	sy
 8003798:	61fb      	str	r3, [r7, #28]
    }
 800379a:	bf00      	nop
 800379c:	e7fe      	b.n	800379c <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800379e:	f001 f81b 	bl	80047d8 <xTaskGetSchedulerState>
 80037a2:	4603      	mov	r3, r0
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d102      	bne.n	80037ae <xQueueReceive+0x6e>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d101      	bne.n	80037b2 <xQueueReceive+0x72>
 80037ae:	2301      	movs	r3, #1
 80037b0:	e000      	b.n	80037b4 <xQueueReceive+0x74>
 80037b2:	2300      	movs	r3, #0
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d10a      	bne.n	80037ce <xQueueReceive+0x8e>
        __asm volatile
 80037b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037bc:	f383 8811 	msr	BASEPRI, r3
 80037c0:	f3bf 8f6f 	isb	sy
 80037c4:	f3bf 8f4f 	dsb	sy
 80037c8:	61bb      	str	r3, [r7, #24]
    }
 80037ca:	bf00      	nop
 80037cc:	e7fe      	b.n	80037cc <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80037ce:	f001 fea3 	bl	8005518 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80037d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037d6:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80037d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d01f      	beq.n	800381e <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80037de:	68b9      	ldr	r1, [r7, #8]
 80037e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80037e2:	f000 f8f7 	bl	80039d4 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80037e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e8:	1e5a      	subs	r2, r3, #1
 80037ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ec:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80037ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037f0:	691b      	ldr	r3, [r3, #16]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d00f      	beq.n	8003816 <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80037f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037f8:	3310      	adds	r3, #16
 80037fa:	4618      	mov	r0, r3
 80037fc:	f000 fe40 	bl	8004480 <xTaskRemoveFromEventList>
 8003800:	4603      	mov	r3, r0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d007      	beq.n	8003816 <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8003806:	4b3d      	ldr	r3, [pc, #244]	; (80038fc <xQueueReceive+0x1bc>)
 8003808:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800380c:	601a      	str	r2, [r3, #0]
 800380e:	f3bf 8f4f 	dsb	sy
 8003812:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8003816:	f001 feaf 	bl	8005578 <vPortExitCritical>
                return pdPASS;
 800381a:	2301      	movs	r3, #1
 800381c:	e069      	b.n	80038f2 <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d103      	bne.n	800382c <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8003824:	f001 fea8 	bl	8005578 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8003828:	2300      	movs	r3, #0
 800382a:	e062      	b.n	80038f2 <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 800382c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800382e:	2b00      	cmp	r3, #0
 8003830:	d106      	bne.n	8003840 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003832:	f107 0310 	add.w	r3, r7, #16
 8003836:	4618      	mov	r0, r3
 8003838:	f000 fe84 	bl	8004544 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800383c:	2301      	movs	r3, #1
 800383e:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003840:	f001 fe9a 	bl	8005578 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003844:	f000 fbe4 	bl	8004010 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003848:	f001 fe66 	bl	8005518 <vPortEnterCritical>
 800384c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800384e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003852:	b25b      	sxtb	r3, r3
 8003854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003858:	d103      	bne.n	8003862 <xQueueReceive+0x122>
 800385a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800385c:	2200      	movs	r2, #0
 800385e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003864:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003868:	b25b      	sxtb	r3, r3
 800386a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800386e:	d103      	bne.n	8003878 <xQueueReceive+0x138>
 8003870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003872:	2200      	movs	r2, #0
 8003874:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003878:	f001 fe7e 	bl	8005578 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800387c:	1d3a      	adds	r2, r7, #4
 800387e:	f107 0310 	add.w	r3, r7, #16
 8003882:	4611      	mov	r1, r2
 8003884:	4618      	mov	r0, r3
 8003886:	f000 fe73 	bl	8004570 <xTaskCheckForTimeOut>
 800388a:	4603      	mov	r3, r0
 800388c:	2b00      	cmp	r3, #0
 800388e:	d123      	bne.n	80038d8 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003890:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003892:	f000 f924 	bl	8003ade <prvIsQueueEmpty>
 8003896:	4603      	mov	r3, r0
 8003898:	2b00      	cmp	r3, #0
 800389a:	d017      	beq.n	80038cc <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800389c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800389e:	3324      	adds	r3, #36	; 0x24
 80038a0:	687a      	ldr	r2, [r7, #4]
 80038a2:	4611      	mov	r1, r2
 80038a4:	4618      	mov	r0, r3
 80038a6:	f000 fd9b 	bl	80043e0 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80038aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80038ac:	f000 f8b8 	bl	8003a20 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80038b0:	f000 fbbc 	bl	800402c <xTaskResumeAll>
 80038b4:	4603      	mov	r3, r0
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d189      	bne.n	80037ce <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 80038ba:	4b10      	ldr	r3, [pc, #64]	; (80038fc <xQueueReceive+0x1bc>)
 80038bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038c0:	601a      	str	r2, [r3, #0]
 80038c2:	f3bf 8f4f 	dsb	sy
 80038c6:	f3bf 8f6f 	isb	sy
 80038ca:	e780      	b.n	80037ce <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80038cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80038ce:	f000 f8a7 	bl	8003a20 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80038d2:	f000 fbab 	bl	800402c <xTaskResumeAll>
 80038d6:	e77a      	b.n	80037ce <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80038d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80038da:	f000 f8a1 	bl	8003a20 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80038de:	f000 fba5 	bl	800402c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80038e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80038e4:	f000 f8fb 	bl	8003ade <prvIsQueueEmpty>
 80038e8:	4603      	mov	r3, r0
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	f43f af6f 	beq.w	80037ce <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80038f0:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3730      	adds	r7, #48	; 0x30
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	bf00      	nop
 80038fc:	e000ed04 	.word	0xe000ed04

08003900 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b086      	sub	sp, #24
 8003904:	af00      	add	r7, sp, #0
 8003906:	60f8      	str	r0, [r7, #12]
 8003908:	60b9      	str	r1, [r7, #8]
 800390a:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800390c:	2300      	movs	r3, #0
 800390e:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003914:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391a:	2b00      	cmp	r3, #0
 800391c:	d10d      	bne.n	800393a <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d14d      	bne.n	80039c2 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	4618      	mov	r0, r3
 800392c:	f000 ff72 	bl	8004814 <xTaskPriorityDisinherit>
 8003930:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2200      	movs	r2, #0
 8003936:	609a      	str	r2, [r3, #8]
 8003938:	e043      	b.n	80039c2 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d119      	bne.n	8003974 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	6858      	ldr	r0, [r3, #4]
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003948:	461a      	mov	r2, r3
 800394a:	68b9      	ldr	r1, [r7, #8]
 800394c:	f002 f912 	bl	8005b74 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	685a      	ldr	r2, [r3, #4]
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003958:	441a      	add	r2, r3
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	685a      	ldr	r2, [r3, #4]
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	429a      	cmp	r2, r3
 8003968:	d32b      	bcc.n	80039c2 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	605a      	str	r2, [r3, #4]
 8003972:	e026      	b.n	80039c2 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	68d8      	ldr	r0, [r3, #12]
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397c:	461a      	mov	r2, r3
 800397e:	68b9      	ldr	r1, [r7, #8]
 8003980:	f002 f8f8 	bl	8005b74 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	68da      	ldr	r2, [r3, #12]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398c:	425b      	negs	r3, r3
 800398e:	441a      	add	r2, r3
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	68da      	ldr	r2, [r3, #12]
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	429a      	cmp	r2, r3
 800399e:	d207      	bcs.n	80039b0 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	689a      	ldr	r2, [r3, #8]
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a8:	425b      	negs	r3, r3
 80039aa:	441a      	add	r2, r3
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2b02      	cmp	r3, #2
 80039b4:	d105      	bne.n	80039c2 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d002      	beq.n	80039c2 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	3b01      	subs	r3, #1
 80039c0:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	1c5a      	adds	r2, r3, #1
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 80039ca:	697b      	ldr	r3, [r7, #20]
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	3718      	adds	r7, #24
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}

080039d4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b082      	sub	sp, #8
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
 80039dc:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d018      	beq.n	8003a18 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	68da      	ldr	r2, [r3, #12]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ee:	441a      	add	r2, r3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	68da      	ldr	r2, [r3, #12]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d303      	bcc.n	8003a08 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	68d9      	ldr	r1, [r3, #12]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a10:	461a      	mov	r2, r3
 8003a12:	6838      	ldr	r0, [r7, #0]
 8003a14:	f002 f8ae 	bl	8005b74 <memcpy>
    }
}
 8003a18:	bf00      	nop
 8003a1a:	3708      	adds	r7, #8
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}

08003a20 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b084      	sub	sp, #16
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8003a28:	f001 fd76 	bl	8005518 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a32:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003a34:	e01e      	b.n	8003a74 <prvUnlockQueue+0x54>
        {
            /* Data was posted while the queue was locked.  Are any tasks
             * blocked waiting for data to become available? */
            #if ( configUSE_QUEUE_SETS == 1 )
                {
                    if( pxQueue->pxQueueSetContainer != NULL )
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d008      	beq.n	8003a50 <prvUnlockQueue+0x30>
                    {
                        if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f000 f8da 	bl	8003bf8 <prvNotifyQueueSetContainer>
 8003a44:	4603      	mov	r3, r0
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d010      	beq.n	8003a6c <prvUnlockQueue+0x4c>
                        {
                            /* The queue is a member of a queue set, and posting to
                             * the queue set caused a higher priority task to unblock.
                             * A context switch is required. */
                            vTaskMissedYield();
 8003a4a:	f000 fe07 	bl	800465c <vTaskMissedYield>
 8003a4e:	e00d      	b.n	8003a6c <prvUnlockQueue+0x4c>
                    else
                    {
                        /* Tasks that are removed from the event list will get
                         * added to the pending ready list as the scheduler is still
                         * suspended. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d012      	beq.n	8003a7e <prvUnlockQueue+0x5e>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	3324      	adds	r3, #36	; 0x24
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f000 fd0f 	bl	8004480 <xTaskRemoveFromEventList>
 8003a62:	4603      	mov	r3, r0
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d001      	beq.n	8003a6c <prvUnlockQueue+0x4c>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                vTaskMissedYield();
 8003a68:	f000 fdf8 	bl	800465c <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8003a6c:	7bfb      	ldrb	r3, [r7, #15]
 8003a6e:	3b01      	subs	r3, #1
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003a74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	dcdc      	bgt.n	8003a36 <prvUnlockQueue+0x16>
 8003a7c:	e000      	b.n	8003a80 <prvUnlockQueue+0x60>
                            break;
 8003a7e:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	22ff      	movs	r2, #255	; 0xff
 8003a84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8003a88:	f001 fd76 	bl	8005578 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8003a8c:	f001 fd44 	bl	8005518 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a96:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003a98:	e011      	b.n	8003abe <prvUnlockQueue+0x9e>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	691b      	ldr	r3, [r3, #16]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d012      	beq.n	8003ac8 <prvUnlockQueue+0xa8>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	3310      	adds	r3, #16
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f000 fcea 	bl	8004480 <xTaskRemoveFromEventList>
 8003aac:	4603      	mov	r3, r0
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d001      	beq.n	8003ab6 <prvUnlockQueue+0x96>
                {
                    vTaskMissedYield();
 8003ab2:	f000 fdd3 	bl	800465c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8003ab6:	7bbb      	ldrb	r3, [r7, #14]
 8003ab8:	3b01      	subs	r3, #1
 8003aba:	b2db      	uxtb	r3, r3
 8003abc:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003abe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	dce9      	bgt.n	8003a9a <prvUnlockQueue+0x7a>
 8003ac6:	e000      	b.n	8003aca <prvUnlockQueue+0xaa>
            }
            else
            {
                break;
 8003ac8:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	22ff      	movs	r2, #255	; 0xff
 8003ace:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8003ad2:	f001 fd51 	bl	8005578 <vPortExitCritical>
}
 8003ad6:	bf00      	nop
 8003ad8:	3710      	adds	r7, #16
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}

08003ade <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8003ade:	b580      	push	{r7, lr}
 8003ae0:	b084      	sub	sp, #16
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003ae6:	f001 fd17 	bl	8005518 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d102      	bne.n	8003af8 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8003af2:	2301      	movs	r3, #1
 8003af4:	60fb      	str	r3, [r7, #12]
 8003af6:	e001      	b.n	8003afc <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8003af8:	2300      	movs	r3, #0
 8003afa:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8003afc:	f001 fd3c 	bl	8005578 <vPortExitCritical>

    return xReturn;
 8003b00:	68fb      	ldr	r3, [r7, #12]
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3710      	adds	r7, #16
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}

08003b0a <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8003b0a:	b580      	push	{r7, lr}
 8003b0c:	b084      	sub	sp, #16
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003b12:	f001 fd01 	bl	8005518 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d102      	bne.n	8003b28 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8003b22:	2301      	movs	r3, #1
 8003b24:	60fb      	str	r3, [r7, #12]
 8003b26:	e001      	b.n	8003b2c <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8003b2c:	f001 fd24 	bl	8005578 <vPortExitCritical>

    return xReturn;
 8003b30:	68fb      	ldr	r3, [r7, #12]
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3710      	adds	r7, #16
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}
	...

08003b3c <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8003b3c:	b480      	push	{r7}
 8003b3e:	b085      	sub	sp, #20
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
 8003b44:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003b46:	2300      	movs	r3, #0
 8003b48:	60fb      	str	r3, [r7, #12]
 8003b4a:	e014      	b.n	8003b76 <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003b4c:	4a0f      	ldr	r2, [pc, #60]	; (8003b8c <vQueueAddToRegistry+0x50>)
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d10b      	bne.n	8003b70 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003b58:	490c      	ldr	r1, [pc, #48]	; (8003b8c <vQueueAddToRegistry+0x50>)
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	683a      	ldr	r2, [r7, #0]
 8003b5e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8003b62:	4a0a      	ldr	r2, [pc, #40]	; (8003b8c <vQueueAddToRegistry+0x50>)
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	00db      	lsls	r3, r3, #3
 8003b68:	4413      	add	r3, r2
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 8003b6e:	e006      	b.n	8003b7e <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	3301      	adds	r3, #1
 8003b74:	60fb      	str	r3, [r7, #12]
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2b04      	cmp	r3, #4
 8003b7a:	d9e7      	bls.n	8003b4c <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8003b7c:	bf00      	nop
 8003b7e:	bf00      	nop
 8003b80:	3714      	adds	r7, #20
 8003b82:	46bd      	mov	sp, r7
 8003b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b88:	4770      	bx	lr
 8003b8a:	bf00      	nop
 8003b8c:	200000c0 	.word	0x200000c0

08003b90 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b086      	sub	sp, #24
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	60f8      	str	r0, [r7, #12]
 8003b98:	60b9      	str	r1, [r7, #8]
 8003b9a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8003ba0:	f001 fcba 	bl	8005518 <vPortEnterCritical>
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003baa:	b25b      	sxtb	r3, r3
 8003bac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bb0:	d103      	bne.n	8003bba <vQueueWaitForMessageRestricted+0x2a>
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003bc0:	b25b      	sxtb	r3, r3
 8003bc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bc6:	d103      	bne.n	8003bd0 <vQueueWaitForMessageRestricted+0x40>
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003bd0:	f001 fcd2 	bl	8005578 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d106      	bne.n	8003bea <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	3324      	adds	r3, #36	; 0x24
 8003be0:	687a      	ldr	r2, [r7, #4]
 8003be2:	68b9      	ldr	r1, [r7, #8]
 8003be4:	4618      	mov	r0, r3
 8003be6:	f000 fc1f 	bl	8004428 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8003bea:	6978      	ldr	r0, [r7, #20]
 8003bec:	f7ff ff18 	bl	8003a20 <prvUnlockQueue>
    }
 8003bf0:	bf00      	nop
 8003bf2:	3718      	adds	r7, #24
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}

08003bf8 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

    static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue )
    {
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b088      	sub	sp, #32
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
        Queue_t * pxQueueSetContainer = pxQueue->pxQueueSetContainer;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c04:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 8003c06:	2300      	movs	r3, #0
 8003c08:	61fb      	str	r3, [r7, #28]

        /* This function must be called form a critical section. */

        configASSERT( pxQueueSetContainer );
 8003c0a:	69bb      	ldr	r3, [r7, #24]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d10a      	bne.n	8003c26 <prvNotifyQueueSetContainer+0x2e>
        __asm volatile
 8003c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c14:	f383 8811 	msr	BASEPRI, r3
 8003c18:	f3bf 8f6f 	isb	sy
 8003c1c:	f3bf 8f4f 	dsb	sy
 8003c20:	613b      	str	r3, [r7, #16]
    }
 8003c22:	bf00      	nop
 8003c24:	e7fe      	b.n	8003c24 <prvNotifyQueueSetContainer+0x2c>
        configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
 8003c26:	69bb      	ldr	r3, [r7, #24]
 8003c28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c2a:	69bb      	ldr	r3, [r7, #24]
 8003c2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d30a      	bcc.n	8003c48 <prvNotifyQueueSetContainer+0x50>
        __asm volatile
 8003c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c36:	f383 8811 	msr	BASEPRI, r3
 8003c3a:	f3bf 8f6f 	isb	sy
 8003c3e:	f3bf 8f4f 	dsb	sy
 8003c42:	60fb      	str	r3, [r7, #12]
    }
 8003c44:	bf00      	nop
 8003c46:	e7fe      	b.n	8003c46 <prvNotifyQueueSetContainer+0x4e>

        if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
 8003c48:	69bb      	ldr	r3, [r7, #24]
 8003c4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c4c:	69bb      	ldr	r3, [r7, #24]
 8003c4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d234      	bcs.n	8003cbe <prvNotifyQueueSetContainer+0xc6>
        {
            const int8_t cTxLock = pxQueueSetContainer->cTxLock;
 8003c54:	69bb      	ldr	r3, [r7, #24]
 8003c56:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c5a:	75fb      	strb	r3, [r7, #23]

            traceQUEUE_SET_SEND( pxQueueSetContainer );

            /* The data copied is the handle of the queue that contains data. */
            xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, queueSEND_TO_BACK );
 8003c5c:	1d3b      	adds	r3, r7, #4
 8003c5e:	2200      	movs	r2, #0
 8003c60:	4619      	mov	r1, r3
 8003c62:	69b8      	ldr	r0, [r7, #24]
 8003c64:	f7ff fe4c 	bl	8003900 <prvCopyDataToQueue>
 8003c68:	61f8      	str	r0, [r7, #28]

            if( cTxLock == queueUNLOCKED )
 8003c6a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003c6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c72:	d10e      	bne.n	8003c92 <prvNotifyQueueSetContainer+0x9a>
            {
                if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
 8003c74:	69bb      	ldr	r3, [r7, #24]
 8003c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d020      	beq.n	8003cbe <prvNotifyQueueSetContainer+0xc6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
 8003c7c:	69bb      	ldr	r3, [r7, #24]
 8003c7e:	3324      	adds	r3, #36	; 0x24
 8003c80:	4618      	mov	r0, r3
 8003c82:	f000 fbfd 	bl	8004480 <xTaskRemoveFromEventList>
 8003c86:	4603      	mov	r3, r0
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d018      	beq.n	8003cbe <prvNotifyQueueSetContainer+0xc6>
                    {
                        /* The task waiting has a higher priority. */
                        xReturn = pdTRUE;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	61fb      	str	r3, [r7, #28]
 8003c90:	e015      	b.n	8003cbe <prvNotifyQueueSetContainer+0xc6>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                configASSERT( cTxLock != queueINT8_MAX );
 8003c92:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003c96:	2b7f      	cmp	r3, #127	; 0x7f
 8003c98:	d10a      	bne.n	8003cb0 <prvNotifyQueueSetContainer+0xb8>
        __asm volatile
 8003c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c9e:	f383 8811 	msr	BASEPRI, r3
 8003ca2:	f3bf 8f6f 	isb	sy
 8003ca6:	f3bf 8f4f 	dsb	sy
 8003caa:	60bb      	str	r3, [r7, #8]
    }
 8003cac:	bf00      	nop
 8003cae:	e7fe      	b.n	8003cae <prvNotifyQueueSetContainer+0xb6>

                pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003cb0:	7dfb      	ldrb	r3, [r7, #23]
 8003cb2:	3301      	adds	r3, #1
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	b25a      	sxtb	r2, r3
 8003cb8:	69bb      	ldr	r3, [r7, #24]
 8003cba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003cbe:	69fb      	ldr	r3, [r7, #28]
    }
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3720      	adds	r7, #32
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}

08003cc8 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b08c      	sub	sp, #48	; 0x30
 8003ccc:	af04      	add	r7, sp, #16
 8003cce:	60f8      	str	r0, [r7, #12]
 8003cd0:	60b9      	str	r1, [r7, #8]
 8003cd2:	603b      	str	r3, [r7, #0]
 8003cd4:	4613      	mov	r3, r2
 8003cd6:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003cd8:	88fb      	ldrh	r3, [r7, #6]
 8003cda:	009b      	lsls	r3, r3, #2
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f001 fd33 	bl	8005748 <pvPortMalloc>
 8003ce2:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d00e      	beq.n	8003d08 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003cea:	2068      	movs	r0, #104	; 0x68
 8003cec:	f001 fd2c 	bl	8005748 <pvPortMalloc>
 8003cf0:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8003cf2:	69fb      	ldr	r3, [r7, #28]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d003      	beq.n	8003d00 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8003cf8:	69fb      	ldr	r3, [r7, #28]
 8003cfa:	697a      	ldr	r2, [r7, #20]
 8003cfc:	631a      	str	r2, [r3, #48]	; 0x30
 8003cfe:	e005      	b.n	8003d0c <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8003d00:	6978      	ldr	r0, [r7, #20]
 8003d02:	f001 fded 	bl	80058e0 <vPortFree>
 8003d06:	e001      	b.n	8003d0c <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8003d0c:	69fb      	ldr	r3, [r7, #28]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d013      	beq.n	8003d3a <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003d12:	88fa      	ldrh	r2, [r7, #6]
 8003d14:	2300      	movs	r3, #0
 8003d16:	9303      	str	r3, [sp, #12]
 8003d18:	69fb      	ldr	r3, [r7, #28]
 8003d1a:	9302      	str	r3, [sp, #8]
 8003d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d1e:	9301      	str	r3, [sp, #4]
 8003d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d22:	9300      	str	r3, [sp, #0]
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	68b9      	ldr	r1, [r7, #8]
 8003d28:	68f8      	ldr	r0, [r7, #12]
 8003d2a:	f000 f80e 	bl	8003d4a <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8003d2e:	69f8      	ldr	r0, [r7, #28]
 8003d30:	f000 f8b2 	bl	8003e98 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8003d34:	2301      	movs	r3, #1
 8003d36:	61bb      	str	r3, [r7, #24]
 8003d38:	e002      	b.n	8003d40 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003d3a:	f04f 33ff 	mov.w	r3, #4294967295
 8003d3e:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8003d40:	69bb      	ldr	r3, [r7, #24]
    }
 8003d42:	4618      	mov	r0, r3
 8003d44:	3720      	adds	r7, #32
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}

08003d4a <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8003d4a:	b580      	push	{r7, lr}
 8003d4c:	b088      	sub	sp, #32
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	60f8      	str	r0, [r7, #12]
 8003d52:	60b9      	str	r1, [r7, #8]
 8003d54:	607a      	str	r2, [r7, #4]
 8003d56:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d5a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	009b      	lsls	r3, r3, #2
 8003d60:	461a      	mov	r2, r3
 8003d62:	21a5      	movs	r1, #165	; 0xa5
 8003d64:	f001 feda 	bl	8005b1c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003d72:	3b01      	subs	r3, #1
 8003d74:	009b      	lsls	r3, r3, #2
 8003d76:	4413      	add	r3, r2
 8003d78:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003d7a:	69bb      	ldr	r3, [r7, #24]
 8003d7c:	f023 0307 	bic.w	r3, r3, #7
 8003d80:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003d82:	69bb      	ldr	r3, [r7, #24]
 8003d84:	f003 0307 	and.w	r3, r3, #7
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d00a      	beq.n	8003da2 <prvInitialiseNewTask+0x58>
        __asm volatile
 8003d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d90:	f383 8811 	msr	BASEPRI, r3
 8003d94:	f3bf 8f6f 	isb	sy
 8003d98:	f3bf 8f4f 	dsb	sy
 8003d9c:	617b      	str	r3, [r7, #20]
    }
 8003d9e:	bf00      	nop
 8003da0:	e7fe      	b.n	8003da0 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d01f      	beq.n	8003de8 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003da8:	2300      	movs	r3, #0
 8003daa:	61fb      	str	r3, [r7, #28]
 8003dac:	e012      	b.n	8003dd4 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003dae:	68ba      	ldr	r2, [r7, #8]
 8003db0:	69fb      	ldr	r3, [r7, #28]
 8003db2:	4413      	add	r3, r2
 8003db4:	7819      	ldrb	r1, [r3, #0]
 8003db6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003db8:	69fb      	ldr	r3, [r7, #28]
 8003dba:	4413      	add	r3, r2
 8003dbc:	3334      	adds	r3, #52	; 0x34
 8003dbe:	460a      	mov	r2, r1
 8003dc0:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8003dc2:	68ba      	ldr	r2, [r7, #8]
 8003dc4:	69fb      	ldr	r3, [r7, #28]
 8003dc6:	4413      	add	r3, r2
 8003dc8:	781b      	ldrb	r3, [r3, #0]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d006      	beq.n	8003ddc <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003dce:	69fb      	ldr	r3, [r7, #28]
 8003dd0:	3301      	adds	r3, #1
 8003dd2:	61fb      	str	r3, [r7, #28]
 8003dd4:	69fb      	ldr	r3, [r7, #28]
 8003dd6:	2b09      	cmp	r3, #9
 8003dd8:	d9e9      	bls.n	8003dae <prvInitialiseNewTask+0x64>
 8003dda:	e000      	b.n	8003dde <prvInitialiseNewTask+0x94>
            {
                break;
 8003ddc:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003de0:	2200      	movs	r2, #0
 8003de2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003de6:	e003      	b.n	8003df0 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dea:	2200      	movs	r2, #0
 8003dec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003df2:	2b04      	cmp	r3, #4
 8003df4:	d901      	bls.n	8003dfa <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003df6:	2304      	movs	r3, #4
 8003df8:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8003dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dfc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003dfe:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8003e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e04:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8003e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e08:	2200      	movs	r2, #0
 8003e0a:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e0e:	3304      	adds	r3, #4
 8003e10:	4618      	mov	r0, r3
 8003e12:	f7ff f946 	bl	80030a2 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e18:	3318      	adds	r3, #24
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f7ff f941 	bl	80030a2 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e24:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e28:	f1c3 0205 	rsb	r2, r3, #5
 8003e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e2e:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e34:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif /* portCRITICAL_NESTING_IN_TCB */

    #if ( configUSE_APPLICATION_TASK_TAG == 1 )
        {
            pxNewTCB->pxTaskTag = NULL;
 8003e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e38:	2200      	movs	r2, #0
 8003e3a:	651a      	str	r2, [r3, #80]	; 0x50
        }
    #endif /* configUSE_APPLICATION_TASK_TAG */

    #if ( configGENERATE_RUN_TIME_STATS == 1 )
        {
            pxNewTCB->ulRunTimeCounter = 0UL;
 8003e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e3e:	2200      	movs	r2, #0
 8003e40:	65da      	str	r2, [r3, #92]	; 0x5c
        }
    #endif

    #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
        {
            memset( ( void * ) &( pxNewTCB->pvThreadLocalStoragePointers[ 0 ] ), 0x00, sizeof( pxNewTCB->pvThreadLocalStoragePointers ) );
 8003e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e44:	3354      	adds	r3, #84	; 0x54
 8003e46:	2208      	movs	r2, #8
 8003e48:	2100      	movs	r1, #0
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f001 fe66 	bl	8005b1c <memset>
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8003e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e52:	3360      	adds	r3, #96	; 0x60
 8003e54:	2204      	movs	r2, #4
 8003e56:	2100      	movs	r1, #0
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f001 fe5f 	bl	8005b1c <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8003e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e60:	3364      	adds	r3, #100	; 0x64
 8003e62:	2201      	movs	r2, #1
 8003e64:	2100      	movs	r1, #0
 8003e66:	4618      	mov	r0, r3
 8003e68:	f001 fe58 	bl	8005b1c <memset>
        }
    #endif

    #if ( INCLUDE_xTaskAbortDelay == 1 )
        {
            pxNewTCB->ucDelayAborted = pdFALSE;
 8003e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e6e:	2200      	movs	r2, #0
 8003e70:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003e74:	683a      	ldr	r2, [r7, #0]
 8003e76:	68f9      	ldr	r1, [r7, #12]
 8003e78:	69b8      	ldr	r0, [r7, #24]
 8003e7a:	f001 fa21 	bl	80052c0 <pxPortInitialiseStack>
 8003e7e:	4602      	mov	r2, r0
 8003e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e82:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8003e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d002      	beq.n	8003e90 <prvInitialiseNewTask+0x146>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e8e:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003e90:	bf00      	nop
 8003e92:	3720      	adds	r7, #32
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}

08003e98 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b082      	sub	sp, #8
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8003ea0:	f001 fb3a 	bl	8005518 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8003ea4:	4b2c      	ldr	r3, [pc, #176]	; (8003f58 <prvAddNewTaskToReadyList+0xc0>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	3301      	adds	r3, #1
 8003eaa:	4a2b      	ldr	r2, [pc, #172]	; (8003f58 <prvAddNewTaskToReadyList+0xc0>)
 8003eac:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8003eae:	4b2b      	ldr	r3, [pc, #172]	; (8003f5c <prvAddNewTaskToReadyList+0xc4>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d109      	bne.n	8003eca <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8003eb6:	4a29      	ldr	r2, [pc, #164]	; (8003f5c <prvAddNewTaskToReadyList+0xc4>)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003ebc:	4b26      	ldr	r3, [pc, #152]	; (8003f58 <prvAddNewTaskToReadyList+0xc0>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d110      	bne.n	8003ee6 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8003ec4:	f000 fbee 	bl	80046a4 <prvInitialiseTaskLists>
 8003ec8:	e00d      	b.n	8003ee6 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8003eca:	4b25      	ldr	r3, [pc, #148]	; (8003f60 <prvAddNewTaskToReadyList+0xc8>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d109      	bne.n	8003ee6 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003ed2:	4b22      	ldr	r3, [pc, #136]	; (8003f5c <prvAddNewTaskToReadyList+0xc4>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d802      	bhi.n	8003ee6 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8003ee0:	4a1e      	ldr	r2, [pc, #120]	; (8003f5c <prvAddNewTaskToReadyList+0xc4>)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8003ee6:	4b1f      	ldr	r3, [pc, #124]	; (8003f64 <prvAddNewTaskToReadyList+0xcc>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	3301      	adds	r3, #1
 8003eec:	4a1d      	ldr	r2, [pc, #116]	; (8003f64 <prvAddNewTaskToReadyList+0xcc>)
 8003eee:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003ef0:	4b1c      	ldr	r3, [pc, #112]	; (8003f64 <prvAddNewTaskToReadyList+0xcc>)
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003efc:	2201      	movs	r2, #1
 8003efe:	409a      	lsls	r2, r3
 8003f00:	4b19      	ldr	r3, [pc, #100]	; (8003f68 <prvAddNewTaskToReadyList+0xd0>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4313      	orrs	r3, r2
 8003f06:	4a18      	ldr	r2, [pc, #96]	; (8003f68 <prvAddNewTaskToReadyList+0xd0>)
 8003f08:	6013      	str	r3, [r2, #0]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f0e:	4613      	mov	r3, r2
 8003f10:	009b      	lsls	r3, r3, #2
 8003f12:	4413      	add	r3, r2
 8003f14:	009b      	lsls	r3, r3, #2
 8003f16:	4a15      	ldr	r2, [pc, #84]	; (8003f6c <prvAddNewTaskToReadyList+0xd4>)
 8003f18:	441a      	add	r2, r3
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	3304      	adds	r3, #4
 8003f1e:	4619      	mov	r1, r3
 8003f20:	4610      	mov	r0, r2
 8003f22:	f7ff f8cb 	bl	80030bc <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8003f26:	f001 fb27 	bl	8005578 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8003f2a:	4b0d      	ldr	r3, [pc, #52]	; (8003f60 <prvAddNewTaskToReadyList+0xc8>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d00e      	beq.n	8003f50 <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003f32:	4b0a      	ldr	r3, [pc, #40]	; (8003f5c <prvAddNewTaskToReadyList+0xc4>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d207      	bcs.n	8003f50 <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8003f40:	4b0b      	ldr	r3, [pc, #44]	; (8003f70 <prvAddNewTaskToReadyList+0xd8>)
 8003f42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f46:	601a      	str	r2, [r3, #0]
 8003f48:	f3bf 8f4f 	dsb	sy
 8003f4c:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003f50:	bf00      	nop
 8003f52:	3708      	adds	r7, #8
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}
 8003f58:	200001c0 	.word	0x200001c0
 8003f5c:	200000e8 	.word	0x200000e8
 8003f60:	200001cc 	.word	0x200001cc
 8003f64:	200001dc 	.word	0x200001dc
 8003f68:	200001c8 	.word	0x200001c8
 8003f6c:	200000ec 	.word	0x200000ec
 8003f70:	e000ed04 	.word	0xe000ed04

08003f74 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b086      	sub	sp, #24
 8003f78:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8003f7a:	4b1f      	ldr	r3, [pc, #124]	; (8003ff8 <vTaskStartScheduler+0x84>)
 8003f7c:	9301      	str	r3, [sp, #4]
 8003f7e:	2300      	movs	r3, #0
 8003f80:	9300      	str	r3, [sp, #0]
 8003f82:	2300      	movs	r3, #0
 8003f84:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f88:	491c      	ldr	r1, [pc, #112]	; (8003ffc <vTaskStartScheduler+0x88>)
 8003f8a:	481d      	ldr	r0, [pc, #116]	; (8004000 <vTaskStartScheduler+0x8c>)
 8003f8c:	f7ff fe9c 	bl	8003cc8 <xTaskCreate>
 8003f90:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d102      	bne.n	8003f9e <vTaskStartScheduler+0x2a>
            {
                xReturn = xTimerCreateTimerTask();
 8003f98:	f000 fe80 	bl	8004c9c <xTimerCreateTimerTask>
 8003f9c:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d116      	bne.n	8003fd2 <vTaskStartScheduler+0x5e>
        __asm volatile
 8003fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fa8:	f383 8811 	msr	BASEPRI, r3
 8003fac:	f3bf 8f6f 	isb	sy
 8003fb0:	f3bf 8f4f 	dsb	sy
 8003fb4:	60bb      	str	r3, [r7, #8]
    }
 8003fb6:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8003fb8:	4b12      	ldr	r3, [pc, #72]	; (8004004 <vTaskStartScheduler+0x90>)
 8003fba:	f04f 32ff 	mov.w	r2, #4294967295
 8003fbe:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8003fc0:	4b11      	ldr	r3, [pc, #68]	; (8004008 <vTaskStartScheduler+0x94>)
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003fc6:	4b11      	ldr	r3, [pc, #68]	; (800400c <vTaskStartScheduler+0x98>)
 8003fc8:	2200      	movs	r2, #0
 8003fca:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8003fcc:	f001 fa02 	bl	80053d4 <xPortStartScheduler>
    }

    /* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;
}
 8003fd0:	e00e      	b.n	8003ff0 <vTaskStartScheduler+0x7c>
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fd8:	d10a      	bne.n	8003ff0 <vTaskStartScheduler+0x7c>
        __asm volatile
 8003fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fde:	f383 8811 	msr	BASEPRI, r3
 8003fe2:	f3bf 8f6f 	isb	sy
 8003fe6:	f3bf 8f4f 	dsb	sy
 8003fea:	607b      	str	r3, [r7, #4]
    }
 8003fec:	bf00      	nop
 8003fee:	e7fe      	b.n	8003fee <vTaskStartScheduler+0x7a>
}
 8003ff0:	bf00      	nop
 8003ff2:	3710      	adds	r7, #16
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}
 8003ff8:	200001e4 	.word	0x200001e4
 8003ffc:	08005bcc 	.word	0x08005bcc
 8004000:	08004675 	.word	0x08004675
 8004004:	200001e0 	.word	0x200001e0
 8004008:	200001cc 	.word	0x200001cc
 800400c:	200001c4 	.word	0x200001c4

08004010 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004010:	b480      	push	{r7}
 8004012:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8004014:	4b04      	ldr	r3, [pc, #16]	; (8004028 <vTaskSuspendAll+0x18>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	3301      	adds	r3, #1
 800401a:	4a03      	ldr	r2, [pc, #12]	; (8004028 <vTaskSuspendAll+0x18>)
 800401c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800401e:	bf00      	nop
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr
 8004028:	200001e8 	.word	0x200001e8

0800402c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b084      	sub	sp, #16
 8004030:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8004032:	2300      	movs	r3, #0
 8004034:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8004036:	2300      	movs	r3, #0
 8004038:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800403a:	4b41      	ldr	r3, [pc, #260]	; (8004140 <xTaskResumeAll+0x114>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d10a      	bne.n	8004058 <xTaskResumeAll+0x2c>
        __asm volatile
 8004042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004046:	f383 8811 	msr	BASEPRI, r3
 800404a:	f3bf 8f6f 	isb	sy
 800404e:	f3bf 8f4f 	dsb	sy
 8004052:	603b      	str	r3, [r7, #0]
    }
 8004054:	bf00      	nop
 8004056:	e7fe      	b.n	8004056 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8004058:	f001 fa5e 	bl	8005518 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800405c:	4b38      	ldr	r3, [pc, #224]	; (8004140 <xTaskResumeAll+0x114>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	3b01      	subs	r3, #1
 8004062:	4a37      	ldr	r2, [pc, #220]	; (8004140 <xTaskResumeAll+0x114>)
 8004064:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004066:	4b36      	ldr	r3, [pc, #216]	; (8004140 <xTaskResumeAll+0x114>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d161      	bne.n	8004132 <xTaskResumeAll+0x106>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800406e:	4b35      	ldr	r3, [pc, #212]	; (8004144 <xTaskResumeAll+0x118>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d05d      	beq.n	8004132 <xTaskResumeAll+0x106>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004076:	e02e      	b.n	80040d6 <xTaskResumeAll+0xaa>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004078:	4b33      	ldr	r3, [pc, #204]	; (8004148 <xTaskResumeAll+0x11c>)
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	68db      	ldr	r3, [r3, #12]
 800407e:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	3318      	adds	r3, #24
 8004084:	4618      	mov	r0, r3
 8004086:	f7ff f876 	bl	8003176 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	3304      	adds	r3, #4
 800408e:	4618      	mov	r0, r3
 8004090:	f7ff f871 	bl	8003176 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004098:	2201      	movs	r2, #1
 800409a:	409a      	lsls	r2, r3
 800409c:	4b2b      	ldr	r3, [pc, #172]	; (800414c <xTaskResumeAll+0x120>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4313      	orrs	r3, r2
 80040a2:	4a2a      	ldr	r2, [pc, #168]	; (800414c <xTaskResumeAll+0x120>)
 80040a4:	6013      	str	r3, [r2, #0]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040aa:	4613      	mov	r3, r2
 80040ac:	009b      	lsls	r3, r3, #2
 80040ae:	4413      	add	r3, r2
 80040b0:	009b      	lsls	r3, r3, #2
 80040b2:	4a27      	ldr	r2, [pc, #156]	; (8004150 <xTaskResumeAll+0x124>)
 80040b4:	441a      	add	r2, r3
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	3304      	adds	r3, #4
 80040ba:	4619      	mov	r1, r3
 80040bc:	4610      	mov	r0, r2
 80040be:	f7fe fffd 	bl	80030bc <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040c6:	4b23      	ldr	r3, [pc, #140]	; (8004154 <xTaskResumeAll+0x128>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040cc:	429a      	cmp	r2, r3
 80040ce:	d302      	bcc.n	80040d6 <xTaskResumeAll+0xaa>
                    {
                        xYieldPending = pdTRUE;
 80040d0:	4b21      	ldr	r3, [pc, #132]	; (8004158 <xTaskResumeAll+0x12c>)
 80040d2:	2201      	movs	r2, #1
 80040d4:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80040d6:	4b1c      	ldr	r3, [pc, #112]	; (8004148 <xTaskResumeAll+0x11c>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d1cc      	bne.n	8004078 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d001      	beq.n	80040e8 <xTaskResumeAll+0xbc>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80040e4:	f000 fb5c 	bl	80047a0 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80040e8:	4b1c      	ldr	r3, [pc, #112]	; (800415c <xTaskResumeAll+0x130>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d010      	beq.n	8004116 <xTaskResumeAll+0xea>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80040f4:	f000 f846 	bl	8004184 <xTaskIncrementTick>
 80040f8:	4603      	mov	r3, r0
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d002      	beq.n	8004104 <xTaskResumeAll+0xd8>
                            {
                                xYieldPending = pdTRUE;
 80040fe:	4b16      	ldr	r3, [pc, #88]	; (8004158 <xTaskResumeAll+0x12c>)
 8004100:	2201      	movs	r2, #1
 8004102:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	3b01      	subs	r3, #1
 8004108:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d1f1      	bne.n	80040f4 <xTaskResumeAll+0xc8>

                        xPendedTicks = 0;
 8004110:	4b12      	ldr	r3, [pc, #72]	; (800415c <xTaskResumeAll+0x130>)
 8004112:	2200      	movs	r2, #0
 8004114:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8004116:	4b10      	ldr	r3, [pc, #64]	; (8004158 <xTaskResumeAll+0x12c>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d009      	beq.n	8004132 <xTaskResumeAll+0x106>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800411e:	2301      	movs	r3, #1
 8004120:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8004122:	4b0f      	ldr	r3, [pc, #60]	; (8004160 <xTaskResumeAll+0x134>)
 8004124:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004128:	601a      	str	r2, [r3, #0]
 800412a:	f3bf 8f4f 	dsb	sy
 800412e:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8004132:	f001 fa21 	bl	8005578 <vPortExitCritical>

    return xAlreadyYielded;
 8004136:	68bb      	ldr	r3, [r7, #8]
}
 8004138:	4618      	mov	r0, r3
 800413a:	3710      	adds	r7, #16
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}
 8004140:	200001e8 	.word	0x200001e8
 8004144:	200001c0 	.word	0x200001c0
 8004148:	20000180 	.word	0x20000180
 800414c:	200001c8 	.word	0x200001c8
 8004150:	200000ec 	.word	0x200000ec
 8004154:	200000e8 	.word	0x200000e8
 8004158:	200001d4 	.word	0x200001d4
 800415c:	200001d0 	.word	0x200001d0
 8004160:	e000ed04 	.word	0xe000ed04

08004164 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004164:	b480      	push	{r7}
 8004166:	b083      	sub	sp, #12
 8004168:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800416a:	4b05      	ldr	r3, [pc, #20]	; (8004180 <xTaskGetTickCount+0x1c>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8004170:	687b      	ldr	r3, [r7, #4]
}
 8004172:	4618      	mov	r0, r3
 8004174:	370c      	adds	r7, #12
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr
 800417e:	bf00      	nop
 8004180:	200001c4 	.word	0x200001c4

08004184 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b086      	sub	sp, #24
 8004188:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800418a:	2300      	movs	r3, #0
 800418c:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800418e:	4b4e      	ldr	r3, [pc, #312]	; (80042c8 <xTaskIncrementTick+0x144>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	2b00      	cmp	r3, #0
 8004194:	f040 808e 	bne.w	80042b4 <xTaskIncrementTick+0x130>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004198:	4b4c      	ldr	r3, [pc, #304]	; (80042cc <xTaskIncrementTick+0x148>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	3301      	adds	r3, #1
 800419e:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80041a0:	4a4a      	ldr	r2, [pc, #296]	; (80042cc <xTaskIncrementTick+0x148>)
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d120      	bne.n	80041ee <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80041ac:	4b48      	ldr	r3, [pc, #288]	; (80042d0 <xTaskIncrementTick+0x14c>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d00a      	beq.n	80041cc <xTaskIncrementTick+0x48>
        __asm volatile
 80041b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ba:	f383 8811 	msr	BASEPRI, r3
 80041be:	f3bf 8f6f 	isb	sy
 80041c2:	f3bf 8f4f 	dsb	sy
 80041c6:	603b      	str	r3, [r7, #0]
    }
 80041c8:	bf00      	nop
 80041ca:	e7fe      	b.n	80041ca <xTaskIncrementTick+0x46>
 80041cc:	4b40      	ldr	r3, [pc, #256]	; (80042d0 <xTaskIncrementTick+0x14c>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	60fb      	str	r3, [r7, #12]
 80041d2:	4b40      	ldr	r3, [pc, #256]	; (80042d4 <xTaskIncrementTick+0x150>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a3e      	ldr	r2, [pc, #248]	; (80042d0 <xTaskIncrementTick+0x14c>)
 80041d8:	6013      	str	r3, [r2, #0]
 80041da:	4a3e      	ldr	r2, [pc, #248]	; (80042d4 <xTaskIncrementTick+0x150>)
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	6013      	str	r3, [r2, #0]
 80041e0:	4b3d      	ldr	r3, [pc, #244]	; (80042d8 <xTaskIncrementTick+0x154>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	3301      	adds	r3, #1
 80041e6:	4a3c      	ldr	r2, [pc, #240]	; (80042d8 <xTaskIncrementTick+0x154>)
 80041e8:	6013      	str	r3, [r2, #0]
 80041ea:	f000 fad9 	bl	80047a0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80041ee:	4b3b      	ldr	r3, [pc, #236]	; (80042dc <xTaskIncrementTick+0x158>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	693a      	ldr	r2, [r7, #16]
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d348      	bcc.n	800428a <xTaskIncrementTick+0x106>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80041f8:	4b35      	ldr	r3, [pc, #212]	; (80042d0 <xTaskIncrementTick+0x14c>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d104      	bne.n	800420c <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004202:	4b36      	ldr	r3, [pc, #216]	; (80042dc <xTaskIncrementTick+0x158>)
 8004204:	f04f 32ff 	mov.w	r2, #4294967295
 8004208:	601a      	str	r2, [r3, #0]
                    break;
 800420a:	e03e      	b.n	800428a <xTaskIncrementTick+0x106>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800420c:	4b30      	ldr	r3, [pc, #192]	; (80042d0 <xTaskIncrementTick+0x14c>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	68db      	ldr	r3, [r3, #12]
 8004212:	68db      	ldr	r3, [r3, #12]
 8004214:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 800421c:	693a      	ldr	r2, [r7, #16]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	429a      	cmp	r2, r3
 8004222:	d203      	bcs.n	800422c <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8004224:	4a2d      	ldr	r2, [pc, #180]	; (80042dc <xTaskIncrementTick+0x158>)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800422a:	e02e      	b.n	800428a <xTaskIncrementTick+0x106>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	3304      	adds	r3, #4
 8004230:	4618      	mov	r0, r3
 8004232:	f7fe ffa0 	bl	8003176 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800423a:	2b00      	cmp	r3, #0
 800423c:	d004      	beq.n	8004248 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	3318      	adds	r3, #24
 8004242:	4618      	mov	r0, r3
 8004244:	f7fe ff97 	bl	8003176 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800424c:	2201      	movs	r2, #1
 800424e:	409a      	lsls	r2, r3
 8004250:	4b23      	ldr	r3, [pc, #140]	; (80042e0 <xTaskIncrementTick+0x15c>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4313      	orrs	r3, r2
 8004256:	4a22      	ldr	r2, [pc, #136]	; (80042e0 <xTaskIncrementTick+0x15c>)
 8004258:	6013      	str	r3, [r2, #0]
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800425e:	4613      	mov	r3, r2
 8004260:	009b      	lsls	r3, r3, #2
 8004262:	4413      	add	r3, r2
 8004264:	009b      	lsls	r3, r3, #2
 8004266:	4a1f      	ldr	r2, [pc, #124]	; (80042e4 <xTaskIncrementTick+0x160>)
 8004268:	441a      	add	r2, r3
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	3304      	adds	r3, #4
 800426e:	4619      	mov	r1, r3
 8004270:	4610      	mov	r0, r2
 8004272:	f7fe ff23 	bl	80030bc <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800427a:	4b1b      	ldr	r3, [pc, #108]	; (80042e8 <xTaskIncrementTick+0x164>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004280:	429a      	cmp	r2, r3
 8004282:	d3b9      	bcc.n	80041f8 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8004284:	2301      	movs	r3, #1
 8004286:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004288:	e7b6      	b.n	80041f8 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800428a:	4b17      	ldr	r3, [pc, #92]	; (80042e8 <xTaskIncrementTick+0x164>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004290:	4914      	ldr	r1, [pc, #80]	; (80042e4 <xTaskIncrementTick+0x160>)
 8004292:	4613      	mov	r3, r2
 8004294:	009b      	lsls	r3, r3, #2
 8004296:	4413      	add	r3, r2
 8004298:	009b      	lsls	r3, r3, #2
 800429a:	440b      	add	r3, r1
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	2b01      	cmp	r3, #1
 80042a0:	d901      	bls.n	80042a6 <xTaskIncrementTick+0x122>
                {
                    xSwitchRequired = pdTRUE;
 80042a2:	2301      	movs	r3, #1
 80042a4:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 80042a6:	4b11      	ldr	r3, [pc, #68]	; (80042ec <xTaskIncrementTick+0x168>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d007      	beq.n	80042be <xTaskIncrementTick+0x13a>
                {
                    xSwitchRequired = pdTRUE;
 80042ae:	2301      	movs	r3, #1
 80042b0:	617b      	str	r3, [r7, #20]
 80042b2:	e004      	b.n	80042be <xTaskIncrementTick+0x13a>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80042b4:	4b0e      	ldr	r3, [pc, #56]	; (80042f0 <xTaskIncrementTick+0x16c>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	3301      	adds	r3, #1
 80042ba:	4a0d      	ldr	r2, [pc, #52]	; (80042f0 <xTaskIncrementTick+0x16c>)
 80042bc:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80042be:	697b      	ldr	r3, [r7, #20]
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	3718      	adds	r7, #24
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}
 80042c8:	200001e8 	.word	0x200001e8
 80042cc:	200001c4 	.word	0x200001c4
 80042d0:	20000178 	.word	0x20000178
 80042d4:	2000017c 	.word	0x2000017c
 80042d8:	200001d8 	.word	0x200001d8
 80042dc:	200001e0 	.word	0x200001e0
 80042e0:	200001c8 	.word	0x200001c8
 80042e4:	200000ec 	.word	0x200000ec
 80042e8:	200000e8 	.word	0x200000e8
 80042ec:	200001d4 	.word	0x200001d4
 80042f0:	200001d0 	.word	0x200001d0

080042f4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80042f4:	b480      	push	{r7}
 80042f6:	b087      	sub	sp, #28
 80042f8:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80042fa:	4b32      	ldr	r3, [pc, #200]	; (80043c4 <vTaskSwitchContext+0xd0>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d003      	beq.n	800430a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8004302:	4b31      	ldr	r3, [pc, #196]	; (80043c8 <vTaskSwitchContext+0xd4>)
 8004304:	2201      	movs	r2, #1
 8004306:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8004308:	e056      	b.n	80043b8 <vTaskSwitchContext+0xc4>
        xYieldPending = pdFALSE;
 800430a:	4b2f      	ldr	r3, [pc, #188]	; (80043c8 <vTaskSwitchContext+0xd4>)
 800430c:	2200      	movs	r2, #0
 800430e:	601a      	str	r2, [r3, #0]
                    ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8004310:	4b2e      	ldr	r3, [pc, #184]	; (80043cc <vTaskSwitchContext+0xd8>)
 8004312:	2200      	movs	r2, #0
 8004314:	601a      	str	r2, [r3, #0]
                if( ulTotalRunTime > ulTaskSwitchedInTime )
 8004316:	4b2d      	ldr	r3, [pc, #180]	; (80043cc <vTaskSwitchContext+0xd8>)
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	4b2d      	ldr	r3, [pc, #180]	; (80043d0 <vTaskSwitchContext+0xdc>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	429a      	cmp	r2, r3
 8004320:	d909      	bls.n	8004336 <vTaskSwitchContext+0x42>
                    pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8004322:	4b2a      	ldr	r3, [pc, #168]	; (80043cc <vTaskSwitchContext+0xd8>)
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	4b2a      	ldr	r3, [pc, #168]	; (80043d0 <vTaskSwitchContext+0xdc>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	1ad1      	subs	r1, r2, r3
 800432c:	4b29      	ldr	r3, [pc, #164]	; (80043d4 <vTaskSwitchContext+0xe0>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004332:	440a      	add	r2, r1
 8004334:	65da      	str	r2, [r3, #92]	; 0x5c
                ulTaskSwitchedInTime = ulTotalRunTime;
 8004336:	4b25      	ldr	r3, [pc, #148]	; (80043cc <vTaskSwitchContext+0xd8>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a25      	ldr	r2, [pc, #148]	; (80043d0 <vTaskSwitchContext+0xdc>)
 800433c:	6013      	str	r3, [r2, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800433e:	4b26      	ldr	r3, [pc, #152]	; (80043d8 <vTaskSwitchContext+0xe4>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	fab3 f383 	clz	r3, r3
 800434a:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800434c:	7afb      	ldrb	r3, [r7, #11]
 800434e:	f1c3 031f 	rsb	r3, r3, #31
 8004352:	617b      	str	r3, [r7, #20]
 8004354:	4921      	ldr	r1, [pc, #132]	; (80043dc <vTaskSwitchContext+0xe8>)
 8004356:	697a      	ldr	r2, [r7, #20]
 8004358:	4613      	mov	r3, r2
 800435a:	009b      	lsls	r3, r3, #2
 800435c:	4413      	add	r3, r2
 800435e:	009b      	lsls	r3, r3, #2
 8004360:	440b      	add	r3, r1
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d10a      	bne.n	800437e <vTaskSwitchContext+0x8a>
        __asm volatile
 8004368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800436c:	f383 8811 	msr	BASEPRI, r3
 8004370:	f3bf 8f6f 	isb	sy
 8004374:	f3bf 8f4f 	dsb	sy
 8004378:	607b      	str	r3, [r7, #4]
    }
 800437a:	bf00      	nop
 800437c:	e7fe      	b.n	800437c <vTaskSwitchContext+0x88>
 800437e:	697a      	ldr	r2, [r7, #20]
 8004380:	4613      	mov	r3, r2
 8004382:	009b      	lsls	r3, r3, #2
 8004384:	4413      	add	r3, r2
 8004386:	009b      	lsls	r3, r3, #2
 8004388:	4a14      	ldr	r2, [pc, #80]	; (80043dc <vTaskSwitchContext+0xe8>)
 800438a:	4413      	add	r3, r2
 800438c:	613b      	str	r3, [r7, #16]
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	685a      	ldr	r2, [r3, #4]
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	605a      	str	r2, [r3, #4]
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	685a      	ldr	r2, [r3, #4]
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	3308      	adds	r3, #8
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d104      	bne.n	80043ae <vTaskSwitchContext+0xba>
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	685a      	ldr	r2, [r3, #4]
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	605a      	str	r2, [r3, #4]
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	4a07      	ldr	r2, [pc, #28]	; (80043d4 <vTaskSwitchContext+0xe0>)
 80043b6:	6013      	str	r3, [r2, #0]
}
 80043b8:	bf00      	nop
 80043ba:	371c      	adds	r7, #28
 80043bc:	46bd      	mov	sp, r7
 80043be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c2:	4770      	bx	lr
 80043c4:	200001e8 	.word	0x200001e8
 80043c8:	200001d4 	.word	0x200001d4
 80043cc:	200001f0 	.word	0x200001f0
 80043d0:	200001ec 	.word	0x200001ec
 80043d4:	200000e8 	.word	0x200000e8
 80043d8:	200001c8 	.word	0x200001c8
 80043dc:	200000ec 	.word	0x200000ec

080043e0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b084      	sub	sp, #16
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
 80043e8:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d10a      	bne.n	8004406 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 80043f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043f4:	f383 8811 	msr	BASEPRI, r3
 80043f8:	f3bf 8f6f 	isb	sy
 80043fc:	f3bf 8f4f 	dsb	sy
 8004400:	60fb      	str	r3, [r7, #12]
    }
 8004402:	bf00      	nop
 8004404:	e7fe      	b.n	8004404 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004406:	4b07      	ldr	r3, [pc, #28]	; (8004424 <vTaskPlaceOnEventList+0x44>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	3318      	adds	r3, #24
 800440c:	4619      	mov	r1, r3
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f7fe fe78 	bl	8003104 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004414:	2101      	movs	r1, #1
 8004416:	6838      	ldr	r0, [r7, #0]
 8004418:	f000 fbd6 	bl	8004bc8 <prvAddCurrentTaskToDelayedList>
}
 800441c:	bf00      	nop
 800441e:	3710      	adds	r7, #16
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}
 8004424:	200000e8 	.word	0x200000e8

08004428 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8004428:	b580      	push	{r7, lr}
 800442a:	b086      	sub	sp, #24
 800442c:	af00      	add	r7, sp, #0
 800442e:	60f8      	str	r0, [r7, #12]
 8004430:	60b9      	str	r1, [r7, #8]
 8004432:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d10a      	bne.n	8004450 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 800443a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800443e:	f383 8811 	msr	BASEPRI, r3
 8004442:	f3bf 8f6f 	isb	sy
 8004446:	f3bf 8f4f 	dsb	sy
 800444a:	617b      	str	r3, [r7, #20]
    }
 800444c:	bf00      	nop
 800444e:	e7fe      	b.n	800444e <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004450:	4b0a      	ldr	r3, [pc, #40]	; (800447c <vTaskPlaceOnEventListRestricted+0x54>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	3318      	adds	r3, #24
 8004456:	4619      	mov	r1, r3
 8004458:	68f8      	ldr	r0, [r7, #12]
 800445a:	f7fe fe2f 	bl	80030bc <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d002      	beq.n	800446a <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8004464:	f04f 33ff 	mov.w	r3, #4294967295
 8004468:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800446a:	6879      	ldr	r1, [r7, #4]
 800446c:	68b8      	ldr	r0, [r7, #8]
 800446e:	f000 fbab 	bl	8004bc8 <prvAddCurrentTaskToDelayedList>
    }
 8004472:	bf00      	nop
 8004474:	3718      	adds	r7, #24
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
 800447a:	bf00      	nop
 800447c:	200000e8 	.word	0x200000e8

08004480 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b086      	sub	sp, #24
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	68db      	ldr	r3, [r3, #12]
 800448c:	68db      	ldr	r3, [r3, #12]
 800448e:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d10a      	bne.n	80044ac <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8004496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800449a:	f383 8811 	msr	BASEPRI, r3
 800449e:	f3bf 8f6f 	isb	sy
 80044a2:	f3bf 8f4f 	dsb	sy
 80044a6:	60fb      	str	r3, [r7, #12]
    }
 80044a8:	bf00      	nop
 80044aa:	e7fe      	b.n	80044aa <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	3318      	adds	r3, #24
 80044b0:	4618      	mov	r0, r3
 80044b2:	f7fe fe60 	bl	8003176 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80044b6:	4b1d      	ldr	r3, [pc, #116]	; (800452c <xTaskRemoveFromEventList+0xac>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d11c      	bne.n	80044f8 <xTaskRemoveFromEventList+0x78>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	3304      	adds	r3, #4
 80044c2:	4618      	mov	r0, r3
 80044c4:	f7fe fe57 	bl	8003176 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044cc:	2201      	movs	r2, #1
 80044ce:	409a      	lsls	r2, r3
 80044d0:	4b17      	ldr	r3, [pc, #92]	; (8004530 <xTaskRemoveFromEventList+0xb0>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4313      	orrs	r3, r2
 80044d6:	4a16      	ldr	r2, [pc, #88]	; (8004530 <xTaskRemoveFromEventList+0xb0>)
 80044d8:	6013      	str	r3, [r2, #0]
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044de:	4613      	mov	r3, r2
 80044e0:	009b      	lsls	r3, r3, #2
 80044e2:	4413      	add	r3, r2
 80044e4:	009b      	lsls	r3, r3, #2
 80044e6:	4a13      	ldr	r2, [pc, #76]	; (8004534 <xTaskRemoveFromEventList+0xb4>)
 80044e8:	441a      	add	r2, r3
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	3304      	adds	r3, #4
 80044ee:	4619      	mov	r1, r3
 80044f0:	4610      	mov	r0, r2
 80044f2:	f7fe fde3 	bl	80030bc <vListInsertEnd>
 80044f6:	e005      	b.n	8004504 <xTaskRemoveFromEventList+0x84>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	3318      	adds	r3, #24
 80044fc:	4619      	mov	r1, r3
 80044fe:	480e      	ldr	r0, [pc, #56]	; (8004538 <xTaskRemoveFromEventList+0xb8>)
 8004500:	f7fe fddc 	bl	80030bc <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004508:	4b0c      	ldr	r3, [pc, #48]	; (800453c <xTaskRemoveFromEventList+0xbc>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800450e:	429a      	cmp	r2, r3
 8004510:	d905      	bls.n	800451e <xTaskRemoveFromEventList+0x9e>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8004512:	2301      	movs	r3, #1
 8004514:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8004516:	4b0a      	ldr	r3, [pc, #40]	; (8004540 <xTaskRemoveFromEventList+0xc0>)
 8004518:	2201      	movs	r2, #1
 800451a:	601a      	str	r2, [r3, #0]
 800451c:	e001      	b.n	8004522 <xTaskRemoveFromEventList+0xa2>
    }
    else
    {
        xReturn = pdFALSE;
 800451e:	2300      	movs	r3, #0
 8004520:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8004522:	697b      	ldr	r3, [r7, #20]
}
 8004524:	4618      	mov	r0, r3
 8004526:	3718      	adds	r7, #24
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}
 800452c:	200001e8 	.word	0x200001e8
 8004530:	200001c8 	.word	0x200001c8
 8004534:	200000ec 	.word	0x200000ec
 8004538:	20000180 	.word	0x20000180
 800453c:	200000e8 	.word	0x200000e8
 8004540:	200001d4 	.word	0x200001d4

08004544 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004544:	b480      	push	{r7}
 8004546:	b083      	sub	sp, #12
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800454c:	4b06      	ldr	r3, [pc, #24]	; (8004568 <vTaskInternalSetTimeOutState+0x24>)
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8004554:	4b05      	ldr	r3, [pc, #20]	; (800456c <vTaskInternalSetTimeOutState+0x28>)
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	605a      	str	r2, [r3, #4]
}
 800455c:	bf00      	nop
 800455e:	370c      	adds	r7, #12
 8004560:	46bd      	mov	sp, r7
 8004562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004566:	4770      	bx	lr
 8004568:	200001d8 	.word	0x200001d8
 800456c:	200001c4 	.word	0x200001c4

08004570 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b088      	sub	sp, #32
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d10a      	bne.n	8004596 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8004580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004584:	f383 8811 	msr	BASEPRI, r3
 8004588:	f3bf 8f6f 	isb	sy
 800458c:	f3bf 8f4f 	dsb	sy
 8004590:	613b      	str	r3, [r7, #16]
    }
 8004592:	bf00      	nop
 8004594:	e7fe      	b.n	8004594 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d10a      	bne.n	80045b2 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 800459c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045a0:	f383 8811 	msr	BASEPRI, r3
 80045a4:	f3bf 8f6f 	isb	sy
 80045a8:	f3bf 8f4f 	dsb	sy
 80045ac:	60fb      	str	r3, [r7, #12]
    }
 80045ae:	bf00      	nop
 80045b0:	e7fe      	b.n	80045b0 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 80045b2:	f000 ffb1 	bl	8005518 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80045b6:	4b26      	ldr	r3, [pc, #152]	; (8004650 <xTaskCheckForTimeOut+0xe0>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	69ba      	ldr	r2, [r7, #24]
 80045c2:	1ad3      	subs	r3, r2, r3
 80045c4:	617b      	str	r3, [r7, #20]

        #if ( INCLUDE_xTaskAbortDelay == 1 )
            if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
 80045c6:	4b23      	ldr	r3, [pc, #140]	; (8004654 <xTaskCheckForTimeOut+0xe4>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d007      	beq.n	80045e2 <xTaskCheckForTimeOut+0x72>
            {
                /* The delay was aborted, which is not the same as a time out,
                 * but has the same result. */
                pxCurrentTCB->ucDelayAborted = pdFALSE;
 80045d2:	4b20      	ldr	r3, [pc, #128]	; (8004654 <xTaskCheckForTimeOut+0xe4>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	2200      	movs	r2, #0
 80045d8:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
                xReturn = pdTRUE;
 80045dc:	2301      	movs	r3, #1
 80045de:	61fb      	str	r3, [r7, #28]
 80045e0:	e02e      	b.n	8004640 <xTaskCheckForTimeOut+0xd0>
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045ea:	d102      	bne.n	80045f2 <xTaskCheckForTimeOut+0x82>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80045ec:	2300      	movs	r3, #0
 80045ee:	61fb      	str	r3, [r7, #28]
 80045f0:	e026      	b.n	8004640 <xTaskCheckForTimeOut+0xd0>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	4b18      	ldr	r3, [pc, #96]	; (8004658 <xTaskCheckForTimeOut+0xe8>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	429a      	cmp	r2, r3
 80045fc:	d00a      	beq.n	8004614 <xTaskCheckForTimeOut+0xa4>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	69ba      	ldr	r2, [r7, #24]
 8004604:	429a      	cmp	r2, r3
 8004606:	d305      	bcc.n	8004614 <xTaskCheckForTimeOut+0xa4>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8004608:	2301      	movs	r3, #1
 800460a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	2200      	movs	r2, #0
 8004610:	601a      	str	r2, [r3, #0]
 8004612:	e015      	b.n	8004640 <xTaskCheckForTimeOut+0xd0>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	697a      	ldr	r2, [r7, #20]
 800461a:	429a      	cmp	r2, r3
 800461c:	d20b      	bcs.n	8004636 <xTaskCheckForTimeOut+0xc6>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	1ad2      	subs	r2, r2, r3
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f7ff ff8a 	bl	8004544 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8004630:	2300      	movs	r3, #0
 8004632:	61fb      	str	r3, [r7, #28]
 8004634:	e004      	b.n	8004640 <xTaskCheckForTimeOut+0xd0>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	2200      	movs	r2, #0
 800463a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800463c:	2301      	movs	r3, #1
 800463e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8004640:	f000 ff9a 	bl	8005578 <vPortExitCritical>

    return xReturn;
 8004644:	69fb      	ldr	r3, [r7, #28]
}
 8004646:	4618      	mov	r0, r3
 8004648:	3720      	adds	r7, #32
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}
 800464e:	bf00      	nop
 8004650:	200001c4 	.word	0x200001c4
 8004654:	200000e8 	.word	0x200000e8
 8004658:	200001d8 	.word	0x200001d8

0800465c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800465c:	b480      	push	{r7}
 800465e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8004660:	4b03      	ldr	r3, [pc, #12]	; (8004670 <vTaskMissedYield+0x14>)
 8004662:	2201      	movs	r2, #1
 8004664:	601a      	str	r2, [r3, #0]
}
 8004666:	bf00      	nop
 8004668:	46bd      	mov	sp, r7
 800466a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466e:	4770      	bx	lr
 8004670:	200001d4 	.word	0x200001d4

08004674 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b082      	sub	sp, #8
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800467c:	f000 f852 	bl	8004724 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004680:	4b06      	ldr	r3, [pc, #24]	; (800469c <prvIdleTask+0x28>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	2b01      	cmp	r3, #1
 8004686:	d9f9      	bls.n	800467c <prvIdleTask+0x8>
                {
                    taskYIELD();
 8004688:	4b05      	ldr	r3, [pc, #20]	; (80046a0 <prvIdleTask+0x2c>)
 800468a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800468e:	601a      	str	r2, [r3, #0]
 8004690:	f3bf 8f4f 	dsb	sy
 8004694:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8004698:	e7f0      	b.n	800467c <prvIdleTask+0x8>
 800469a:	bf00      	nop
 800469c:	200000ec 	.word	0x200000ec
 80046a0:	e000ed04 	.word	0xe000ed04

080046a4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b082      	sub	sp, #8
 80046a8:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80046aa:	2300      	movs	r3, #0
 80046ac:	607b      	str	r3, [r7, #4]
 80046ae:	e00c      	b.n	80046ca <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80046b0:	687a      	ldr	r2, [r7, #4]
 80046b2:	4613      	mov	r3, r2
 80046b4:	009b      	lsls	r3, r3, #2
 80046b6:	4413      	add	r3, r2
 80046b8:	009b      	lsls	r3, r3, #2
 80046ba:	4a12      	ldr	r2, [pc, #72]	; (8004704 <prvInitialiseTaskLists+0x60>)
 80046bc:	4413      	add	r3, r2
 80046be:	4618      	mov	r0, r3
 80046c0:	f7fe fccf 	bl	8003062 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	3301      	adds	r3, #1
 80046c8:	607b      	str	r3, [r7, #4]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2b04      	cmp	r3, #4
 80046ce:	d9ef      	bls.n	80046b0 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80046d0:	480d      	ldr	r0, [pc, #52]	; (8004708 <prvInitialiseTaskLists+0x64>)
 80046d2:	f7fe fcc6 	bl	8003062 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80046d6:	480d      	ldr	r0, [pc, #52]	; (800470c <prvInitialiseTaskLists+0x68>)
 80046d8:	f7fe fcc3 	bl	8003062 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80046dc:	480c      	ldr	r0, [pc, #48]	; (8004710 <prvInitialiseTaskLists+0x6c>)
 80046de:	f7fe fcc0 	bl	8003062 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 80046e2:	480c      	ldr	r0, [pc, #48]	; (8004714 <prvInitialiseTaskLists+0x70>)
 80046e4:	f7fe fcbd 	bl	8003062 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 80046e8:	480b      	ldr	r0, [pc, #44]	; (8004718 <prvInitialiseTaskLists+0x74>)
 80046ea:	f7fe fcba 	bl	8003062 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80046ee:	4b0b      	ldr	r3, [pc, #44]	; (800471c <prvInitialiseTaskLists+0x78>)
 80046f0:	4a05      	ldr	r2, [pc, #20]	; (8004708 <prvInitialiseTaskLists+0x64>)
 80046f2:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80046f4:	4b0a      	ldr	r3, [pc, #40]	; (8004720 <prvInitialiseTaskLists+0x7c>)
 80046f6:	4a05      	ldr	r2, [pc, #20]	; (800470c <prvInitialiseTaskLists+0x68>)
 80046f8:	601a      	str	r2, [r3, #0]
}
 80046fa:	bf00      	nop
 80046fc:	3708      	adds	r7, #8
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}
 8004702:	bf00      	nop
 8004704:	200000ec 	.word	0x200000ec
 8004708:	20000150 	.word	0x20000150
 800470c:	20000164 	.word	0x20000164
 8004710:	20000180 	.word	0x20000180
 8004714:	20000194 	.word	0x20000194
 8004718:	200001ac 	.word	0x200001ac
 800471c:	20000178 	.word	0x20000178
 8004720:	2000017c 	.word	0x2000017c

08004724 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b082      	sub	sp, #8
 8004728:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800472a:	e019      	b.n	8004760 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 800472c:	f000 fef4 	bl	8005518 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004730:	4b10      	ldr	r3, [pc, #64]	; (8004774 <prvCheckTasksWaitingTermination+0x50>)
 8004732:	68db      	ldr	r3, [r3, #12]
 8004734:	68db      	ldr	r3, [r3, #12]
 8004736:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	3304      	adds	r3, #4
 800473c:	4618      	mov	r0, r3
 800473e:	f7fe fd1a 	bl	8003176 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8004742:	4b0d      	ldr	r3, [pc, #52]	; (8004778 <prvCheckTasksWaitingTermination+0x54>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	3b01      	subs	r3, #1
 8004748:	4a0b      	ldr	r2, [pc, #44]	; (8004778 <prvCheckTasksWaitingTermination+0x54>)
 800474a:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 800474c:	4b0b      	ldr	r3, [pc, #44]	; (800477c <prvCheckTasksWaitingTermination+0x58>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	3b01      	subs	r3, #1
 8004752:	4a0a      	ldr	r2, [pc, #40]	; (800477c <prvCheckTasksWaitingTermination+0x58>)
 8004754:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8004756:	f000 ff0f 	bl	8005578 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f000 f810 	bl	8004780 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004760:	4b06      	ldr	r3, [pc, #24]	; (800477c <prvCheckTasksWaitingTermination+0x58>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d1e1      	bne.n	800472c <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8004768:	bf00      	nop
 800476a:	bf00      	nop
 800476c:	3708      	adds	r7, #8
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}
 8004772:	bf00      	nop
 8004774:	20000194 	.word	0x20000194
 8004778:	200001c0 	.word	0x200001c0
 800477c:	200001a8 	.word	0x200001a8

08004780 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8004780:	b580      	push	{r7, lr}
 8004782:	b082      	sub	sp, #8
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800478c:	4618      	mov	r0, r3
 800478e:	f001 f8a7 	bl	80058e0 <vPortFree>
                vPortFree( pxTCB );
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f001 f8a4 	bl	80058e0 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8004798:	bf00      	nop
 800479a:	3708      	adds	r7, #8
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}

080047a0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80047a0:	b480      	push	{r7}
 80047a2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80047a4:	4b0a      	ldr	r3, [pc, #40]	; (80047d0 <prvResetNextTaskUnblockTime+0x30>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d104      	bne.n	80047b8 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80047ae:	4b09      	ldr	r3, [pc, #36]	; (80047d4 <prvResetNextTaskUnblockTime+0x34>)
 80047b0:	f04f 32ff 	mov.w	r2, #4294967295
 80047b4:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80047b6:	e005      	b.n	80047c4 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80047b8:	4b05      	ldr	r3, [pc, #20]	; (80047d0 <prvResetNextTaskUnblockTime+0x30>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	68db      	ldr	r3, [r3, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a04      	ldr	r2, [pc, #16]	; (80047d4 <prvResetNextTaskUnblockTime+0x34>)
 80047c2:	6013      	str	r3, [r2, #0]
}
 80047c4:	bf00      	nop
 80047c6:	46bd      	mov	sp, r7
 80047c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047cc:	4770      	bx	lr
 80047ce:	bf00      	nop
 80047d0:	20000178 	.word	0x20000178
 80047d4:	200001e0 	.word	0x200001e0

080047d8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80047d8:	b480      	push	{r7}
 80047da:	b083      	sub	sp, #12
 80047dc:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80047de:	4b0b      	ldr	r3, [pc, #44]	; (800480c <xTaskGetSchedulerState+0x34>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d102      	bne.n	80047ec <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80047e6:	2301      	movs	r3, #1
 80047e8:	607b      	str	r3, [r7, #4]
 80047ea:	e008      	b.n	80047fe <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80047ec:	4b08      	ldr	r3, [pc, #32]	; (8004810 <xTaskGetSchedulerState+0x38>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d102      	bne.n	80047fa <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80047f4:	2302      	movs	r3, #2
 80047f6:	607b      	str	r3, [r7, #4]
 80047f8:	e001      	b.n	80047fe <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80047fa:	2300      	movs	r3, #0
 80047fc:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80047fe:	687b      	ldr	r3, [r7, #4]
    }
 8004800:	4618      	mov	r0, r3
 8004802:	370c      	adds	r7, #12
 8004804:	46bd      	mov	sp, r7
 8004806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480a:	4770      	bx	lr
 800480c:	200001cc 	.word	0x200001cc
 8004810:	200001e8 	.word	0x200001e8

08004814 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8004814:	b580      	push	{r7, lr}
 8004816:	b086      	sub	sp, #24
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8004820:	2300      	movs	r3, #0
 8004822:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d063      	beq.n	80048f2 <xTaskPriorityDisinherit+0xde>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800482a:	4b34      	ldr	r3, [pc, #208]	; (80048fc <xTaskPriorityDisinherit+0xe8>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	693a      	ldr	r2, [r7, #16]
 8004830:	429a      	cmp	r2, r3
 8004832:	d00a      	beq.n	800484a <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8004834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004838:	f383 8811 	msr	BASEPRI, r3
 800483c:	f3bf 8f6f 	isb	sy
 8004840:	f3bf 8f4f 	dsb	sy
 8004844:	60fb      	str	r3, [r7, #12]
    }
 8004846:	bf00      	nop
 8004848:	e7fe      	b.n	8004848 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800484e:	2b00      	cmp	r3, #0
 8004850:	d10a      	bne.n	8004868 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8004852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004856:	f383 8811 	msr	BASEPRI, r3
 800485a:	f3bf 8f6f 	isb	sy
 800485e:	f3bf 8f4f 	dsb	sy
 8004862:	60bb      	str	r3, [r7, #8]
    }
 8004864:	bf00      	nop
 8004866:	e7fe      	b.n	8004866 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800486c:	1e5a      	subs	r2, r3, #1
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800487a:	429a      	cmp	r2, r3
 800487c:	d039      	beq.n	80048f2 <xTaskPriorityDisinherit+0xde>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004882:	2b00      	cmp	r3, #0
 8004884:	d135      	bne.n	80048f2 <xTaskPriorityDisinherit+0xde>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	3304      	adds	r3, #4
 800488a:	4618      	mov	r0, r3
 800488c:	f7fe fc73 	bl	8003176 <uxListRemove>
 8004890:	4603      	mov	r3, r0
 8004892:	2b00      	cmp	r3, #0
 8004894:	d10a      	bne.n	80048ac <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800489a:	2201      	movs	r2, #1
 800489c:	fa02 f303 	lsl.w	r3, r2, r3
 80048a0:	43da      	mvns	r2, r3
 80048a2:	4b17      	ldr	r3, [pc, #92]	; (8004900 <xTaskPriorityDisinherit+0xec>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4013      	ands	r3, r2
 80048a8:	4a15      	ldr	r2, [pc, #84]	; (8004900 <xTaskPriorityDisinherit+0xec>)
 80048aa:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048b8:	f1c3 0205 	rsb	r2, r3, #5
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c4:	2201      	movs	r2, #1
 80048c6:	409a      	lsls	r2, r3
 80048c8:	4b0d      	ldr	r3, [pc, #52]	; (8004900 <xTaskPriorityDisinherit+0xec>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4313      	orrs	r3, r2
 80048ce:	4a0c      	ldr	r2, [pc, #48]	; (8004900 <xTaskPriorityDisinherit+0xec>)
 80048d0:	6013      	str	r3, [r2, #0]
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048d6:	4613      	mov	r3, r2
 80048d8:	009b      	lsls	r3, r3, #2
 80048da:	4413      	add	r3, r2
 80048dc:	009b      	lsls	r3, r3, #2
 80048de:	4a09      	ldr	r2, [pc, #36]	; (8004904 <xTaskPriorityDisinherit+0xf0>)
 80048e0:	441a      	add	r2, r3
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	3304      	adds	r3, #4
 80048e6:	4619      	mov	r1, r3
 80048e8:	4610      	mov	r0, r2
 80048ea:	f7fe fbe7 	bl	80030bc <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 80048ee:	2301      	movs	r3, #1
 80048f0:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80048f2:	697b      	ldr	r3, [r7, #20]
    }
 80048f4:	4618      	mov	r0, r3
 80048f6:	3718      	adds	r7, #24
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}
 80048fc:	200000e8 	.word	0x200000e8
 8004900:	200001c8 	.word	0x200001c8
 8004904:	200000ec 	.word	0x200000ec

08004908 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8004908:	b580      	push	{r7, lr}
 800490a:	b086      	sub	sp, #24
 800490c:	af00      	add	r7, sp, #0
 800490e:	60f8      	str	r0, [r7, #12]
 8004910:	60b9      	str	r1, [r7, #8]
 8004912:	607a      	str	r2, [r7, #4]
 8004914:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d00a      	beq.n	8004932 <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 800491c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004920:	f383 8811 	msr	BASEPRI, r3
 8004924:	f3bf 8f6f 	isb	sy
 8004928:	f3bf 8f4f 	dsb	sy
 800492c:	613b      	str	r3, [r7, #16]
    }
 800492e:	bf00      	nop
 8004930:	e7fe      	b.n	8004930 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8004932:	f000 fdf1 	bl	8005518 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8004936:	4b32      	ldr	r3, [pc, #200]	; (8004a00 <xTaskGenericNotifyWait+0xf8>)
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	4413      	add	r3, r2
 800493e:	3364      	adds	r3, #100	; 0x64
 8004940:	781b      	ldrb	r3, [r3, #0]
 8004942:	b2db      	uxtb	r3, r3
 8004944:	2b02      	cmp	r3, #2
 8004946:	d022      	beq.n	800498e <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8004948:	4b2d      	ldr	r3, [pc, #180]	; (8004a00 <xTaskGenericNotifyWait+0xf8>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	68fa      	ldr	r2, [r7, #12]
 800494e:	3218      	adds	r2, #24
 8004950:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004954:	68ba      	ldr	r2, [r7, #8]
 8004956:	43d2      	mvns	r2, r2
 8004958:	4011      	ands	r1, r2
 800495a:	68fa      	ldr	r2, [r7, #12]
 800495c:	3218      	adds	r2, #24
 800495e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8004962:	4b27      	ldr	r3, [pc, #156]	; (8004a00 <xTaskGenericNotifyWait+0xf8>)
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	4413      	add	r3, r2
 800496a:	3364      	adds	r3, #100	; 0x64
 800496c:	2201      	movs	r2, #1
 800496e:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8004970:	6a3b      	ldr	r3, [r7, #32]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d00b      	beq.n	800498e <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004976:	2101      	movs	r1, #1
 8004978:	6a38      	ldr	r0, [r7, #32]
 800497a:	f000 f925 	bl	8004bc8 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 800497e:	4b21      	ldr	r3, [pc, #132]	; (8004a04 <xTaskGenericNotifyWait+0xfc>)
 8004980:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004984:	601a      	str	r2, [r3, #0]
 8004986:	f3bf 8f4f 	dsb	sy
 800498a:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800498e:	f000 fdf3 	bl	8005578 <vPortExitCritical>

        taskENTER_CRITICAL();
 8004992:	f000 fdc1 	bl	8005518 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT( uxIndexToWait );

            if( pulNotificationValue != NULL )
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d007      	beq.n	80049ac <xTaskGenericNotifyWait+0xa4>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 800499c:	4b18      	ldr	r3, [pc, #96]	; (8004a00 <xTaskGenericNotifyWait+0xf8>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	68fa      	ldr	r2, [r7, #12]
 80049a2:	3218      	adds	r2, #24
 80049a4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 80049ac:	4b14      	ldr	r3, [pc, #80]	; (8004a00 <xTaskGenericNotifyWait+0xf8>)
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	4413      	add	r3, r2
 80049b4:	3364      	adds	r3, #100	; 0x64
 80049b6:	781b      	ldrb	r3, [r3, #0]
 80049b8:	b2db      	uxtb	r3, r3
 80049ba:	2b02      	cmp	r3, #2
 80049bc:	d002      	beq.n	80049c4 <xTaskGenericNotifyWait+0xbc>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 80049be:	2300      	movs	r3, #0
 80049c0:	617b      	str	r3, [r7, #20]
 80049c2:	e00e      	b.n	80049e2 <xTaskGenericNotifyWait+0xda>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 80049c4:	4b0e      	ldr	r3, [pc, #56]	; (8004a00 <xTaskGenericNotifyWait+0xf8>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	68fa      	ldr	r2, [r7, #12]
 80049ca:	3218      	adds	r2, #24
 80049cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80049d0:	687a      	ldr	r2, [r7, #4]
 80049d2:	43d2      	mvns	r2, r2
 80049d4:	4011      	ands	r1, r2
 80049d6:	68fa      	ldr	r2, [r7, #12]
 80049d8:	3218      	adds	r2, #24
 80049da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 80049de:	2301      	movs	r3, #1
 80049e0:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 80049e2:	4b07      	ldr	r3, [pc, #28]	; (8004a00 <xTaskGenericNotifyWait+0xf8>)
 80049e4:	681a      	ldr	r2, [r3, #0]
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	4413      	add	r3, r2
 80049ea:	3364      	adds	r3, #100	; 0x64
 80049ec:	2200      	movs	r2, #0
 80049ee:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 80049f0:	f000 fdc2 	bl	8005578 <vPortExitCritical>

        return xReturn;
 80049f4:	697b      	ldr	r3, [r7, #20]
    }
 80049f6:	4618      	mov	r0, r3
 80049f8:	3718      	adds	r7, #24
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}
 80049fe:	bf00      	nop
 8004a00:	200000e8 	.word	0x200000e8
 8004a04:	e000ed04 	.word	0xe000ed04

08004a08 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b08c      	sub	sp, #48	; 0x30
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	60f8      	str	r0, [r7, #12]
 8004a10:	60b9      	str	r1, [r7, #8]
 8004a12:	607a      	str	r2, [r7, #4]
 8004a14:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 8004a16:	2301      	movs	r3, #1
 8004a18:	62fb      	str	r3, [r7, #44]	; 0x2c
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d00a      	beq.n	8004a36 <xTaskGenericNotify+0x2e>
        __asm volatile
 8004a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a24:	f383 8811 	msr	BASEPRI, r3
 8004a28:	f3bf 8f6f 	isb	sy
 8004a2c:	f3bf 8f4f 	dsb	sy
 8004a30:	623b      	str	r3, [r7, #32]
    }
 8004a32:	bf00      	nop
 8004a34:	e7fe      	b.n	8004a34 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d10a      	bne.n	8004a52 <xTaskGenericNotify+0x4a>
        __asm volatile
 8004a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a40:	f383 8811 	msr	BASEPRI, r3
 8004a44:	f3bf 8f6f 	isb	sy
 8004a48:	f3bf 8f4f 	dsb	sy
 8004a4c:	61fb      	str	r3, [r7, #28]
    }
 8004a4e:	bf00      	nop
 8004a50:	e7fe      	b.n	8004a50 <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	62bb      	str	r3, [r7, #40]	; 0x28

        taskENTER_CRITICAL();
 8004a56:	f000 fd5f 	bl	8005518 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 8004a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d006      	beq.n	8004a6e <xTaskGenericNotify+0x66>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8004a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a62:	68ba      	ldr	r2, [r7, #8]
 8004a64:	3218      	adds	r2, #24
 8004a66:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a6c:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8004a6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	4413      	add	r3, r2
 8004a74:	3364      	adds	r3, #100	; 0x64
 8004a76:	781b      	ldrb	r3, [r3, #0]
 8004a78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8004a7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	4413      	add	r3, r2
 8004a82:	3364      	adds	r3, #100	; 0x64
 8004a84:	2202      	movs	r2, #2
 8004a86:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8004a88:	78fb      	ldrb	r3, [r7, #3]
 8004a8a:	2b04      	cmp	r3, #4
 8004a8c:	d83b      	bhi.n	8004b06 <xTaskGenericNotify+0xfe>
 8004a8e:	a201      	add	r2, pc, #4	; (adr r2, 8004a94 <xTaskGenericNotify+0x8c>)
 8004a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a94:	08004b25 	.word	0x08004b25
 8004a98:	08004aa9 	.word	0x08004aa9
 8004a9c:	08004ac5 	.word	0x08004ac5
 8004aa0:	08004add 	.word	0x08004add
 8004aa4:	08004aeb 	.word	0x08004aeb
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8004aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aaa:	68ba      	ldr	r2, [r7, #8]
 8004aac:	3218      	adds	r2, #24
 8004aae:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	ea42 0103 	orr.w	r1, r2, r3
 8004ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aba:	68ba      	ldr	r2, [r7, #8]
 8004abc:	3218      	adds	r2, #24
 8004abe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8004ac2:	e032      	b.n	8004b2a <xTaskGenericNotify+0x122>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8004ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac6:	68ba      	ldr	r2, [r7, #8]
 8004ac8:	3218      	adds	r2, #24
 8004aca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ace:	1c59      	adds	r1, r3, #1
 8004ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ad2:	68ba      	ldr	r2, [r7, #8]
 8004ad4:	3218      	adds	r2, #24
 8004ad6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8004ada:	e026      	b.n	8004b2a <xTaskGenericNotify+0x122>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8004adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ade:	68ba      	ldr	r2, [r7, #8]
 8004ae0:	3218      	adds	r2, #24
 8004ae2:	6879      	ldr	r1, [r7, #4]
 8004ae4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8004ae8:	e01f      	b.n	8004b2a <xTaskGenericNotify+0x122>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8004aea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004aee:	2b02      	cmp	r3, #2
 8004af0:	d006      	beq.n	8004b00 <xTaskGenericNotify+0xf8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8004af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004af4:	68ba      	ldr	r2, [r7, #8]
 8004af6:	3218      	adds	r2, #24
 8004af8:	6879      	ldr	r1, [r7, #4]
 8004afa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8004afe:	e014      	b.n	8004b2a <xTaskGenericNotify+0x122>
                        xReturn = pdFAIL;
 8004b00:	2300      	movs	r3, #0
 8004b02:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
 8004b04:	e011      	b.n	8004b2a <xTaskGenericNotify+0x122>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8004b06:	4b2b      	ldr	r3, [pc, #172]	; (8004bb4 <xTaskGenericNotify+0x1ac>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d00c      	beq.n	8004b28 <xTaskGenericNotify+0x120>
        __asm volatile
 8004b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b12:	f383 8811 	msr	BASEPRI, r3
 8004b16:	f3bf 8f6f 	isb	sy
 8004b1a:	f3bf 8f4f 	dsb	sy
 8004b1e:	61bb      	str	r3, [r7, #24]
    }
 8004b20:	bf00      	nop
 8004b22:	e7fe      	b.n	8004b22 <xTaskGenericNotify+0x11a>
                    break;
 8004b24:	bf00      	nop
 8004b26:	e000      	b.n	8004b2a <xTaskGenericNotify+0x122>

                    break;
 8004b28:	bf00      	nop

            traceTASK_NOTIFY( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8004b2a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004b2e:	2b01      	cmp	r3, #1
 8004b30:	d139      	bne.n	8004ba6 <xTaskGenericNotify+0x19e>
            {
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b34:	3304      	adds	r3, #4
 8004b36:	4618      	mov	r0, r3
 8004b38:	f7fe fb1d 	bl	8003176 <uxListRemove>
                prvAddTaskToReadyList( pxTCB );
 8004b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b40:	2201      	movs	r2, #1
 8004b42:	409a      	lsls	r2, r3
 8004b44:	4b1c      	ldr	r3, [pc, #112]	; (8004bb8 <xTaskGenericNotify+0x1b0>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	4a1b      	ldr	r2, [pc, #108]	; (8004bb8 <xTaskGenericNotify+0x1b0>)
 8004b4c:	6013      	str	r3, [r2, #0]
 8004b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b52:	4613      	mov	r3, r2
 8004b54:	009b      	lsls	r3, r3, #2
 8004b56:	4413      	add	r3, r2
 8004b58:	009b      	lsls	r3, r3, #2
 8004b5a:	4a18      	ldr	r2, [pc, #96]	; (8004bbc <xTaskGenericNotify+0x1b4>)
 8004b5c:	441a      	add	r2, r3
 8004b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b60:	3304      	adds	r3, #4
 8004b62:	4619      	mov	r1, r3
 8004b64:	4610      	mov	r0, r2
 8004b66:	f7fe faa9 	bl	80030bc <vListInsertEnd>

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8004b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d00a      	beq.n	8004b88 <xTaskGenericNotify+0x180>
        __asm volatile
 8004b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b76:	f383 8811 	msr	BASEPRI, r3
 8004b7a:	f3bf 8f6f 	isb	sy
 8004b7e:	f3bf 8f4f 	dsb	sy
 8004b82:	617b      	str	r3, [r7, #20]
    }
 8004b84:	bf00      	nop
 8004b86:	e7fe      	b.n	8004b86 <xTaskGenericNotify+0x17e>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b8c:	4b0c      	ldr	r3, [pc, #48]	; (8004bc0 <xTaskGenericNotify+0x1b8>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b92:	429a      	cmp	r2, r3
 8004b94:	d907      	bls.n	8004ba6 <xTaskGenericNotify+0x19e>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 8004b96:	4b0b      	ldr	r3, [pc, #44]	; (8004bc4 <xTaskGenericNotify+0x1bc>)
 8004b98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b9c:	601a      	str	r2, [r3, #0]
 8004b9e:	f3bf 8f4f 	dsb	sy
 8004ba2:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004ba6:	f000 fce7 	bl	8005578 <vPortExitCritical>

        return xReturn;
 8004baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 8004bac:	4618      	mov	r0, r3
 8004bae:	3730      	adds	r7, #48	; 0x30
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}
 8004bb4:	200001c4 	.word	0x200001c4
 8004bb8:	200001c8 	.word	0x200001c8
 8004bbc:	200000ec 	.word	0x200000ec
 8004bc0:	200000e8 	.word	0x200000e8
 8004bc4:	e000ed04 	.word	0xe000ed04

08004bc8 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b084      	sub	sp, #16
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8004bd2:	4b2b      	ldr	r3, [pc, #172]	; (8004c80 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	60fb      	str	r3, [r7, #12]
    #if ( INCLUDE_xTaskAbortDelay == 1 )
        {
            /* About to enter a delayed list, so ensure the ucDelayAborted flag is
             * reset to pdFALSE so it can be detected as having been set to pdTRUE
             * when the task leaves the Blocked state. */
            pxCurrentTCB->ucDelayAborted = pdFALSE;
 8004bd8:	4b2a      	ldr	r3, [pc, #168]	; (8004c84 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004be2:	4b28      	ldr	r3, [pc, #160]	; (8004c84 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	3304      	adds	r3, #4
 8004be8:	4618      	mov	r0, r3
 8004bea:	f7fe fac4 	bl	8003176 <uxListRemove>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d10b      	bne.n	8004c0c <prvAddCurrentTaskToDelayedList+0x44>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004bf4:	4b23      	ldr	r3, [pc, #140]	; (8004c84 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8004c00:	43da      	mvns	r2, r3
 8004c02:	4b21      	ldr	r3, [pc, #132]	; (8004c88 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4013      	ands	r3, r2
 8004c08:	4a1f      	ldr	r2, [pc, #124]	; (8004c88 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004c0a:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c12:	d10a      	bne.n	8004c2a <prvAddCurrentTaskToDelayedList+0x62>
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d007      	beq.n	8004c2a <prvAddCurrentTaskToDelayedList+0x62>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c1a:	4b1a      	ldr	r3, [pc, #104]	; (8004c84 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	3304      	adds	r3, #4
 8004c20:	4619      	mov	r1, r3
 8004c22:	481a      	ldr	r0, [pc, #104]	; (8004c8c <prvAddCurrentTaskToDelayedList+0xc4>)
 8004c24:	f7fe fa4a 	bl	80030bc <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8004c28:	e026      	b.n	8004c78 <prvAddCurrentTaskToDelayedList+0xb0>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8004c2a:	68fa      	ldr	r2, [r7, #12]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	4413      	add	r3, r2
 8004c30:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004c32:	4b14      	ldr	r3, [pc, #80]	; (8004c84 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	68ba      	ldr	r2, [r7, #8]
 8004c38:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8004c3a:	68ba      	ldr	r2, [r7, #8]
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	429a      	cmp	r2, r3
 8004c40:	d209      	bcs.n	8004c56 <prvAddCurrentTaskToDelayedList+0x8e>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c42:	4b13      	ldr	r3, [pc, #76]	; (8004c90 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	4b0f      	ldr	r3, [pc, #60]	; (8004c84 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	3304      	adds	r3, #4
 8004c4c:	4619      	mov	r1, r3
 8004c4e:	4610      	mov	r0, r2
 8004c50:	f7fe fa58 	bl	8003104 <vListInsert>
}
 8004c54:	e010      	b.n	8004c78 <prvAddCurrentTaskToDelayedList+0xb0>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c56:	4b0f      	ldr	r3, [pc, #60]	; (8004c94 <prvAddCurrentTaskToDelayedList+0xcc>)
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	4b0a      	ldr	r3, [pc, #40]	; (8004c84 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	3304      	adds	r3, #4
 8004c60:	4619      	mov	r1, r3
 8004c62:	4610      	mov	r0, r2
 8004c64:	f7fe fa4e 	bl	8003104 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8004c68:	4b0b      	ldr	r3, [pc, #44]	; (8004c98 <prvAddCurrentTaskToDelayedList+0xd0>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	68ba      	ldr	r2, [r7, #8]
 8004c6e:	429a      	cmp	r2, r3
 8004c70:	d202      	bcs.n	8004c78 <prvAddCurrentTaskToDelayedList+0xb0>
                        xNextTaskUnblockTime = xTimeToWake;
 8004c72:	4a09      	ldr	r2, [pc, #36]	; (8004c98 <prvAddCurrentTaskToDelayedList+0xd0>)
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	6013      	str	r3, [r2, #0]
}
 8004c78:	bf00      	nop
 8004c7a:	3710      	adds	r7, #16
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}
 8004c80:	200001c4 	.word	0x200001c4
 8004c84:	200000e8 	.word	0x200000e8
 8004c88:	200001c8 	.word	0x200001c8
 8004c8c:	200001ac 	.word	0x200001ac
 8004c90:	2000017c 	.word	0x2000017c
 8004c94:	20000178 	.word	0x20000178
 8004c98:	200001e0 	.word	0x200001e0

08004c9c <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b084      	sub	sp, #16
 8004ca0:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8004ca6:	f000 fad5 	bl	8005254 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8004caa:	4b11      	ldr	r3, [pc, #68]	; (8004cf0 <xTimerCreateTimerTask+0x54>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d00b      	beq.n	8004cca <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8004cb2:	4b10      	ldr	r3, [pc, #64]	; (8004cf4 <xTimerCreateTimerTask+0x58>)
 8004cb4:	9301      	str	r3, [sp, #4]
 8004cb6:	2302      	movs	r3, #2
 8004cb8:	9300      	str	r3, [sp, #0]
 8004cba:	2300      	movs	r3, #0
 8004cbc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004cc0:	490d      	ldr	r1, [pc, #52]	; (8004cf8 <xTimerCreateTimerTask+0x5c>)
 8004cc2:	480e      	ldr	r0, [pc, #56]	; (8004cfc <xTimerCreateTimerTask+0x60>)
 8004cc4:	f7ff f800 	bl	8003cc8 <xTaskCreate>
 8004cc8:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d10a      	bne.n	8004ce6 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8004cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cd4:	f383 8811 	msr	BASEPRI, r3
 8004cd8:	f3bf 8f6f 	isb	sy
 8004cdc:	f3bf 8f4f 	dsb	sy
 8004ce0:	603b      	str	r3, [r7, #0]
    }
 8004ce2:	bf00      	nop
 8004ce4:	e7fe      	b.n	8004ce4 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8004ce6:	687b      	ldr	r3, [r7, #4]
    }
 8004ce8:	4618      	mov	r0, r3
 8004cea:	3708      	adds	r7, #8
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd80      	pop	{r7, pc}
 8004cf0:	20000224 	.word	0x20000224
 8004cf4:	20000228 	.word	0x20000228
 8004cf8:	08005bd4 	.word	0x08005bd4
 8004cfc:	08004e35 	.word	0x08004e35

08004d00 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b08a      	sub	sp, #40	; 0x28
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	60f8      	str	r0, [r7, #12]
 8004d08:	60b9      	str	r1, [r7, #8]
 8004d0a:	607a      	str	r2, [r7, #4]
 8004d0c:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d10a      	bne.n	8004d2e <xTimerGenericCommand+0x2e>
        __asm volatile
 8004d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d1c:	f383 8811 	msr	BASEPRI, r3
 8004d20:	f3bf 8f6f 	isb	sy
 8004d24:	f3bf 8f4f 	dsb	sy
 8004d28:	623b      	str	r3, [r7, #32]
    }
 8004d2a:	bf00      	nop
 8004d2c:	e7fe      	b.n	8004d2c <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8004d2e:	4b1a      	ldr	r3, [pc, #104]	; (8004d98 <xTimerGenericCommand+0x98>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d02a      	beq.n	8004d8c <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	2b05      	cmp	r3, #5
 8004d46:	dc18      	bgt.n	8004d7a <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004d48:	f7ff fd46 	bl	80047d8 <xTaskGetSchedulerState>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	2b02      	cmp	r3, #2
 8004d50:	d109      	bne.n	8004d66 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004d52:	4b11      	ldr	r3, [pc, #68]	; (8004d98 <xTimerGenericCommand+0x98>)
 8004d54:	6818      	ldr	r0, [r3, #0]
 8004d56:	f107 0114 	add.w	r1, r7, #20
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d5e:	f7fe fb13 	bl	8003388 <xQueueGenericSend>
 8004d62:	6278      	str	r0, [r7, #36]	; 0x24
 8004d64:	e012      	b.n	8004d8c <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004d66:	4b0c      	ldr	r3, [pc, #48]	; (8004d98 <xTimerGenericCommand+0x98>)
 8004d68:	6818      	ldr	r0, [r3, #0]
 8004d6a:	f107 0114 	add.w	r1, r7, #20
 8004d6e:	2300      	movs	r3, #0
 8004d70:	2200      	movs	r2, #0
 8004d72:	f7fe fb09 	bl	8003388 <xQueueGenericSend>
 8004d76:	6278      	str	r0, [r7, #36]	; 0x24
 8004d78:	e008      	b.n	8004d8c <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004d7a:	4b07      	ldr	r3, [pc, #28]	; (8004d98 <xTimerGenericCommand+0x98>)
 8004d7c:	6818      	ldr	r0, [r3, #0]
 8004d7e:	f107 0114 	add.w	r1, r7, #20
 8004d82:	2300      	movs	r3, #0
 8004d84:	683a      	ldr	r2, [r7, #0]
 8004d86:	f7fe fc19 	bl	80035bc <xQueueGenericSendFromISR>
 8004d8a:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8004d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3728      	adds	r7, #40	; 0x28
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}
 8004d96:	bf00      	nop
 8004d98:	20000224 	.word	0x20000224

08004d9c <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b088      	sub	sp, #32
 8004da0:	af02      	add	r7, sp, #8
 8004da2:	6078      	str	r0, [r7, #4]
 8004da4:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004da6:	4b22      	ldr	r3, [pc, #136]	; (8004e30 <prvProcessExpiredTimer+0x94>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	68db      	ldr	r3, [r3, #12]
 8004dac:	68db      	ldr	r3, [r3, #12]
 8004dae:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	3304      	adds	r3, #4
 8004db4:	4618      	mov	r0, r3
 8004db6:	f7fe f9de 	bl	8003176 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004dc0:	f003 0304 	and.w	r3, r3, #4
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d022      	beq.n	8004e0e <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	699a      	ldr	r2, [r3, #24]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	18d1      	adds	r1, r2, r3
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	683a      	ldr	r2, [r7, #0]
 8004dd4:	6978      	ldr	r0, [r7, #20]
 8004dd6:	f000 f8d1 	bl	8004f7c <prvInsertTimerInActiveList>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d01f      	beq.n	8004e20 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004de0:	2300      	movs	r3, #0
 8004de2:	9300      	str	r3, [sp, #0]
 8004de4:	2300      	movs	r3, #0
 8004de6:	687a      	ldr	r2, [r7, #4]
 8004de8:	2100      	movs	r1, #0
 8004dea:	6978      	ldr	r0, [r7, #20]
 8004dec:	f7ff ff88 	bl	8004d00 <xTimerGenericCommand>
 8004df0:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d113      	bne.n	8004e20 <prvProcessExpiredTimer+0x84>
        __asm volatile
 8004df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dfc:	f383 8811 	msr	BASEPRI, r3
 8004e00:	f3bf 8f6f 	isb	sy
 8004e04:	f3bf 8f4f 	dsb	sy
 8004e08:	60fb      	str	r3, [r7, #12]
    }
 8004e0a:	bf00      	nop
 8004e0c:	e7fe      	b.n	8004e0c <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e14:	f023 0301 	bic.w	r3, r3, #1
 8004e18:	b2da      	uxtb	r2, r3
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	6a1b      	ldr	r3, [r3, #32]
 8004e24:	6978      	ldr	r0, [r7, #20]
 8004e26:	4798      	blx	r3
    }
 8004e28:	bf00      	nop
 8004e2a:	3718      	adds	r7, #24
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}
 8004e30:	2000021c 	.word	0x2000021c

08004e34 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b084      	sub	sp, #16
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004e3c:	f107 0308 	add.w	r3, r7, #8
 8004e40:	4618      	mov	r0, r3
 8004e42:	f000 f857 	bl	8004ef4 <prvGetNextExpireTime>
 8004e46:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	4619      	mov	r1, r3
 8004e4c:	68f8      	ldr	r0, [r7, #12]
 8004e4e:	f000 f803 	bl	8004e58 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8004e52:	f000 f8d5 	bl	8005000 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004e56:	e7f1      	b.n	8004e3c <prvTimerTask+0x8>

08004e58 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b084      	sub	sp, #16
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
 8004e60:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8004e62:	f7ff f8d5 	bl	8004010 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004e66:	f107 0308 	add.w	r3, r7, #8
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f000 f866 	bl	8004f3c <prvSampleTimeNow>
 8004e70:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d130      	bne.n	8004eda <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d10a      	bne.n	8004e94 <prvProcessTimerOrBlockTask+0x3c>
 8004e7e:	687a      	ldr	r2, [r7, #4]
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d806      	bhi.n	8004e94 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8004e86:	f7ff f8d1 	bl	800402c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004e8a:	68f9      	ldr	r1, [r7, #12]
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	f7ff ff85 	bl	8004d9c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8004e92:	e024      	b.n	8004ede <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d008      	beq.n	8004eac <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004e9a:	4b13      	ldr	r3, [pc, #76]	; (8004ee8 <prvProcessTimerOrBlockTask+0x90>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d101      	bne.n	8004ea8 <prvProcessTimerOrBlockTask+0x50>
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	e000      	b.n	8004eaa <prvProcessTimerOrBlockTask+0x52>
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004eac:	4b0f      	ldr	r3, [pc, #60]	; (8004eec <prvProcessTimerOrBlockTask+0x94>)
 8004eae:	6818      	ldr	r0, [r3, #0]
 8004eb0:	687a      	ldr	r2, [r7, #4]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	1ad3      	subs	r3, r2, r3
 8004eb6:	683a      	ldr	r2, [r7, #0]
 8004eb8:	4619      	mov	r1, r3
 8004eba:	f7fe fe69 	bl	8003b90 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8004ebe:	f7ff f8b5 	bl	800402c <xTaskResumeAll>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d10a      	bne.n	8004ede <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8004ec8:	4b09      	ldr	r3, [pc, #36]	; (8004ef0 <prvProcessTimerOrBlockTask+0x98>)
 8004eca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ece:	601a      	str	r2, [r3, #0]
 8004ed0:	f3bf 8f4f 	dsb	sy
 8004ed4:	f3bf 8f6f 	isb	sy
    }
 8004ed8:	e001      	b.n	8004ede <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8004eda:	f7ff f8a7 	bl	800402c <xTaskResumeAll>
    }
 8004ede:	bf00      	nop
 8004ee0:	3710      	adds	r7, #16
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}
 8004ee6:	bf00      	nop
 8004ee8:	20000220 	.word	0x20000220
 8004eec:	20000224 	.word	0x20000224
 8004ef0:	e000ed04 	.word	0xe000ed04

08004ef4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8004ef4:	b480      	push	{r7}
 8004ef6:	b085      	sub	sp, #20
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004efc:	4b0e      	ldr	r3, [pc, #56]	; (8004f38 <prvGetNextExpireTime+0x44>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d101      	bne.n	8004f0a <prvGetNextExpireTime+0x16>
 8004f06:	2201      	movs	r2, #1
 8004f08:	e000      	b.n	8004f0c <prvGetNextExpireTime+0x18>
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d105      	bne.n	8004f24 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004f18:	4b07      	ldr	r3, [pc, #28]	; (8004f38 <prvGetNextExpireTime+0x44>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	68db      	ldr	r3, [r3, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	60fb      	str	r3, [r7, #12]
 8004f22:	e001      	b.n	8004f28 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8004f24:	2300      	movs	r3, #0
 8004f26:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8004f28:	68fb      	ldr	r3, [r7, #12]
    }
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3714      	adds	r7, #20
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f34:	4770      	bx	lr
 8004f36:	bf00      	nop
 8004f38:	2000021c 	.word	0x2000021c

08004f3c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b084      	sub	sp, #16
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8004f44:	f7ff f90e 	bl	8004164 <xTaskGetTickCount>
 8004f48:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8004f4a:	4b0b      	ldr	r3, [pc, #44]	; (8004f78 <prvSampleTimeNow+0x3c>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	68fa      	ldr	r2, [r7, #12]
 8004f50:	429a      	cmp	r2, r3
 8004f52:	d205      	bcs.n	8004f60 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8004f54:	f000 f91a 	bl	800518c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	601a      	str	r2, [r3, #0]
 8004f5e:	e002      	b.n	8004f66 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2200      	movs	r2, #0
 8004f64:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8004f66:	4a04      	ldr	r2, [pc, #16]	; (8004f78 <prvSampleTimeNow+0x3c>)
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
    }
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3710      	adds	r7, #16
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}
 8004f76:	bf00      	nop
 8004f78:	2000022c 	.word	0x2000022c

08004f7c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b086      	sub	sp, #24
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	60f8      	str	r0, [r7, #12]
 8004f84:	60b9      	str	r1, [r7, #8]
 8004f86:	607a      	str	r2, [r7, #4]
 8004f88:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	68ba      	ldr	r2, [r7, #8]
 8004f92:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	68fa      	ldr	r2, [r7, #12]
 8004f98:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8004f9a:	68ba      	ldr	r2, [r7, #8]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	429a      	cmp	r2, r3
 8004fa0:	d812      	bhi.n	8004fc8 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004fa2:	687a      	ldr	r2, [r7, #4]
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	1ad2      	subs	r2, r2, r3
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	699b      	ldr	r3, [r3, #24]
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d302      	bcc.n	8004fb6 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	617b      	str	r3, [r7, #20]
 8004fb4:	e01b      	b.n	8004fee <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004fb6:	4b10      	ldr	r3, [pc, #64]	; (8004ff8 <prvInsertTimerInActiveList+0x7c>)
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	3304      	adds	r3, #4
 8004fbe:	4619      	mov	r1, r3
 8004fc0:	4610      	mov	r0, r2
 8004fc2:	f7fe f89f 	bl	8003104 <vListInsert>
 8004fc6:	e012      	b.n	8004fee <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004fc8:	687a      	ldr	r2, [r7, #4]
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	d206      	bcs.n	8004fde <prvInsertTimerInActiveList+0x62>
 8004fd0:	68ba      	ldr	r2, [r7, #8]
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	d302      	bcc.n	8004fde <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	617b      	str	r3, [r7, #20]
 8004fdc:	e007      	b.n	8004fee <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004fde:	4b07      	ldr	r3, [pc, #28]	; (8004ffc <prvInsertTimerInActiveList+0x80>)
 8004fe0:	681a      	ldr	r2, [r3, #0]
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	3304      	adds	r3, #4
 8004fe6:	4619      	mov	r1, r3
 8004fe8:	4610      	mov	r0, r2
 8004fea:	f7fe f88b 	bl	8003104 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8004fee:	697b      	ldr	r3, [r7, #20]
    }
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	3718      	adds	r7, #24
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd80      	pop	{r7, pc}
 8004ff8:	20000220 	.word	0x20000220
 8004ffc:	2000021c 	.word	0x2000021c

08005000 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8005000:	b580      	push	{r7, lr}
 8005002:	b08c      	sub	sp, #48	; 0x30
 8005004:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005006:	e0ae      	b.n	8005166 <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	2b00      	cmp	r3, #0
 800500c:	f2c0 80ab 	blt.w	8005166 <prvProcessReceivedCommands+0x166>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005016:	695b      	ldr	r3, [r3, #20]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d004      	beq.n	8005026 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800501c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800501e:	3304      	adds	r3, #4
 8005020:	4618      	mov	r0, r3
 8005022:	f7fe f8a8 	bl	8003176 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005026:	1d3b      	adds	r3, r7, #4
 8005028:	4618      	mov	r0, r3
 800502a:	f7ff ff87 	bl	8004f3c <prvSampleTimeNow>
 800502e:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	2b09      	cmp	r3, #9
 8005034:	f200 8096 	bhi.w	8005164 <prvProcessReceivedCommands+0x164>
 8005038:	a201      	add	r2, pc, #4	; (adr r2, 8005040 <prvProcessReceivedCommands+0x40>)
 800503a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800503e:	bf00      	nop
 8005040:	08005069 	.word	0x08005069
 8005044:	08005069 	.word	0x08005069
 8005048:	08005069 	.word	0x08005069
 800504c:	080050dd 	.word	0x080050dd
 8005050:	080050f1 	.word	0x080050f1
 8005054:	0800513b 	.word	0x0800513b
 8005058:	08005069 	.word	0x08005069
 800505c:	08005069 	.word	0x08005069
 8005060:	080050dd 	.word	0x080050dd
 8005064:	080050f1 	.word	0x080050f1
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800506a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800506e:	f043 0301 	orr.w	r3, r3, #1
 8005072:	b2da      	uxtb	r2, r3
 8005074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005076:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800507a:	68fa      	ldr	r2, [r7, #12]
 800507c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800507e:	699b      	ldr	r3, [r3, #24]
 8005080:	18d1      	adds	r1, r2, r3
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	6a3a      	ldr	r2, [r7, #32]
 8005086:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005088:	f7ff ff78 	bl	8004f7c <prvInsertTimerInActiveList>
 800508c:	4603      	mov	r3, r0
 800508e:	2b00      	cmp	r3, #0
 8005090:	d069      	beq.n	8005166 <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005094:	6a1b      	ldr	r3, [r3, #32]
 8005096:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005098:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800509a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800509c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80050a0:	f003 0304 	and.w	r3, r3, #4
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d05e      	beq.n	8005166 <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80050a8:	68fa      	ldr	r2, [r7, #12]
 80050aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ac:	699b      	ldr	r3, [r3, #24]
 80050ae:	441a      	add	r2, r3
 80050b0:	2300      	movs	r3, #0
 80050b2:	9300      	str	r3, [sp, #0]
 80050b4:	2300      	movs	r3, #0
 80050b6:	2100      	movs	r1, #0
 80050b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80050ba:	f7ff fe21 	bl	8004d00 <xTimerGenericCommand>
 80050be:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 80050c0:	69fb      	ldr	r3, [r7, #28]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d14f      	bne.n	8005166 <prvProcessReceivedCommands+0x166>
        __asm volatile
 80050c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ca:	f383 8811 	msr	BASEPRI, r3
 80050ce:	f3bf 8f6f 	isb	sy
 80050d2:	f3bf 8f4f 	dsb	sy
 80050d6:	61bb      	str	r3, [r7, #24]
    }
 80050d8:	bf00      	nop
 80050da:	e7fe      	b.n	80050da <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80050dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80050e2:	f023 0301 	bic.w	r3, r3, #1
 80050e6:	b2da      	uxtb	r2, r3
 80050e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 80050ee:	e03a      	b.n	8005166 <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80050f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80050f6:	f043 0301 	orr.w	r3, r3, #1
 80050fa:	b2da      	uxtb	r2, r3
 80050fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005102:	68fa      	ldr	r2, [r7, #12]
 8005104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005106:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800510a:	699b      	ldr	r3, [r3, #24]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d10a      	bne.n	8005126 <prvProcessReceivedCommands+0x126>
        __asm volatile
 8005110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005114:	f383 8811 	msr	BASEPRI, r3
 8005118:	f3bf 8f6f 	isb	sy
 800511c:	f3bf 8f4f 	dsb	sy
 8005120:	617b      	str	r3, [r7, #20]
    }
 8005122:	bf00      	nop
 8005124:	e7fe      	b.n	8005124 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005128:	699a      	ldr	r2, [r3, #24]
 800512a:	6a3b      	ldr	r3, [r7, #32]
 800512c:	18d1      	adds	r1, r2, r3
 800512e:	6a3b      	ldr	r3, [r7, #32]
 8005130:	6a3a      	ldr	r2, [r7, #32]
 8005132:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005134:	f7ff ff22 	bl	8004f7c <prvInsertTimerInActiveList>
                        break;
 8005138:	e015      	b.n	8005166 <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800513a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800513c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005140:	f003 0302 	and.w	r3, r3, #2
 8005144:	2b00      	cmp	r3, #0
 8005146:	d103      	bne.n	8005150 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8005148:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800514a:	f000 fbc9 	bl	80058e0 <vPortFree>
 800514e:	e00a      	b.n	8005166 <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005152:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005156:	f023 0301 	bic.w	r3, r3, #1
 800515a:	b2da      	uxtb	r2, r3
 800515c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800515e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8005162:	e000      	b.n	8005166 <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
 8005164:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005166:	4b08      	ldr	r3, [pc, #32]	; (8005188 <prvProcessReceivedCommands+0x188>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f107 0108 	add.w	r1, r7, #8
 800516e:	2200      	movs	r2, #0
 8005170:	4618      	mov	r0, r3
 8005172:	f7fe fae5 	bl	8003740 <xQueueReceive>
 8005176:	4603      	mov	r3, r0
 8005178:	2b00      	cmp	r3, #0
 800517a:	f47f af45 	bne.w	8005008 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 800517e:	bf00      	nop
 8005180:	bf00      	nop
 8005182:	3728      	adds	r7, #40	; 0x28
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}
 8005188:	20000224 	.word	0x20000224

0800518c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800518c:	b580      	push	{r7, lr}
 800518e:	b088      	sub	sp, #32
 8005190:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005192:	e048      	b.n	8005226 <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005194:	4b2d      	ldr	r3, [pc, #180]	; (800524c <prvSwitchTimerLists+0xc0>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	68db      	ldr	r3, [r3, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800519e:	4b2b      	ldr	r3, [pc, #172]	; (800524c <prvSwitchTimerLists+0xc0>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	68db      	ldr	r3, [r3, #12]
 80051a4:	68db      	ldr	r3, [r3, #12]
 80051a6:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	3304      	adds	r3, #4
 80051ac:	4618      	mov	r0, r3
 80051ae:	f7fd ffe2 	bl	8003176 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	6a1b      	ldr	r3, [r3, #32]
 80051b6:	68f8      	ldr	r0, [r7, #12]
 80051b8:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80051c0:	f003 0304 	and.w	r3, r3, #4
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d02e      	beq.n	8005226 <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	699b      	ldr	r3, [r3, #24]
 80051cc:	693a      	ldr	r2, [r7, #16]
 80051ce:	4413      	add	r3, r2
 80051d0:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 80051d2:	68ba      	ldr	r2, [r7, #8]
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	429a      	cmp	r2, r3
 80051d8:	d90e      	bls.n	80051f8 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	68ba      	ldr	r2, [r7, #8]
 80051de:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	68fa      	ldr	r2, [r7, #12]
 80051e4:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80051e6:	4b19      	ldr	r3, [pc, #100]	; (800524c <prvSwitchTimerLists+0xc0>)
 80051e8:	681a      	ldr	r2, [r3, #0]
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	3304      	adds	r3, #4
 80051ee:	4619      	mov	r1, r3
 80051f0:	4610      	mov	r0, r2
 80051f2:	f7fd ff87 	bl	8003104 <vListInsert>
 80051f6:	e016      	b.n	8005226 <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80051f8:	2300      	movs	r3, #0
 80051fa:	9300      	str	r3, [sp, #0]
 80051fc:	2300      	movs	r3, #0
 80051fe:	693a      	ldr	r2, [r7, #16]
 8005200:	2100      	movs	r1, #0
 8005202:	68f8      	ldr	r0, [r7, #12]
 8005204:	f7ff fd7c 	bl	8004d00 <xTimerGenericCommand>
 8005208:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d10a      	bne.n	8005226 <prvSwitchTimerLists+0x9a>
        __asm volatile
 8005210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005214:	f383 8811 	msr	BASEPRI, r3
 8005218:	f3bf 8f6f 	isb	sy
 800521c:	f3bf 8f4f 	dsb	sy
 8005220:	603b      	str	r3, [r7, #0]
    }
 8005222:	bf00      	nop
 8005224:	e7fe      	b.n	8005224 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005226:	4b09      	ldr	r3, [pc, #36]	; (800524c <prvSwitchTimerLists+0xc0>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d1b1      	bne.n	8005194 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8005230:	4b06      	ldr	r3, [pc, #24]	; (800524c <prvSwitchTimerLists+0xc0>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8005236:	4b06      	ldr	r3, [pc, #24]	; (8005250 <prvSwitchTimerLists+0xc4>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a04      	ldr	r2, [pc, #16]	; (800524c <prvSwitchTimerLists+0xc0>)
 800523c:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800523e:	4a04      	ldr	r2, [pc, #16]	; (8005250 <prvSwitchTimerLists+0xc4>)
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	6013      	str	r3, [r2, #0]
    }
 8005244:	bf00      	nop
 8005246:	3718      	adds	r7, #24
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}
 800524c:	2000021c 	.word	0x2000021c
 8005250:	20000220 	.word	0x20000220

08005254 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8005254:	b580      	push	{r7, lr}
 8005256:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8005258:	f000 f95e 	bl	8005518 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800525c:	4b12      	ldr	r3, [pc, #72]	; (80052a8 <prvCheckForValidListAndQueue+0x54>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d11d      	bne.n	80052a0 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8005264:	4811      	ldr	r0, [pc, #68]	; (80052ac <prvCheckForValidListAndQueue+0x58>)
 8005266:	f7fd fefc 	bl	8003062 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800526a:	4811      	ldr	r0, [pc, #68]	; (80052b0 <prvCheckForValidListAndQueue+0x5c>)
 800526c:	f7fd fef9 	bl	8003062 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8005270:	4b10      	ldr	r3, [pc, #64]	; (80052b4 <prvCheckForValidListAndQueue+0x60>)
 8005272:	4a0e      	ldr	r2, [pc, #56]	; (80052ac <prvCheckForValidListAndQueue+0x58>)
 8005274:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8005276:	4b10      	ldr	r3, [pc, #64]	; (80052b8 <prvCheckForValidListAndQueue+0x64>)
 8005278:	4a0d      	ldr	r2, [pc, #52]	; (80052b0 <prvCheckForValidListAndQueue+0x5c>)
 800527a:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800527c:	2200      	movs	r2, #0
 800527e:	210c      	movs	r1, #12
 8005280:	2005      	movs	r0, #5
 8005282:	f7fe f80b 	bl	800329c <xQueueGenericCreate>
 8005286:	4603      	mov	r3, r0
 8005288:	4a07      	ldr	r2, [pc, #28]	; (80052a8 <prvCheckForValidListAndQueue+0x54>)
 800528a:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 800528c:	4b06      	ldr	r3, [pc, #24]	; (80052a8 <prvCheckForValidListAndQueue+0x54>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d005      	beq.n	80052a0 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005294:	4b04      	ldr	r3, [pc, #16]	; (80052a8 <prvCheckForValidListAndQueue+0x54>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4908      	ldr	r1, [pc, #32]	; (80052bc <prvCheckForValidListAndQueue+0x68>)
 800529a:	4618      	mov	r0, r3
 800529c:	f7fe fc4e 	bl	8003b3c <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80052a0:	f000 f96a 	bl	8005578 <vPortExitCritical>
    }
 80052a4:	bf00      	nop
 80052a6:	bd80      	pop	{r7, pc}
 80052a8:	20000224 	.word	0x20000224
 80052ac:	200001f4 	.word	0x200001f4
 80052b0:	20000208 	.word	0x20000208
 80052b4:	2000021c 	.word	0x2000021c
 80052b8:	20000220 	.word	0x20000220
 80052bc:	08005bdc 	.word	0x08005bdc

080052c0 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80052c0:	b480      	push	{r7}
 80052c2:	b085      	sub	sp, #20
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	60f8      	str	r0, [r7, #12]
 80052c8:	60b9      	str	r1, [r7, #8]
 80052ca:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	3b04      	subs	r3, #4
 80052d0:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80052d8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	3b04      	subs	r3, #4
 80052de:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	f023 0201 	bic.w	r2, r3, #1
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	3b04      	subs	r3, #4
 80052ee:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80052f0:	4a0c      	ldr	r2, [pc, #48]	; (8005324 <pxPortInitialiseStack+0x64>)
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	3b14      	subs	r3, #20
 80052fa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80052fc:	687a      	ldr	r2, [r7, #4]
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	3b04      	subs	r3, #4
 8005306:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f06f 0202 	mvn.w	r2, #2
 800530e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	3b20      	subs	r3, #32
 8005314:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8005316:	68fb      	ldr	r3, [r7, #12]
}
 8005318:	4618      	mov	r0, r3
 800531a:	3714      	adds	r7, #20
 800531c:	46bd      	mov	sp, r7
 800531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005322:	4770      	bx	lr
 8005324:	08005329 	.word	0x08005329

08005328 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005328:	b480      	push	{r7}
 800532a:	b085      	sub	sp, #20
 800532c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800532e:	2300      	movs	r3, #0
 8005330:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8005332:	4b12      	ldr	r3, [pc, #72]	; (800537c <prvTaskExitError+0x54>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f1b3 3fff 	cmp.w	r3, #4294967295
 800533a:	d00a      	beq.n	8005352 <prvTaskExitError+0x2a>
        __asm volatile
 800533c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005340:	f383 8811 	msr	BASEPRI, r3
 8005344:	f3bf 8f6f 	isb	sy
 8005348:	f3bf 8f4f 	dsb	sy
 800534c:	60fb      	str	r3, [r7, #12]
    }
 800534e:	bf00      	nop
 8005350:	e7fe      	b.n	8005350 <prvTaskExitError+0x28>
        __asm volatile
 8005352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005356:	f383 8811 	msr	BASEPRI, r3
 800535a:	f3bf 8f6f 	isb	sy
 800535e:	f3bf 8f4f 	dsb	sy
 8005362:	60bb      	str	r3, [r7, #8]
    }
 8005364:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8005366:	bf00      	nop
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d0fc      	beq.n	8005368 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800536e:	bf00      	nop
 8005370:	bf00      	nop
 8005372:	3714      	adds	r7, #20
 8005374:	46bd      	mov	sp, r7
 8005376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537a:	4770      	bx	lr
 800537c:	2000000c 	.word	0x2000000c

08005380 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8005380:	4b07      	ldr	r3, [pc, #28]	; (80053a0 <pxCurrentTCBConst2>)
 8005382:	6819      	ldr	r1, [r3, #0]
 8005384:	6808      	ldr	r0, [r1, #0]
 8005386:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800538a:	f380 8809 	msr	PSP, r0
 800538e:	f3bf 8f6f 	isb	sy
 8005392:	f04f 0000 	mov.w	r0, #0
 8005396:	f380 8811 	msr	BASEPRI, r0
 800539a:	4770      	bx	lr
 800539c:	f3af 8000 	nop.w

080053a0 <pxCurrentTCBConst2>:
 80053a0:	200000e8 	.word	0x200000e8
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80053a4:	bf00      	nop
 80053a6:	bf00      	nop

080053a8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80053a8:	4808      	ldr	r0, [pc, #32]	; (80053cc <prvPortStartFirstTask+0x24>)
 80053aa:	6800      	ldr	r0, [r0, #0]
 80053ac:	6800      	ldr	r0, [r0, #0]
 80053ae:	f380 8808 	msr	MSP, r0
 80053b2:	f04f 0000 	mov.w	r0, #0
 80053b6:	f380 8814 	msr	CONTROL, r0
 80053ba:	b662      	cpsie	i
 80053bc:	b661      	cpsie	f
 80053be:	f3bf 8f4f 	dsb	sy
 80053c2:	f3bf 8f6f 	isb	sy
 80053c6:	df00      	svc	0
 80053c8:	bf00      	nop
 80053ca:	0000      	.short	0x0000
 80053cc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80053d0:	bf00      	nop
 80053d2:	bf00      	nop

080053d4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b086      	sub	sp, #24
 80053d8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80053da:	4b46      	ldr	r3, [pc, #280]	; (80054f4 <xPortStartScheduler+0x120>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a46      	ldr	r2, [pc, #280]	; (80054f8 <xPortStartScheduler+0x124>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d10a      	bne.n	80053fa <xPortStartScheduler+0x26>
        __asm volatile
 80053e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053e8:	f383 8811 	msr	BASEPRI, r3
 80053ec:	f3bf 8f6f 	isb	sy
 80053f0:	f3bf 8f4f 	dsb	sy
 80053f4:	613b      	str	r3, [r7, #16]
    }
 80053f6:	bf00      	nop
 80053f8:	e7fe      	b.n	80053f8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80053fa:	4b3e      	ldr	r3, [pc, #248]	; (80054f4 <xPortStartScheduler+0x120>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a3f      	ldr	r2, [pc, #252]	; (80054fc <xPortStartScheduler+0x128>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d10a      	bne.n	800541a <xPortStartScheduler+0x46>
        __asm volatile
 8005404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005408:	f383 8811 	msr	BASEPRI, r3
 800540c:	f3bf 8f6f 	isb	sy
 8005410:	f3bf 8f4f 	dsb	sy
 8005414:	60fb      	str	r3, [r7, #12]
    }
 8005416:	bf00      	nop
 8005418:	e7fe      	b.n	8005418 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800541a:	4b39      	ldr	r3, [pc, #228]	; (8005500 <xPortStartScheduler+0x12c>)
 800541c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	781b      	ldrb	r3, [r3, #0]
 8005422:	b2db      	uxtb	r3, r3
 8005424:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	22ff      	movs	r2, #255	; 0xff
 800542a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	781b      	ldrb	r3, [r3, #0]
 8005430:	b2db      	uxtb	r3, r3
 8005432:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005434:	78fb      	ldrb	r3, [r7, #3]
 8005436:	b2db      	uxtb	r3, r3
 8005438:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800543c:	b2da      	uxtb	r2, r3
 800543e:	4b31      	ldr	r3, [pc, #196]	; (8005504 <xPortStartScheduler+0x130>)
 8005440:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005442:	4b31      	ldr	r3, [pc, #196]	; (8005508 <xPortStartScheduler+0x134>)
 8005444:	2207      	movs	r2, #7
 8005446:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005448:	e009      	b.n	800545e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800544a:	4b2f      	ldr	r3, [pc, #188]	; (8005508 <xPortStartScheduler+0x134>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	3b01      	subs	r3, #1
 8005450:	4a2d      	ldr	r2, [pc, #180]	; (8005508 <xPortStartScheduler+0x134>)
 8005452:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005454:	78fb      	ldrb	r3, [r7, #3]
 8005456:	b2db      	uxtb	r3, r3
 8005458:	005b      	lsls	r3, r3, #1
 800545a:	b2db      	uxtb	r3, r3
 800545c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800545e:	78fb      	ldrb	r3, [r7, #3]
 8005460:	b2db      	uxtb	r3, r3
 8005462:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005466:	2b80      	cmp	r3, #128	; 0x80
 8005468:	d0ef      	beq.n	800544a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800546a:	4b27      	ldr	r3, [pc, #156]	; (8005508 <xPortStartScheduler+0x134>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f1c3 0307 	rsb	r3, r3, #7
 8005472:	2b04      	cmp	r3, #4
 8005474:	d00a      	beq.n	800548c <xPortStartScheduler+0xb8>
        __asm volatile
 8005476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800547a:	f383 8811 	msr	BASEPRI, r3
 800547e:	f3bf 8f6f 	isb	sy
 8005482:	f3bf 8f4f 	dsb	sy
 8005486:	60bb      	str	r3, [r7, #8]
    }
 8005488:	bf00      	nop
 800548a:	e7fe      	b.n	800548a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800548c:	4b1e      	ldr	r3, [pc, #120]	; (8005508 <xPortStartScheduler+0x134>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	021b      	lsls	r3, r3, #8
 8005492:	4a1d      	ldr	r2, [pc, #116]	; (8005508 <xPortStartScheduler+0x134>)
 8005494:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005496:	4b1c      	ldr	r3, [pc, #112]	; (8005508 <xPortStartScheduler+0x134>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800549e:	4a1a      	ldr	r2, [pc, #104]	; (8005508 <xPortStartScheduler+0x134>)
 80054a0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	b2da      	uxtb	r2, r3
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80054aa:	4b18      	ldr	r3, [pc, #96]	; (800550c <xPortStartScheduler+0x138>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a17      	ldr	r2, [pc, #92]	; (800550c <xPortStartScheduler+0x138>)
 80054b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80054b4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80054b6:	4b15      	ldr	r3, [pc, #84]	; (800550c <xPortStartScheduler+0x138>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a14      	ldr	r2, [pc, #80]	; (800550c <xPortStartScheduler+0x138>)
 80054bc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80054c0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80054c2:	f000 f8db 	bl	800567c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80054c6:	4b12      	ldr	r3, [pc, #72]	; (8005510 <xPortStartScheduler+0x13c>)
 80054c8:	2200      	movs	r2, #0
 80054ca:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80054cc:	f000 f8f0 	bl	80056b0 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80054d0:	4b10      	ldr	r3, [pc, #64]	; (8005514 <xPortStartScheduler+0x140>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a0f      	ldr	r2, [pc, #60]	; (8005514 <xPortStartScheduler+0x140>)
 80054d6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80054da:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80054dc:	f7ff ff64 	bl	80053a8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80054e0:	f7fe ff08 	bl	80042f4 <vTaskSwitchContext>
    prvTaskExitError();
 80054e4:	f7ff ff20 	bl	8005328 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80054e8:	2300      	movs	r3, #0
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	3718      	adds	r7, #24
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}
 80054f2:	bf00      	nop
 80054f4:	e000ed00 	.word	0xe000ed00
 80054f8:	410fc271 	.word	0x410fc271
 80054fc:	410fc270 	.word	0x410fc270
 8005500:	e000e400 	.word	0xe000e400
 8005504:	20000230 	.word	0x20000230
 8005508:	20000234 	.word	0x20000234
 800550c:	e000ed20 	.word	0xe000ed20
 8005510:	2000000c 	.word	0x2000000c
 8005514:	e000ef34 	.word	0xe000ef34

08005518 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005518:	b480      	push	{r7}
 800551a:	b083      	sub	sp, #12
 800551c:	af00      	add	r7, sp, #0
        __asm volatile
 800551e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005522:	f383 8811 	msr	BASEPRI, r3
 8005526:	f3bf 8f6f 	isb	sy
 800552a:	f3bf 8f4f 	dsb	sy
 800552e:	607b      	str	r3, [r7, #4]
    }
 8005530:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8005532:	4b0f      	ldr	r3, [pc, #60]	; (8005570 <vPortEnterCritical+0x58>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	3301      	adds	r3, #1
 8005538:	4a0d      	ldr	r2, [pc, #52]	; (8005570 <vPortEnterCritical+0x58>)
 800553a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800553c:	4b0c      	ldr	r3, [pc, #48]	; (8005570 <vPortEnterCritical+0x58>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	2b01      	cmp	r3, #1
 8005542:	d10f      	bne.n	8005564 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005544:	4b0b      	ldr	r3, [pc, #44]	; (8005574 <vPortEnterCritical+0x5c>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	b2db      	uxtb	r3, r3
 800554a:	2b00      	cmp	r3, #0
 800554c:	d00a      	beq.n	8005564 <vPortEnterCritical+0x4c>
        __asm volatile
 800554e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005552:	f383 8811 	msr	BASEPRI, r3
 8005556:	f3bf 8f6f 	isb	sy
 800555a:	f3bf 8f4f 	dsb	sy
 800555e:	603b      	str	r3, [r7, #0]
    }
 8005560:	bf00      	nop
 8005562:	e7fe      	b.n	8005562 <vPortEnterCritical+0x4a>
    }
}
 8005564:	bf00      	nop
 8005566:	370c      	adds	r7, #12
 8005568:	46bd      	mov	sp, r7
 800556a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556e:	4770      	bx	lr
 8005570:	2000000c 	.word	0x2000000c
 8005574:	e000ed04 	.word	0xe000ed04

08005578 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005578:	b480      	push	{r7}
 800557a:	b083      	sub	sp, #12
 800557c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800557e:	4b12      	ldr	r3, [pc, #72]	; (80055c8 <vPortExitCritical+0x50>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d10a      	bne.n	800559c <vPortExitCritical+0x24>
        __asm volatile
 8005586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800558a:	f383 8811 	msr	BASEPRI, r3
 800558e:	f3bf 8f6f 	isb	sy
 8005592:	f3bf 8f4f 	dsb	sy
 8005596:	607b      	str	r3, [r7, #4]
    }
 8005598:	bf00      	nop
 800559a:	e7fe      	b.n	800559a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800559c:	4b0a      	ldr	r3, [pc, #40]	; (80055c8 <vPortExitCritical+0x50>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	3b01      	subs	r3, #1
 80055a2:	4a09      	ldr	r2, [pc, #36]	; (80055c8 <vPortExitCritical+0x50>)
 80055a4:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80055a6:	4b08      	ldr	r3, [pc, #32]	; (80055c8 <vPortExitCritical+0x50>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d105      	bne.n	80055ba <vPortExitCritical+0x42>
 80055ae:	2300      	movs	r3, #0
 80055b0:	603b      	str	r3, [r7, #0]
        __asm volatile
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	f383 8811 	msr	BASEPRI, r3
    }
 80055b8:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80055ba:	bf00      	nop
 80055bc:	370c      	adds	r7, #12
 80055be:	46bd      	mov	sp, r7
 80055c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c4:	4770      	bx	lr
 80055c6:	bf00      	nop
 80055c8:	2000000c 	.word	0x2000000c
 80055cc:	00000000 	.word	0x00000000

080055d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80055d0:	f3ef 8009 	mrs	r0, PSP
 80055d4:	f3bf 8f6f 	isb	sy
 80055d8:	4b15      	ldr	r3, [pc, #84]	; (8005630 <pxCurrentTCBConst>)
 80055da:	681a      	ldr	r2, [r3, #0]
 80055dc:	f01e 0f10 	tst.w	lr, #16
 80055e0:	bf08      	it	eq
 80055e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80055e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055ea:	6010      	str	r0, [r2, #0]
 80055ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80055f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80055f4:	f380 8811 	msr	BASEPRI, r0
 80055f8:	f3bf 8f4f 	dsb	sy
 80055fc:	f3bf 8f6f 	isb	sy
 8005600:	f7fe fe78 	bl	80042f4 <vTaskSwitchContext>
 8005604:	f04f 0000 	mov.w	r0, #0
 8005608:	f380 8811 	msr	BASEPRI, r0
 800560c:	bc09      	pop	{r0, r3}
 800560e:	6819      	ldr	r1, [r3, #0]
 8005610:	6808      	ldr	r0, [r1, #0]
 8005612:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005616:	f01e 0f10 	tst.w	lr, #16
 800561a:	bf08      	it	eq
 800561c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005620:	f380 8809 	msr	PSP, r0
 8005624:	f3bf 8f6f 	isb	sy
 8005628:	4770      	bx	lr
 800562a:	bf00      	nop
 800562c:	f3af 8000 	nop.w

08005630 <pxCurrentTCBConst>:
 8005630:	200000e8 	.word	0x200000e8
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8005634:	bf00      	nop
 8005636:	bf00      	nop

08005638 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b082      	sub	sp, #8
 800563c:	af00      	add	r7, sp, #0
        __asm volatile
 800563e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005642:	f383 8811 	msr	BASEPRI, r3
 8005646:	f3bf 8f6f 	isb	sy
 800564a:	f3bf 8f4f 	dsb	sy
 800564e:	607b      	str	r3, [r7, #4]
    }
 8005650:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8005652:	f7fe fd97 	bl	8004184 <xTaskIncrementTick>
 8005656:	4603      	mov	r3, r0
 8005658:	2b00      	cmp	r3, #0
 800565a:	d003      	beq.n	8005664 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800565c:	4b06      	ldr	r3, [pc, #24]	; (8005678 <SysTick_Handler+0x40>)
 800565e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005662:	601a      	str	r2, [r3, #0]
 8005664:	2300      	movs	r3, #0
 8005666:	603b      	str	r3, [r7, #0]
        __asm volatile
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	f383 8811 	msr	BASEPRI, r3
    }
 800566e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8005670:	bf00      	nop
 8005672:	3708      	adds	r7, #8
 8005674:	46bd      	mov	sp, r7
 8005676:	bd80      	pop	{r7, pc}
 8005678:	e000ed04 	.word	0xe000ed04

0800567c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800567c:	b480      	push	{r7}
 800567e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005680:	4b08      	ldr	r3, [pc, #32]	; (80056a4 <vPortSetupTimerInterrupt+0x28>)
 8005682:	2200      	movs	r2, #0
 8005684:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005686:	4b08      	ldr	r3, [pc, #32]	; (80056a8 <vPortSetupTimerInterrupt+0x2c>)
 8005688:	2200      	movs	r2, #0
 800568a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800568c:	4b07      	ldr	r3, [pc, #28]	; (80056ac <vPortSetupTimerInterrupt+0x30>)
 800568e:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 8005692:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005694:	4b03      	ldr	r3, [pc, #12]	; (80056a4 <vPortSetupTimerInterrupt+0x28>)
 8005696:	2207      	movs	r2, #7
 8005698:	601a      	str	r2, [r3, #0]
}
 800569a:	bf00      	nop
 800569c:	46bd      	mov	sp, r7
 800569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a2:	4770      	bx	lr
 80056a4:	e000e010 	.word	0xe000e010
 80056a8:	e000e018 	.word	0xe000e018
 80056ac:	e000e014 	.word	0xe000e014

080056b0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80056b0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80056c0 <vPortEnableVFP+0x10>
 80056b4:	6801      	ldr	r1, [r0, #0]
 80056b6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80056ba:	6001      	str	r1, [r0, #0]
 80056bc:	4770      	bx	lr
 80056be:	0000      	.short	0x0000
 80056c0:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80056c4:	bf00      	nop
 80056c6:	bf00      	nop

080056c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80056c8:	b480      	push	{r7}
 80056ca:	b085      	sub	sp, #20
 80056cc:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80056ce:	f3ef 8305 	mrs	r3, IPSR
 80056d2:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2b0f      	cmp	r3, #15
 80056d8:	d914      	bls.n	8005704 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80056da:	4a17      	ldr	r2, [pc, #92]	; (8005738 <vPortValidateInterruptPriority+0x70>)
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	4413      	add	r3, r2
 80056e0:	781b      	ldrb	r3, [r3, #0]
 80056e2:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80056e4:	4b15      	ldr	r3, [pc, #84]	; (800573c <vPortValidateInterruptPriority+0x74>)
 80056e6:	781b      	ldrb	r3, [r3, #0]
 80056e8:	7afa      	ldrb	r2, [r7, #11]
 80056ea:	429a      	cmp	r2, r3
 80056ec:	d20a      	bcs.n	8005704 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 80056ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056f2:	f383 8811 	msr	BASEPRI, r3
 80056f6:	f3bf 8f6f 	isb	sy
 80056fa:	f3bf 8f4f 	dsb	sy
 80056fe:	607b      	str	r3, [r7, #4]
    }
 8005700:	bf00      	nop
 8005702:	e7fe      	b.n	8005702 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005704:	4b0e      	ldr	r3, [pc, #56]	; (8005740 <vPortValidateInterruptPriority+0x78>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800570c:	4b0d      	ldr	r3, [pc, #52]	; (8005744 <vPortValidateInterruptPriority+0x7c>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	429a      	cmp	r2, r3
 8005712:	d90a      	bls.n	800572a <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8005714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005718:	f383 8811 	msr	BASEPRI, r3
 800571c:	f3bf 8f6f 	isb	sy
 8005720:	f3bf 8f4f 	dsb	sy
 8005724:	603b      	str	r3, [r7, #0]
    }
 8005726:	bf00      	nop
 8005728:	e7fe      	b.n	8005728 <vPortValidateInterruptPriority+0x60>
    }
 800572a:	bf00      	nop
 800572c:	3714      	adds	r7, #20
 800572e:	46bd      	mov	sp, r7
 8005730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005734:	4770      	bx	lr
 8005736:	bf00      	nop
 8005738:	e000e3f0 	.word	0xe000e3f0
 800573c:	20000230 	.word	0x20000230
 8005740:	e000ed0c 	.word	0xe000ed0c
 8005744:	20000234 	.word	0x20000234

08005748 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b08a      	sub	sp, #40	; 0x28
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8005750:	2300      	movs	r3, #0
 8005752:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8005754:	f7fe fc5c 	bl	8004010 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8005758:	4b5b      	ldr	r3, [pc, #364]	; (80058c8 <pvPortMalloc+0x180>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d101      	bne.n	8005764 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8005760:	f000 f920 	bl	80059a4 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005764:	4b59      	ldr	r3, [pc, #356]	; (80058cc <pvPortMalloc+0x184>)
 8005766:	681a      	ldr	r2, [r3, #0]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	4013      	ands	r3, r2
 800576c:	2b00      	cmp	r3, #0
 800576e:	f040 8093 	bne.w	8005898 <pvPortMalloc+0x150>
        {
            /* The wanted size is increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( xWantedSize > 0 )
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d01d      	beq.n	80057b4 <pvPortMalloc+0x6c>
            {
                xWantedSize += xHeapStructSize;
 8005778:	2208      	movs	r2, #8
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	4413      	add	r3, r2
 800577e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned to the required number
                 * of bytes. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	f003 0307 	and.w	r3, r3, #7
 8005786:	2b00      	cmp	r3, #0
 8005788:	d014      	beq.n	80057b4 <pvPortMalloc+0x6c>
                {
                    /* Byte alignment required. */
                    xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	f023 0307 	bic.w	r3, r3, #7
 8005790:	3308      	adds	r3, #8
 8005792:	607b      	str	r3, [r7, #4]
                    configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	f003 0307 	and.w	r3, r3, #7
 800579a:	2b00      	cmp	r3, #0
 800579c:	d00a      	beq.n	80057b4 <pvPortMalloc+0x6c>
        __asm volatile
 800579e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057a2:	f383 8811 	msr	BASEPRI, r3
 80057a6:	f3bf 8f6f 	isb	sy
 80057aa:	f3bf 8f4f 	dsb	sy
 80057ae:	617b      	str	r3, [r7, #20]
    }
 80057b0:	bf00      	nop
 80057b2:	e7fe      	b.n	80057b2 <pvPortMalloc+0x6a>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d06e      	beq.n	8005898 <pvPortMalloc+0x150>
 80057ba:	4b45      	ldr	r3, [pc, #276]	; (80058d0 <pvPortMalloc+0x188>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	687a      	ldr	r2, [r7, #4]
 80057c0:	429a      	cmp	r2, r3
 80057c2:	d869      	bhi.n	8005898 <pvPortMalloc+0x150>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one	of adequate size is found. */
                pxPreviousBlock = &xStart;
 80057c4:	4b43      	ldr	r3, [pc, #268]	; (80058d4 <pvPortMalloc+0x18c>)
 80057c6:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80057c8:	4b42      	ldr	r3, [pc, #264]	; (80058d4 <pvPortMalloc+0x18c>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80057ce:	e004      	b.n	80057da <pvPortMalloc+0x92>
                {
                    pxPreviousBlock = pxBlock;
 80057d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d2:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80057d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80057da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	687a      	ldr	r2, [r7, #4]
 80057e0:	429a      	cmp	r2, r3
 80057e2:	d903      	bls.n	80057ec <pvPortMalloc+0xa4>
 80057e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d1f1      	bne.n	80057d0 <pvPortMalloc+0x88>
                }

                /* If the end marker was reached then a block of adequate size
                 * was	not found. */
                if( pxBlock != pxEnd )
 80057ec:	4b36      	ldr	r3, [pc, #216]	; (80058c8 <pvPortMalloc+0x180>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057f2:	429a      	cmp	r2, r3
 80057f4:	d050      	beq.n	8005898 <pvPortMalloc+0x150>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80057f6:	6a3b      	ldr	r3, [r7, #32]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	2208      	movs	r2, #8
 80057fc:	4413      	add	r3, r2
 80057fe:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005802:	681a      	ldr	r2, [r3, #0]
 8005804:	6a3b      	ldr	r3, [r7, #32]
 8005806:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580a:	685a      	ldr	r2, [r3, #4]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	1ad2      	subs	r2, r2, r3
 8005810:	2308      	movs	r3, #8
 8005812:	005b      	lsls	r3, r3, #1
 8005814:	429a      	cmp	r2, r3
 8005816:	d91f      	bls.n	8005858 <pvPortMalloc+0x110>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005818:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	4413      	add	r3, r2
 800581e:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005820:	69bb      	ldr	r3, [r7, #24]
 8005822:	f003 0307 	and.w	r3, r3, #7
 8005826:	2b00      	cmp	r3, #0
 8005828:	d00a      	beq.n	8005840 <pvPortMalloc+0xf8>
        __asm volatile
 800582a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800582e:	f383 8811 	msr	BASEPRI, r3
 8005832:	f3bf 8f6f 	isb	sy
 8005836:	f3bf 8f4f 	dsb	sy
 800583a:	613b      	str	r3, [r7, #16]
    }
 800583c:	bf00      	nop
 800583e:	e7fe      	b.n	800583e <pvPortMalloc+0xf6>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005842:	685a      	ldr	r2, [r3, #4]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	1ad2      	subs	r2, r2, r3
 8005848:	69bb      	ldr	r3, [r7, #24]
 800584a:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 800584c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800584e:	687a      	ldr	r2, [r7, #4]
 8005850:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005852:	69b8      	ldr	r0, [r7, #24]
 8005854:	f000 f908 	bl	8005a68 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005858:	4b1d      	ldr	r3, [pc, #116]	; (80058d0 <pvPortMalloc+0x188>)
 800585a:	681a      	ldr	r2, [r3, #0]
 800585c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	1ad3      	subs	r3, r2, r3
 8005862:	4a1b      	ldr	r2, [pc, #108]	; (80058d0 <pvPortMalloc+0x188>)
 8005864:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005866:	4b1a      	ldr	r3, [pc, #104]	; (80058d0 <pvPortMalloc+0x188>)
 8005868:	681a      	ldr	r2, [r3, #0]
 800586a:	4b1b      	ldr	r3, [pc, #108]	; (80058d8 <pvPortMalloc+0x190>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	429a      	cmp	r2, r3
 8005870:	d203      	bcs.n	800587a <pvPortMalloc+0x132>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005872:	4b17      	ldr	r3, [pc, #92]	; (80058d0 <pvPortMalloc+0x188>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a18      	ldr	r2, [pc, #96]	; (80058d8 <pvPortMalloc+0x190>)
 8005878:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 800587a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800587c:	685a      	ldr	r2, [r3, #4]
 800587e:	4b13      	ldr	r3, [pc, #76]	; (80058cc <pvPortMalloc+0x184>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	431a      	orrs	r2, r3
 8005884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005886:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8005888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800588a:	2200      	movs	r2, #0
 800588c:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800588e:	4b13      	ldr	r3, [pc, #76]	; (80058dc <pvPortMalloc+0x194>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	3301      	adds	r3, #1
 8005894:	4a11      	ldr	r2, [pc, #68]	; (80058dc <pvPortMalloc+0x194>)
 8005896:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8005898:	f7fe fbc8 	bl	800402c <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800589c:	69fb      	ldr	r3, [r7, #28]
 800589e:	f003 0307 	and.w	r3, r3, #7
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d00a      	beq.n	80058bc <pvPortMalloc+0x174>
        __asm volatile
 80058a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058aa:	f383 8811 	msr	BASEPRI, r3
 80058ae:	f3bf 8f6f 	isb	sy
 80058b2:	f3bf 8f4f 	dsb	sy
 80058b6:	60fb      	str	r3, [r7, #12]
    }
 80058b8:	bf00      	nop
 80058ba:	e7fe      	b.n	80058ba <pvPortMalloc+0x172>
    return pvReturn;
 80058bc:	69fb      	ldr	r3, [r7, #28]
}
 80058be:	4618      	mov	r0, r3
 80058c0:	3728      	adds	r7, #40	; 0x28
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}
 80058c6:	bf00      	nop
 80058c8:	20004240 	.word	0x20004240
 80058cc:	20004254 	.word	0x20004254
 80058d0:	20004244 	.word	0x20004244
 80058d4:	20004238 	.word	0x20004238
 80058d8:	20004248 	.word	0x20004248
 80058dc:	2000424c 	.word	0x2000424c

080058e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b086      	sub	sp, #24
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d04d      	beq.n	800598e <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80058f2:	2308      	movs	r3, #8
 80058f4:	425b      	negs	r3, r3
 80058f6:	697a      	ldr	r2, [r7, #20]
 80058f8:	4413      	add	r3, r2
 80058fa:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	685a      	ldr	r2, [r3, #4]
 8005904:	4b24      	ldr	r3, [pc, #144]	; (8005998 <vPortFree+0xb8>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4013      	ands	r3, r2
 800590a:	2b00      	cmp	r3, #0
 800590c:	d10a      	bne.n	8005924 <vPortFree+0x44>
        __asm volatile
 800590e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005912:	f383 8811 	msr	BASEPRI, r3
 8005916:	f3bf 8f6f 	isb	sy
 800591a:	f3bf 8f4f 	dsb	sy
 800591e:	60fb      	str	r3, [r7, #12]
    }
 8005920:	bf00      	nop
 8005922:	e7fe      	b.n	8005922 <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d00a      	beq.n	8005942 <vPortFree+0x62>
        __asm volatile
 800592c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005930:	f383 8811 	msr	BASEPRI, r3
 8005934:	f3bf 8f6f 	isb	sy
 8005938:	f3bf 8f4f 	dsb	sy
 800593c:	60bb      	str	r3, [r7, #8]
    }
 800593e:	bf00      	nop
 8005940:	e7fe      	b.n	8005940 <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	685a      	ldr	r2, [r3, #4]
 8005946:	4b14      	ldr	r3, [pc, #80]	; (8005998 <vPortFree+0xb8>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4013      	ands	r3, r2
 800594c:	2b00      	cmp	r3, #0
 800594e:	d01e      	beq.n	800598e <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d11a      	bne.n	800598e <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	685a      	ldr	r2, [r3, #4]
 800595c:	4b0e      	ldr	r3, [pc, #56]	; (8005998 <vPortFree+0xb8>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	43db      	mvns	r3, r3
 8005962:	401a      	ands	r2, r3
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8005968:	f7fe fb52 	bl	8004010 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	685a      	ldr	r2, [r3, #4]
 8005970:	4b0a      	ldr	r3, [pc, #40]	; (800599c <vPortFree+0xbc>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4413      	add	r3, r2
 8005976:	4a09      	ldr	r2, [pc, #36]	; (800599c <vPortFree+0xbc>)
 8005978:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800597a:	6938      	ldr	r0, [r7, #16]
 800597c:	f000 f874 	bl	8005a68 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8005980:	4b07      	ldr	r3, [pc, #28]	; (80059a0 <vPortFree+0xc0>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	3301      	adds	r3, #1
 8005986:	4a06      	ldr	r2, [pc, #24]	; (80059a0 <vPortFree+0xc0>)
 8005988:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800598a:	f7fe fb4f 	bl	800402c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800598e:	bf00      	nop
 8005990:	3718      	adds	r7, #24
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}
 8005996:	bf00      	nop
 8005998:	20004254 	.word	0x20004254
 800599c:	20004244 	.word	0x20004244
 80059a0:	20004250 	.word	0x20004250

080059a4 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80059a4:	b480      	push	{r7}
 80059a6:	b085      	sub	sp, #20
 80059a8:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80059aa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80059ae:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80059b0:	4b27      	ldr	r3, [pc, #156]	; (8005a50 <prvHeapInit+0xac>)
 80059b2:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	f003 0307 	and.w	r3, r3, #7
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d00c      	beq.n	80059d8 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	3307      	adds	r3, #7
 80059c2:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f023 0307 	bic.w	r3, r3, #7
 80059ca:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80059cc:	68ba      	ldr	r2, [r7, #8]
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	1ad3      	subs	r3, r2, r3
 80059d2:	4a1f      	ldr	r2, [pc, #124]	; (8005a50 <prvHeapInit+0xac>)
 80059d4:	4413      	add	r3, r2
 80059d6:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80059dc:	4a1d      	ldr	r2, [pc, #116]	; (8005a54 <prvHeapInit+0xb0>)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80059e2:	4b1c      	ldr	r3, [pc, #112]	; (8005a54 <prvHeapInit+0xb0>)
 80059e4:	2200      	movs	r2, #0
 80059e6:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	68ba      	ldr	r2, [r7, #8]
 80059ec:	4413      	add	r3, r2
 80059ee:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80059f0:	2208      	movs	r2, #8
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	1a9b      	subs	r3, r3, r2
 80059f6:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	f023 0307 	bic.w	r3, r3, #7
 80059fe:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	4a15      	ldr	r2, [pc, #84]	; (8005a58 <prvHeapInit+0xb4>)
 8005a04:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8005a06:	4b14      	ldr	r3, [pc, #80]	; (8005a58 <prvHeapInit+0xb4>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8005a0e:	4b12      	ldr	r3, [pc, #72]	; (8005a58 <prvHeapInit+0xb4>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	2200      	movs	r2, #0
 8005a14:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	68fa      	ldr	r2, [r7, #12]
 8005a1e:	1ad2      	subs	r2, r2, r3
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005a24:	4b0c      	ldr	r3, [pc, #48]	; (8005a58 <prvHeapInit+0xb4>)
 8005a26:	681a      	ldr	r2, [r3, #0]
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	4a0a      	ldr	r2, [pc, #40]	; (8005a5c <prvHeapInit+0xb8>)
 8005a32:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	4a09      	ldr	r2, [pc, #36]	; (8005a60 <prvHeapInit+0xbc>)
 8005a3a:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005a3c:	4b09      	ldr	r3, [pc, #36]	; (8005a64 <prvHeapInit+0xc0>)
 8005a3e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005a42:	601a      	str	r2, [r3, #0]
}
 8005a44:	bf00      	nop
 8005a46:	3714      	adds	r7, #20
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4e:	4770      	bx	lr
 8005a50:	20000238 	.word	0x20000238
 8005a54:	20004238 	.word	0x20004238
 8005a58:	20004240 	.word	0x20004240
 8005a5c:	20004248 	.word	0x20004248
 8005a60:	20004244 	.word	0x20004244
 8005a64:	20004254 	.word	0x20004254

08005a68 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b085      	sub	sp, #20
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005a70:	4b28      	ldr	r3, [pc, #160]	; (8005b14 <prvInsertBlockIntoFreeList+0xac>)
 8005a72:	60fb      	str	r3, [r7, #12]
 8005a74:	e002      	b.n	8005a7c <prvInsertBlockIntoFreeList+0x14>
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	60fb      	str	r3, [r7, #12]
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	687a      	ldr	r2, [r7, #4]
 8005a82:	429a      	cmp	r2, r3
 8005a84:	d8f7      	bhi.n	8005a76 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	68ba      	ldr	r2, [r7, #8]
 8005a90:	4413      	add	r3, r2
 8005a92:	687a      	ldr	r2, [r7, #4]
 8005a94:	429a      	cmp	r2, r3
 8005a96:	d108      	bne.n	8005aaa <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	685a      	ldr	r2, [r3, #4]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	441a      	add	r2, r3
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	68ba      	ldr	r2, [r7, #8]
 8005ab4:	441a      	add	r2, r3
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	429a      	cmp	r2, r3
 8005abc:	d118      	bne.n	8005af0 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681a      	ldr	r2, [r3, #0]
 8005ac2:	4b15      	ldr	r3, [pc, #84]	; (8005b18 <prvInsertBlockIntoFreeList+0xb0>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	429a      	cmp	r2, r3
 8005ac8:	d00d      	beq.n	8005ae6 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	685a      	ldr	r2, [r3, #4]
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	441a      	add	r2, r3
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	681a      	ldr	r2, [r3, #0]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	601a      	str	r2, [r3, #0]
 8005ae4:	e008      	b.n	8005af8 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005ae6:	4b0c      	ldr	r3, [pc, #48]	; (8005b18 <prvInsertBlockIntoFreeList+0xb0>)
 8005ae8:	681a      	ldr	r2, [r3, #0]
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	601a      	str	r2, [r3, #0]
 8005aee:	e003      	b.n	8005af8 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681a      	ldr	r2, [r3, #0]
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8005af8:	68fa      	ldr	r2, [r7, #12]
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	429a      	cmp	r2, r3
 8005afe:	d002      	beq.n	8005b06 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	687a      	ldr	r2, [r7, #4]
 8005b04:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005b06:	bf00      	nop
 8005b08:	3714      	adds	r7, #20
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b10:	4770      	bx	lr
 8005b12:	bf00      	nop
 8005b14:	20004238 	.word	0x20004238
 8005b18:	20004240 	.word	0x20004240

08005b1c <memset>:
 8005b1c:	4402      	add	r2, r0
 8005b1e:	4603      	mov	r3, r0
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d100      	bne.n	8005b26 <memset+0xa>
 8005b24:	4770      	bx	lr
 8005b26:	f803 1b01 	strb.w	r1, [r3], #1
 8005b2a:	e7f9      	b.n	8005b20 <memset+0x4>

08005b2c <__libc_init_array>:
 8005b2c:	b570      	push	{r4, r5, r6, lr}
 8005b2e:	4d0d      	ldr	r5, [pc, #52]	; (8005b64 <__libc_init_array+0x38>)
 8005b30:	4c0d      	ldr	r4, [pc, #52]	; (8005b68 <__libc_init_array+0x3c>)
 8005b32:	1b64      	subs	r4, r4, r5
 8005b34:	10a4      	asrs	r4, r4, #2
 8005b36:	2600      	movs	r6, #0
 8005b38:	42a6      	cmp	r6, r4
 8005b3a:	d109      	bne.n	8005b50 <__libc_init_array+0x24>
 8005b3c:	4d0b      	ldr	r5, [pc, #44]	; (8005b6c <__libc_init_array+0x40>)
 8005b3e:	4c0c      	ldr	r4, [pc, #48]	; (8005b70 <__libc_init_array+0x44>)
 8005b40:	f000 f826 	bl	8005b90 <_init>
 8005b44:	1b64      	subs	r4, r4, r5
 8005b46:	10a4      	asrs	r4, r4, #2
 8005b48:	2600      	movs	r6, #0
 8005b4a:	42a6      	cmp	r6, r4
 8005b4c:	d105      	bne.n	8005b5a <__libc_init_array+0x2e>
 8005b4e:	bd70      	pop	{r4, r5, r6, pc}
 8005b50:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b54:	4798      	blx	r3
 8005b56:	3601      	adds	r6, #1
 8005b58:	e7ee      	b.n	8005b38 <__libc_init_array+0xc>
 8005b5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b5e:	4798      	blx	r3
 8005b60:	3601      	adds	r6, #1
 8005b62:	e7f2      	b.n	8005b4a <__libc_init_array+0x1e>
 8005b64:	08005c34 	.word	0x08005c34
 8005b68:	08005c34 	.word	0x08005c34
 8005b6c:	08005c34 	.word	0x08005c34
 8005b70:	08005c38 	.word	0x08005c38

08005b74 <memcpy>:
 8005b74:	440a      	add	r2, r1
 8005b76:	4291      	cmp	r1, r2
 8005b78:	f100 33ff 	add.w	r3, r0, #4294967295
 8005b7c:	d100      	bne.n	8005b80 <memcpy+0xc>
 8005b7e:	4770      	bx	lr
 8005b80:	b510      	push	{r4, lr}
 8005b82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b86:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b8a:	4291      	cmp	r1, r2
 8005b8c:	d1f9      	bne.n	8005b82 <memcpy+0xe>
 8005b8e:	bd10      	pop	{r4, pc}

08005b90 <_init>:
 8005b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b92:	bf00      	nop
 8005b94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b96:	bc08      	pop	{r3}
 8005b98:	469e      	mov	lr, r3
 8005b9a:	4770      	bx	lr

08005b9c <_fini>:
 8005b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b9e:	bf00      	nop
 8005ba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ba2:	bc08      	pop	{r3}
 8005ba4:	469e      	mov	lr, r3
 8005ba6:	4770      	bx	lr
