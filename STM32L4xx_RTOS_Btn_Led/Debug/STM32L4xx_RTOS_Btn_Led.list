
STM32L4xx_RTOS_Btn_Led.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000056f8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08005888  08005888  00015888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800590c  0800590c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  0800590c  0800590c  0001590c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005914  08005914  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005914  08005914  00015914  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005918  08005918  00015918  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800591c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000424c  20000010  0800592c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000425c  0800592c  0002425c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fd86  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000262d  00000000  00000000  0002fe09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e60  00000000  00000000  00032438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b08  00000000  00000000  00033298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000263b9  00000000  00000000  00033da0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010cbd  00000000  00000000  0005a159  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ef95f  00000000  00000000  0006ae16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003ab0  00000000  00000000  0015a778  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  0015e228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005870 	.word	0x08005870

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08005870 	.word	0x08005870

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b970 	b.w	80004c8 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	460d      	mov	r5, r1
 8000208:	4604      	mov	r4, r0
 800020a:	460f      	mov	r7, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14a      	bne.n	80002a6 <__udivmoddi4+0xa6>
 8000210:	428a      	cmp	r2, r1
 8000212:	4694      	mov	ip, r2
 8000214:	d965      	bls.n	80002e2 <__udivmoddi4+0xe2>
 8000216:	fab2 f382 	clz	r3, r2
 800021a:	b143      	cbz	r3, 800022e <__udivmoddi4+0x2e>
 800021c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000220:	f1c3 0220 	rsb	r2, r3, #32
 8000224:	409f      	lsls	r7, r3
 8000226:	fa20 f202 	lsr.w	r2, r0, r2
 800022a:	4317      	orrs	r7, r2
 800022c:	409c      	lsls	r4, r3
 800022e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000232:	fa1f f58c 	uxth.w	r5, ip
 8000236:	fbb7 f1fe 	udiv	r1, r7, lr
 800023a:	0c22      	lsrs	r2, r4, #16
 800023c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000240:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000244:	fb01 f005 	mul.w	r0, r1, r5
 8000248:	4290      	cmp	r0, r2
 800024a:	d90a      	bls.n	8000262 <__udivmoddi4+0x62>
 800024c:	eb1c 0202 	adds.w	r2, ip, r2
 8000250:	f101 37ff 	add.w	r7, r1, #4294967295
 8000254:	f080 811c 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000258:	4290      	cmp	r0, r2
 800025a:	f240 8119 	bls.w	8000490 <__udivmoddi4+0x290>
 800025e:	3902      	subs	r1, #2
 8000260:	4462      	add	r2, ip
 8000262:	1a12      	subs	r2, r2, r0
 8000264:	b2a4      	uxth	r4, r4
 8000266:	fbb2 f0fe 	udiv	r0, r2, lr
 800026a:	fb0e 2210 	mls	r2, lr, r0, r2
 800026e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000272:	fb00 f505 	mul.w	r5, r0, r5
 8000276:	42a5      	cmp	r5, r4
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x90>
 800027a:	eb1c 0404 	adds.w	r4, ip, r4
 800027e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000282:	f080 8107 	bcs.w	8000494 <__udivmoddi4+0x294>
 8000286:	42a5      	cmp	r5, r4
 8000288:	f240 8104 	bls.w	8000494 <__udivmoddi4+0x294>
 800028c:	4464      	add	r4, ip
 800028e:	3802      	subs	r0, #2
 8000290:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000294:	1b64      	subs	r4, r4, r5
 8000296:	2100      	movs	r1, #0
 8000298:	b11e      	cbz	r6, 80002a2 <__udivmoddi4+0xa2>
 800029a:	40dc      	lsrs	r4, r3
 800029c:	2300      	movs	r3, #0
 800029e:	e9c6 4300 	strd	r4, r3, [r6]
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d908      	bls.n	80002bc <__udivmoddi4+0xbc>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80ed 	beq.w	800048a <__udivmoddi4+0x28a>
 80002b0:	2100      	movs	r1, #0
 80002b2:	e9c6 0500 	strd	r0, r5, [r6]
 80002b6:	4608      	mov	r0, r1
 80002b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002bc:	fab3 f183 	clz	r1, r3
 80002c0:	2900      	cmp	r1, #0
 80002c2:	d149      	bne.n	8000358 <__udivmoddi4+0x158>
 80002c4:	42ab      	cmp	r3, r5
 80002c6:	d302      	bcc.n	80002ce <__udivmoddi4+0xce>
 80002c8:	4282      	cmp	r2, r0
 80002ca:	f200 80f8 	bhi.w	80004be <__udivmoddi4+0x2be>
 80002ce:	1a84      	subs	r4, r0, r2
 80002d0:	eb65 0203 	sbc.w	r2, r5, r3
 80002d4:	2001      	movs	r0, #1
 80002d6:	4617      	mov	r7, r2
 80002d8:	2e00      	cmp	r6, #0
 80002da:	d0e2      	beq.n	80002a2 <__udivmoddi4+0xa2>
 80002dc:	e9c6 4700 	strd	r4, r7, [r6]
 80002e0:	e7df      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002e2:	b902      	cbnz	r2, 80002e6 <__udivmoddi4+0xe6>
 80002e4:	deff      	udf	#255	; 0xff
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8090 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f0:	1a8a      	subs	r2, r1, r2
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2101      	movs	r1, #1
 80002fc:	fbb2 f5f7 	udiv	r5, r2, r7
 8000300:	fb07 2015 	mls	r0, r7, r5, r2
 8000304:	0c22      	lsrs	r2, r4, #16
 8000306:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030a:	fb0e f005 	mul.w	r0, lr, r5
 800030e:	4290      	cmp	r0, r2
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x124>
 8000312:	eb1c 0202 	adds.w	r2, ip, r2
 8000316:	f105 38ff 	add.w	r8, r5, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4290      	cmp	r0, r2
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2b8>
 8000322:	4645      	mov	r5, r8
 8000324:	1a12      	subs	r2, r2, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb2 f0f7 	udiv	r0, r2, r7
 800032c:	fb07 2210 	mls	r2, r7, r0, r2
 8000330:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x14e>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 32ff 	add.w	r2, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x14c>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2c2>
 800034c:	4610      	mov	r0, r2
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000356:	e79f      	b.n	8000298 <__udivmoddi4+0x98>
 8000358:	f1c1 0720 	rsb	r7, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa05 f401 	lsl.w	r4, r5, r1
 800036a:	fa20 f307 	lsr.w	r3, r0, r7
 800036e:	40fd      	lsrs	r5, r7
 8000370:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000374:	4323      	orrs	r3, r4
 8000376:	fbb5 f8f9 	udiv	r8, r5, r9
 800037a:	fa1f fe8c 	uxth.w	lr, ip
 800037e:	fb09 5518 	mls	r5, r9, r8, r5
 8000382:	0c1c      	lsrs	r4, r3, #16
 8000384:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000388:	fb08 f50e 	mul.w	r5, r8, lr
 800038c:	42a5      	cmp	r5, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	fa00 f001 	lsl.w	r0, r0, r1
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2b4>
 80003a4:	42a5      	cmp	r5, r4
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2b4>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4464      	add	r4, ip
 80003b0:	1b64      	subs	r4, r4, r5
 80003b2:	b29d      	uxth	r5, r3
 80003b4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b8:	fb09 4413 	mls	r4, r9, r3, r4
 80003bc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c4:	45a6      	cmp	lr, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1c 0404 	adds.w	r4, ip, r4
 80003cc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2ac>
 80003d2:	45a6      	cmp	lr, r4
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2ac>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	4464      	add	r4, ip
 80003da:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003de:	fba3 9502 	umull	r9, r5, r3, r2
 80003e2:	eba4 040e 	sub.w	r4, r4, lr
 80003e6:	42ac      	cmp	r4, r5
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46ae      	mov	lr, r5
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x29c>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x298>
 80003f0:	b156      	cbz	r6, 8000408 <__udivmoddi4+0x208>
 80003f2:	ebb0 0208 	subs.w	r2, r0, r8
 80003f6:	eb64 040e 	sbc.w	r4, r4, lr
 80003fa:	fa04 f707 	lsl.w	r7, r4, r7
 80003fe:	40ca      	lsrs	r2, r1
 8000400:	40cc      	lsrs	r4, r1
 8000402:	4317      	orrs	r7, r2
 8000404:	e9c6 7400 	strd	r7, r4, [r6]
 8000408:	4618      	mov	r0, r3
 800040a:	2100      	movs	r1, #0
 800040c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000410:	f1c3 0120 	rsb	r1, r3, #32
 8000414:	fa02 fc03 	lsl.w	ip, r2, r3
 8000418:	fa20 f201 	lsr.w	r2, r0, r1
 800041c:	fa25 f101 	lsr.w	r1, r5, r1
 8000420:	409d      	lsls	r5, r3
 8000422:	432a      	orrs	r2, r5
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000430:	fb07 1510 	mls	r5, r7, r0, r1
 8000434:	0c11      	lsrs	r1, r2, #16
 8000436:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043a:	fb00 f50e 	mul.w	r5, r0, lr
 800043e:	428d      	cmp	r5, r1
 8000440:	fa04 f403 	lsl.w	r4, r4, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x258>
 8000446:	eb1c 0101 	adds.w	r1, ip, r1
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000450:	428d      	cmp	r5, r1
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000454:	3802      	subs	r0, #2
 8000456:	4461      	add	r1, ip
 8000458:	1b49      	subs	r1, r1, r5
 800045a:	b292      	uxth	r2, r2
 800045c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000460:	fb07 1115 	mls	r1, r7, r5, r1
 8000464:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000468:	fb05 f10e 	mul.w	r1, r5, lr
 800046c:	4291      	cmp	r1, r2
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x282>
 8000470:	eb1c 0202 	adds.w	r2, ip, r2
 8000474:	f105 38ff 	add.w	r8, r5, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 800047a:	4291      	cmp	r1, r2
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800047e:	3d02      	subs	r5, #2
 8000480:	4462      	add	r2, ip
 8000482:	1a52      	subs	r2, r2, r1
 8000484:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0xfc>
 800048a:	4631      	mov	r1, r6
 800048c:	4630      	mov	r0, r6
 800048e:	e708      	b.n	80002a2 <__udivmoddi4+0xa2>
 8000490:	4639      	mov	r1, r7
 8000492:	e6e6      	b.n	8000262 <__udivmoddi4+0x62>
 8000494:	4610      	mov	r0, r2
 8000496:	e6fb      	b.n	8000290 <__udivmoddi4+0x90>
 8000498:	4548      	cmp	r0, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a4:	3b01      	subs	r3, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a8:	4645      	mov	r5, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x282>
 80004ac:	462b      	mov	r3, r5
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1da>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x258>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b8:	3d02      	subs	r5, #2
 80004ba:	4462      	add	r2, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x124>
 80004be:	4608      	mov	r0, r1
 80004c0:	e70a      	b.n	80002d8 <__udivmoddi4+0xd8>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x14e>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d2:	f000 fa13 	bl	80008fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d6:	f000 f829 	bl	800052c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004da:	f000 f8a9 	bl	8000630 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004de:	f000 f877 	bl	80005d0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* Task 1 Creation. */
  xTaskCreate(pBtnTaskHandler, "TASK-1", configMINIMAL_STACK_SIZE,
 80004e2:	4b0c      	ldr	r3, [pc, #48]	; (8000514 <main+0x48>)
 80004e4:	9301      	str	r3, [sp, #4]
 80004e6:	2302      	movs	r3, #2
 80004e8:	9300      	str	r3, [sp, #0]
 80004ea:	2300      	movs	r3, #0
 80004ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80004f0:	4909      	ldr	r1, [pc, #36]	; (8000518 <main+0x4c>)
 80004f2:	480a      	ldr	r0, [pc, #40]	; (800051c <main+0x50>)
 80004f4:	f003 fbb8 	bl	8003c68 <xTaskCreate>
		  NULL, 2, &xTaskHandle1);

  /* Task 2 Creation. */
  xTaskCreate(pLedTaskHandler, "TASK-2", configMINIMAL_STACK_SIZE,
 80004f8:	4b09      	ldr	r3, [pc, #36]	; (8000520 <main+0x54>)
 80004fa:	9301      	str	r3, [sp, #4]
 80004fc:	2302      	movs	r3, #2
 80004fe:	9300      	str	r3, [sp, #0]
 8000500:	2300      	movs	r3, #0
 8000502:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000506:	4907      	ldr	r1, [pc, #28]	; (8000524 <main+0x58>)
 8000508:	4807      	ldr	r0, [pc, #28]	; (8000528 <main+0x5c>)
 800050a:	f003 fbad 	bl	8003c68 <xTaskCreate>
		  NULL, 2, &xTaskHandle2);

  /* Start the scheduler. */
  vTaskStartScheduler();
 800050e:	f003 fd01 	bl	8003f14 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000512:	e7fe      	b.n	8000512 <main+0x46>
 8000514:	200000b4 	.word	0x200000b4
 8000518:	08005888 	.word	0x08005888
 800051c:	080006fd 	.word	0x080006fd
 8000520:	200000b8 	.word	0x200000b8
 8000524:	08005890 	.word	0x08005890
 8000528:	08000725 	.word	0x08000725

0800052c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b096      	sub	sp, #88	; 0x58
 8000530:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000532:	f107 0314 	add.w	r3, r7, #20
 8000536:	2244      	movs	r2, #68	; 0x44
 8000538:	2100      	movs	r1, #0
 800053a:	4618      	mov	r0, r3
 800053c:	f005 f95e 	bl	80057fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000540:	463b      	mov	r3, r7
 8000542:	2200      	movs	r2, #0
 8000544:	601a      	str	r2, [r3, #0]
 8000546:	605a      	str	r2, [r3, #4]
 8000548:	609a      	str	r2, [r3, #8]
 800054a:	60da      	str	r2, [r3, #12]
 800054c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800054e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000552:	f000 fd23 	bl	8000f9c <HAL_PWREx_ControlVoltageScaling>
 8000556:	4603      	mov	r3, r0
 8000558:	2b00      	cmp	r3, #0
 800055a:	d001      	beq.n	8000560 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800055c:	f000 f8f6 	bl	800074c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000560:	2302      	movs	r3, #2
 8000562:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000564:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000568:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800056a:	2310      	movs	r3, #16
 800056c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800056e:	2302      	movs	r3, #2
 8000570:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000572:	2302      	movs	r3, #2
 8000574:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000576:	2301      	movs	r3, #1
 8000578:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800057a:	230a      	movs	r3, #10
 800057c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800057e:	2307      	movs	r3, #7
 8000580:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000582:	2302      	movs	r3, #2
 8000584:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000586:	2302      	movs	r3, #2
 8000588:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800058a:	f107 0314 	add.w	r3, r7, #20
 800058e:	4618      	mov	r0, r3
 8000590:	f000 fd5a 	bl	8001048 <HAL_RCC_OscConfig>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800059a:	f000 f8d7 	bl	800074c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800059e:	230f      	movs	r3, #15
 80005a0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005a2:	2303      	movs	r3, #3
 80005a4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a6:	2300      	movs	r3, #0
 80005a8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005aa:	2300      	movs	r3, #0
 80005ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ae:	2300      	movs	r3, #0
 80005b0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005b2:	463b      	mov	r3, r7
 80005b4:	2104      	movs	r1, #4
 80005b6:	4618      	mov	r0, r3
 80005b8:	f001 f922 	bl	8001800 <HAL_RCC_ClockConfig>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d001      	beq.n	80005c6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005c2:	f000 f8c3 	bl	800074c <Error_Handler>
  }
}
 80005c6:	bf00      	nop
 80005c8:	3758      	adds	r7, #88	; 0x58
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
	...

080005d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005d4:	4b14      	ldr	r3, [pc, #80]	; (8000628 <MX_USART2_UART_Init+0x58>)
 80005d6:	4a15      	ldr	r2, [pc, #84]	; (800062c <MX_USART2_UART_Init+0x5c>)
 80005d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80005da:	4b13      	ldr	r3, [pc, #76]	; (8000628 <MX_USART2_UART_Init+0x58>)
 80005dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005e2:	4b11      	ldr	r3, [pc, #68]	; (8000628 <MX_USART2_UART_Init+0x58>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005e8:	4b0f      	ldr	r3, [pc, #60]	; (8000628 <MX_USART2_UART_Init+0x58>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005ee:	4b0e      	ldr	r3, [pc, #56]	; (8000628 <MX_USART2_UART_Init+0x58>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005f4:	4b0c      	ldr	r3, [pc, #48]	; (8000628 <MX_USART2_UART_Init+0x58>)
 80005f6:	220c      	movs	r2, #12
 80005f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005fa:	4b0b      	ldr	r3, [pc, #44]	; (8000628 <MX_USART2_UART_Init+0x58>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000600:	4b09      	ldr	r3, [pc, #36]	; (8000628 <MX_USART2_UART_Init+0x58>)
 8000602:	2200      	movs	r2, #0
 8000604:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000606:	4b08      	ldr	r3, [pc, #32]	; (8000628 <MX_USART2_UART_Init+0x58>)
 8000608:	2200      	movs	r2, #0
 800060a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800060c:	4b06      	ldr	r3, [pc, #24]	; (8000628 <MX_USART2_UART_Init+0x58>)
 800060e:	2200      	movs	r2, #0
 8000610:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000612:	4805      	ldr	r0, [pc, #20]	; (8000628 <MX_USART2_UART_Init+0x58>)
 8000614:	f001 ffd4 	bl	80025c0 <HAL_UART_Init>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800061e:	f000 f895 	bl	800074c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000622:	bf00      	nop
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	2000002c 	.word	0x2000002c
 800062c:	40004400 	.word	0x40004400

08000630 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b08a      	sub	sp, #40	; 0x28
 8000634:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000636:	f107 0314 	add.w	r3, r7, #20
 800063a:	2200      	movs	r2, #0
 800063c:	601a      	str	r2, [r3, #0]
 800063e:	605a      	str	r2, [r3, #4]
 8000640:	609a      	str	r2, [r3, #8]
 8000642:	60da      	str	r2, [r3, #12]
 8000644:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000646:	4b2b      	ldr	r3, [pc, #172]	; (80006f4 <MX_GPIO_Init+0xc4>)
 8000648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800064a:	4a2a      	ldr	r2, [pc, #168]	; (80006f4 <MX_GPIO_Init+0xc4>)
 800064c:	f043 0304 	orr.w	r3, r3, #4
 8000650:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000652:	4b28      	ldr	r3, [pc, #160]	; (80006f4 <MX_GPIO_Init+0xc4>)
 8000654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000656:	f003 0304 	and.w	r3, r3, #4
 800065a:	613b      	str	r3, [r7, #16]
 800065c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800065e:	4b25      	ldr	r3, [pc, #148]	; (80006f4 <MX_GPIO_Init+0xc4>)
 8000660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000662:	4a24      	ldr	r2, [pc, #144]	; (80006f4 <MX_GPIO_Init+0xc4>)
 8000664:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000668:	64d3      	str	r3, [r2, #76]	; 0x4c
 800066a:	4b22      	ldr	r3, [pc, #136]	; (80006f4 <MX_GPIO_Init+0xc4>)
 800066c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800066e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000672:	60fb      	str	r3, [r7, #12]
 8000674:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000676:	4b1f      	ldr	r3, [pc, #124]	; (80006f4 <MX_GPIO_Init+0xc4>)
 8000678:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800067a:	4a1e      	ldr	r2, [pc, #120]	; (80006f4 <MX_GPIO_Init+0xc4>)
 800067c:	f043 0301 	orr.w	r3, r3, #1
 8000680:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000682:	4b1c      	ldr	r3, [pc, #112]	; (80006f4 <MX_GPIO_Init+0xc4>)
 8000684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000686:	f003 0301 	and.w	r3, r3, #1
 800068a:	60bb      	str	r3, [r7, #8]
 800068c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800068e:	4b19      	ldr	r3, [pc, #100]	; (80006f4 <MX_GPIO_Init+0xc4>)
 8000690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000692:	4a18      	ldr	r2, [pc, #96]	; (80006f4 <MX_GPIO_Init+0xc4>)
 8000694:	f043 0302 	orr.w	r3, r3, #2
 8000698:	64d3      	str	r3, [r2, #76]	; 0x4c
 800069a:	4b16      	ldr	r3, [pc, #88]	; (80006f4 <MX_GPIO_Init+0xc4>)
 800069c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800069e:	f003 0302 	and.w	r3, r3, #2
 80006a2:	607b      	str	r3, [r7, #4]
 80006a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006a6:	2200      	movs	r2, #0
 80006a8:	2120      	movs	r1, #32
 80006aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006ae:	f000 fc35 	bl	8000f1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80006b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006b8:	2300      	movs	r3, #0
 80006ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006bc:	2300      	movs	r3, #0
 80006be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006c0:	f107 0314 	add.w	r3, r7, #20
 80006c4:	4619      	mov	r1, r3
 80006c6:	480c      	ldr	r0, [pc, #48]	; (80006f8 <MX_GPIO_Init+0xc8>)
 80006c8:	f000 fa66 	bl	8000b98 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80006cc:	2320      	movs	r3, #32
 80006ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d0:	2301      	movs	r3, #1
 80006d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d4:	2300      	movs	r3, #0
 80006d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d8:	2300      	movs	r3, #0
 80006da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80006dc:	f107 0314 	add.w	r3, r7, #20
 80006e0:	4619      	mov	r1, r3
 80006e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006e6:	f000 fa57 	bl	8000b98 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006ea:	bf00      	nop
 80006ec:	3728      	adds	r7, #40	; 0x28
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	40021000 	.word	0x40021000
 80006f8:	48000800 	.word	0x48000800

080006fc <pBtnTaskHandler>:

	return;
}

void pBtnTaskHandler(void* pvParams)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
	while(1)
	{
		/* Check if the button is pressed. */
		if(GPIO_PIN_RESET == HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13))
 8000704:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000708:	4804      	ldr	r0, [pc, #16]	; (800071c <pBtnTaskHandler+0x20>)
 800070a:	f000 fbef 	bl	8000eec <HAL_GPIO_ReadPin>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d1f7      	bne.n	8000704 <pBtnTaskHandler+0x8>
		{
			/* Update the button press state. */
			bBtnPressState = true;
 8000714:	4b02      	ldr	r3, [pc, #8]	; (8000720 <pBtnTaskHandler+0x24>)
 8000716:	2201      	movs	r2, #1
 8000718:	701a      	strb	r2, [r3, #0]
		if(GPIO_PIN_RESET == HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13))
 800071a:	e7f3      	b.n	8000704 <pBtnTaskHandler+0x8>
 800071c:	48000800 	.word	0x48000800
 8000720:	200000bc 	.word	0x200000bc

08000724 <pLedTaskHandler>:

	return;
}

void pLedTaskHandler(void* pvParams)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]

	while(1)
	{
		/* Check if button is pressed. */
		if(bBtnPressState)
 800072c:	4b06      	ldr	r3, [pc, #24]	; (8000748 <pLedTaskHandler+0x24>)
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	2b00      	cmp	r3, #0
 8000732:	d0fb      	beq.n	800072c <pLedTaskHandler+0x8>
		{
			/* Toggle the pin if button is pressed. */
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000734:	2120      	movs	r1, #32
 8000736:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800073a:	f000 fc07 	bl	8000f4c <HAL_GPIO_TogglePin>

			/* Reset the button state flag. */
			bBtnPressState = false;
 800073e:	4b02      	ldr	r3, [pc, #8]	; (8000748 <pLedTaskHandler+0x24>)
 8000740:	2200      	movs	r2, #0
 8000742:	701a      	strb	r2, [r3, #0]
		if(bBtnPressState)
 8000744:	e7f2      	b.n	800072c <pLedTaskHandler+0x8>
 8000746:	bf00      	nop
 8000748:	200000bc 	.word	0x200000bc

0800074c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000750:	b672      	cpsid	i
}
 8000752:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000754:	e7fe      	b.n	8000754 <Error_Handler+0x8>
	...

08000758 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000758:	b480      	push	{r7}
 800075a:	b083      	sub	sp, #12
 800075c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800075e:	4b0f      	ldr	r3, [pc, #60]	; (800079c <HAL_MspInit+0x44>)
 8000760:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000762:	4a0e      	ldr	r2, [pc, #56]	; (800079c <HAL_MspInit+0x44>)
 8000764:	f043 0301 	orr.w	r3, r3, #1
 8000768:	6613      	str	r3, [r2, #96]	; 0x60
 800076a:	4b0c      	ldr	r3, [pc, #48]	; (800079c <HAL_MspInit+0x44>)
 800076c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800076e:	f003 0301 	and.w	r3, r3, #1
 8000772:	607b      	str	r3, [r7, #4]
 8000774:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000776:	4b09      	ldr	r3, [pc, #36]	; (800079c <HAL_MspInit+0x44>)
 8000778:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800077a:	4a08      	ldr	r2, [pc, #32]	; (800079c <HAL_MspInit+0x44>)
 800077c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000780:	6593      	str	r3, [r2, #88]	; 0x58
 8000782:	4b06      	ldr	r3, [pc, #24]	; (800079c <HAL_MspInit+0x44>)
 8000784:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000786:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800078a:	603b      	str	r3, [r7, #0]
 800078c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800078e:	bf00      	nop
 8000790:	370c      	adds	r7, #12
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	40021000 	.word	0x40021000

080007a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b0ac      	sub	sp, #176	; 0xb0
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80007ac:	2200      	movs	r2, #0
 80007ae:	601a      	str	r2, [r3, #0]
 80007b0:	605a      	str	r2, [r3, #4]
 80007b2:	609a      	str	r2, [r3, #8]
 80007b4:	60da      	str	r2, [r3, #12]
 80007b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007b8:	f107 0314 	add.w	r3, r7, #20
 80007bc:	2288      	movs	r2, #136	; 0x88
 80007be:	2100      	movs	r1, #0
 80007c0:	4618      	mov	r0, r3
 80007c2:	f005 f81b 	bl	80057fc <memset>
  if(huart->Instance==USART2)
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	4a21      	ldr	r2, [pc, #132]	; (8000850 <HAL_UART_MspInit+0xb0>)
 80007cc:	4293      	cmp	r3, r2
 80007ce:	d13b      	bne.n	8000848 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80007d0:	2302      	movs	r3, #2
 80007d2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80007d4:	2300      	movs	r3, #0
 80007d6:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007d8:	f107 0314 	add.w	r3, r7, #20
 80007dc:	4618      	mov	r0, r3
 80007de:	f001 fa33 	bl	8001c48 <HAL_RCCEx_PeriphCLKConfig>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80007e8:	f7ff ffb0 	bl	800074c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007ec:	4b19      	ldr	r3, [pc, #100]	; (8000854 <HAL_UART_MspInit+0xb4>)
 80007ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007f0:	4a18      	ldr	r2, [pc, #96]	; (8000854 <HAL_UART_MspInit+0xb4>)
 80007f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007f6:	6593      	str	r3, [r2, #88]	; 0x58
 80007f8:	4b16      	ldr	r3, [pc, #88]	; (8000854 <HAL_UART_MspInit+0xb4>)
 80007fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000800:	613b      	str	r3, [r7, #16]
 8000802:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000804:	4b13      	ldr	r3, [pc, #76]	; (8000854 <HAL_UART_MspInit+0xb4>)
 8000806:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000808:	4a12      	ldr	r2, [pc, #72]	; (8000854 <HAL_UART_MspInit+0xb4>)
 800080a:	f043 0301 	orr.w	r3, r3, #1
 800080e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000810:	4b10      	ldr	r3, [pc, #64]	; (8000854 <HAL_UART_MspInit+0xb4>)
 8000812:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000814:	f003 0301 	and.w	r3, r3, #1
 8000818:	60fb      	str	r3, [r7, #12]
 800081a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800081c:	230c      	movs	r3, #12
 800081e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000822:	2302      	movs	r3, #2
 8000824:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000828:	2300      	movs	r3, #0
 800082a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800082e:	2303      	movs	r3, #3
 8000830:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000834:	2307      	movs	r3, #7
 8000836:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800083a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800083e:	4619      	mov	r1, r3
 8000840:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000844:	f000 f9a8 	bl	8000b98 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000848:	bf00      	nop
 800084a:	37b0      	adds	r7, #176	; 0xb0
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	40004400 	.word	0x40004400
 8000854:	40021000 	.word	0x40021000

08000858 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800085c:	e7fe      	b.n	800085c <NMI_Handler+0x4>

0800085e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800085e:	b480      	push	{r7}
 8000860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000862:	e7fe      	b.n	8000862 <HardFault_Handler+0x4>

08000864 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000868:	e7fe      	b.n	8000868 <MemManage_Handler+0x4>

0800086a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800086a:	b480      	push	{r7}
 800086c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800086e:	e7fe      	b.n	800086e <BusFault_Handler+0x4>

08000870 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000874:	e7fe      	b.n	8000874 <UsageFault_Handler+0x4>

08000876 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000876:	b480      	push	{r7}
 8000878:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800087a:	bf00      	nop
 800087c:	46bd      	mov	sp, r7
 800087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000882:	4770      	bx	lr

08000884 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000888:	4b06      	ldr	r3, [pc, #24]	; (80008a4 <SystemInit+0x20>)
 800088a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800088e:	4a05      	ldr	r2, [pc, #20]	; (80008a4 <SystemInit+0x20>)
 8000890:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000894:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000898:	bf00      	nop
 800089a:	46bd      	mov	sp, r7
 800089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a0:	4770      	bx	lr
 80008a2:	bf00      	nop
 80008a4:	e000ed00 	.word	0xe000ed00

080008a8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80008a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008e0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80008ac:	f7ff ffea 	bl	8000884 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008b0:	480c      	ldr	r0, [pc, #48]	; (80008e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80008b2:	490d      	ldr	r1, [pc, #52]	; (80008e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008b4:	4a0d      	ldr	r2, [pc, #52]	; (80008ec <LoopForever+0xe>)
  movs r3, #0
 80008b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008b8:	e002      	b.n	80008c0 <LoopCopyDataInit>

080008ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008be:	3304      	adds	r3, #4

080008c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008c4:	d3f9      	bcc.n	80008ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008c6:	4a0a      	ldr	r2, [pc, #40]	; (80008f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008c8:	4c0a      	ldr	r4, [pc, #40]	; (80008f4 <LoopForever+0x16>)
  movs r3, #0
 80008ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008cc:	e001      	b.n	80008d2 <LoopFillZerobss>

080008ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008d0:	3204      	adds	r2, #4

080008d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008d4:	d3fb      	bcc.n	80008ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008d6:	f004 ff99 	bl	800580c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80008da:	f7ff fdf7 	bl	80004cc <main>

080008de <LoopForever>:

LoopForever:
    b LoopForever
 80008de:	e7fe      	b.n	80008de <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80008e0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80008e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008e8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80008ec:	0800591c 	.word	0x0800591c
  ldr r2, =_sbss
 80008f0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80008f4:	2000425c 	.word	0x2000425c

080008f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80008f8:	e7fe      	b.n	80008f8 <ADC1_2_IRQHandler>
	...

080008fc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000902:	2300      	movs	r3, #0
 8000904:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000906:	4b0c      	ldr	r3, [pc, #48]	; (8000938 <HAL_Init+0x3c>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	4a0b      	ldr	r2, [pc, #44]	; (8000938 <HAL_Init+0x3c>)
 800090c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000910:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000912:	2003      	movs	r0, #3
 8000914:	f000 f90c 	bl	8000b30 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000918:	2000      	movs	r0, #0
 800091a:	f000 f80f 	bl	800093c <HAL_InitTick>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d002      	beq.n	800092a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000924:	2301      	movs	r3, #1
 8000926:	71fb      	strb	r3, [r7, #7]
 8000928:	e001      	b.n	800092e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800092a:	f7ff ff15 	bl	8000758 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800092e:	79fb      	ldrb	r3, [r7, #7]
}
 8000930:	4618      	mov	r0, r3
 8000932:	3708      	adds	r7, #8
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	40022000 	.word	0x40022000

0800093c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b084      	sub	sp, #16
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000944:	2300      	movs	r3, #0
 8000946:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000948:	4b17      	ldr	r3, [pc, #92]	; (80009a8 <HAL_InitTick+0x6c>)
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	2b00      	cmp	r3, #0
 800094e:	d023      	beq.n	8000998 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000950:	4b16      	ldr	r3, [pc, #88]	; (80009ac <HAL_InitTick+0x70>)
 8000952:	681a      	ldr	r2, [r3, #0]
 8000954:	4b14      	ldr	r3, [pc, #80]	; (80009a8 <HAL_InitTick+0x6c>)
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	4619      	mov	r1, r3
 800095a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800095e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000962:	fbb2 f3f3 	udiv	r3, r2, r3
 8000966:	4618      	mov	r0, r3
 8000968:	f000 f909 	bl	8000b7e <HAL_SYSTICK_Config>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d10f      	bne.n	8000992 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	2b0f      	cmp	r3, #15
 8000976:	d809      	bhi.n	800098c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000978:	2200      	movs	r2, #0
 800097a:	6879      	ldr	r1, [r7, #4]
 800097c:	f04f 30ff 	mov.w	r0, #4294967295
 8000980:	f000 f8e1 	bl	8000b46 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000984:	4a0a      	ldr	r2, [pc, #40]	; (80009b0 <HAL_InitTick+0x74>)
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	6013      	str	r3, [r2, #0]
 800098a:	e007      	b.n	800099c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800098c:	2301      	movs	r3, #1
 800098e:	73fb      	strb	r3, [r7, #15]
 8000990:	e004      	b.n	800099c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000992:	2301      	movs	r3, #1
 8000994:	73fb      	strb	r3, [r7, #15]
 8000996:	e001      	b.n	800099c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000998:	2301      	movs	r3, #1
 800099a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800099c:	7bfb      	ldrb	r3, [r7, #15]
}
 800099e:	4618      	mov	r0, r3
 80009a0:	3710      	adds	r7, #16
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	20000008 	.word	0x20000008
 80009ac:	20000000 	.word	0x20000000
 80009b0:	20000004 	.word	0x20000004

080009b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  return uwTick;
 80009b8:	4b03      	ldr	r3, [pc, #12]	; (80009c8 <HAL_GetTick+0x14>)
 80009ba:	681b      	ldr	r3, [r3, #0]
}
 80009bc:	4618      	mov	r0, r3
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	200000c0 	.word	0x200000c0

080009cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009cc:	b480      	push	{r7}
 80009ce:	b085      	sub	sp, #20
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	f003 0307 	and.w	r3, r3, #7
 80009da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009dc:	4b0c      	ldr	r3, [pc, #48]	; (8000a10 <__NVIC_SetPriorityGrouping+0x44>)
 80009de:	68db      	ldr	r3, [r3, #12]
 80009e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009e2:	68ba      	ldr	r2, [r7, #8]
 80009e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009e8:	4013      	ands	r3, r2
 80009ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009f0:	68bb      	ldr	r3, [r7, #8]
 80009f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009fe:	4a04      	ldr	r2, [pc, #16]	; (8000a10 <__NVIC_SetPriorityGrouping+0x44>)
 8000a00:	68bb      	ldr	r3, [r7, #8]
 8000a02:	60d3      	str	r3, [r2, #12]
}
 8000a04:	bf00      	nop
 8000a06:	3714      	adds	r7, #20
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0e:	4770      	bx	lr
 8000a10:	e000ed00 	.word	0xe000ed00

08000a14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a18:	4b04      	ldr	r3, [pc, #16]	; (8000a2c <__NVIC_GetPriorityGrouping+0x18>)
 8000a1a:	68db      	ldr	r3, [r3, #12]
 8000a1c:	0a1b      	lsrs	r3, r3, #8
 8000a1e:	f003 0307 	and.w	r3, r3, #7
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr
 8000a2c:	e000ed00 	.word	0xe000ed00

08000a30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b083      	sub	sp, #12
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	4603      	mov	r3, r0
 8000a38:	6039      	str	r1, [r7, #0]
 8000a3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	db0a      	blt.n	8000a5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	b2da      	uxtb	r2, r3
 8000a48:	490c      	ldr	r1, [pc, #48]	; (8000a7c <__NVIC_SetPriority+0x4c>)
 8000a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a4e:	0112      	lsls	r2, r2, #4
 8000a50:	b2d2      	uxtb	r2, r2
 8000a52:	440b      	add	r3, r1
 8000a54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a58:	e00a      	b.n	8000a70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	b2da      	uxtb	r2, r3
 8000a5e:	4908      	ldr	r1, [pc, #32]	; (8000a80 <__NVIC_SetPriority+0x50>)
 8000a60:	79fb      	ldrb	r3, [r7, #7]
 8000a62:	f003 030f 	and.w	r3, r3, #15
 8000a66:	3b04      	subs	r3, #4
 8000a68:	0112      	lsls	r2, r2, #4
 8000a6a:	b2d2      	uxtb	r2, r2
 8000a6c:	440b      	add	r3, r1
 8000a6e:	761a      	strb	r2, [r3, #24]
}
 8000a70:	bf00      	nop
 8000a72:	370c      	adds	r7, #12
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr
 8000a7c:	e000e100 	.word	0xe000e100
 8000a80:	e000ed00 	.word	0xe000ed00

08000a84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b089      	sub	sp, #36	; 0x24
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	60f8      	str	r0, [r7, #12]
 8000a8c:	60b9      	str	r1, [r7, #8]
 8000a8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	f003 0307 	and.w	r3, r3, #7
 8000a96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a98:	69fb      	ldr	r3, [r7, #28]
 8000a9a:	f1c3 0307 	rsb	r3, r3, #7
 8000a9e:	2b04      	cmp	r3, #4
 8000aa0:	bf28      	it	cs
 8000aa2:	2304      	movcs	r3, #4
 8000aa4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aa6:	69fb      	ldr	r3, [r7, #28]
 8000aa8:	3304      	adds	r3, #4
 8000aaa:	2b06      	cmp	r3, #6
 8000aac:	d902      	bls.n	8000ab4 <NVIC_EncodePriority+0x30>
 8000aae:	69fb      	ldr	r3, [r7, #28]
 8000ab0:	3b03      	subs	r3, #3
 8000ab2:	e000      	b.n	8000ab6 <NVIC_EncodePriority+0x32>
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ab8:	f04f 32ff 	mov.w	r2, #4294967295
 8000abc:	69bb      	ldr	r3, [r7, #24]
 8000abe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac2:	43da      	mvns	r2, r3
 8000ac4:	68bb      	ldr	r3, [r7, #8]
 8000ac6:	401a      	ands	r2, r3
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000acc:	f04f 31ff 	mov.w	r1, #4294967295
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ad6:	43d9      	mvns	r1, r3
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000adc:	4313      	orrs	r3, r2
         );
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	3724      	adds	r7, #36	; 0x24
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr
	...

08000aec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	3b01      	subs	r3, #1
 8000af8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000afc:	d301      	bcc.n	8000b02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000afe:	2301      	movs	r3, #1
 8000b00:	e00f      	b.n	8000b22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b02:	4a0a      	ldr	r2, [pc, #40]	; (8000b2c <SysTick_Config+0x40>)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	3b01      	subs	r3, #1
 8000b08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b0a:	210f      	movs	r1, #15
 8000b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b10:	f7ff ff8e 	bl	8000a30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b14:	4b05      	ldr	r3, [pc, #20]	; (8000b2c <SysTick_Config+0x40>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b1a:	4b04      	ldr	r3, [pc, #16]	; (8000b2c <SysTick_Config+0x40>)
 8000b1c:	2207      	movs	r2, #7
 8000b1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b20:	2300      	movs	r3, #0
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	3708      	adds	r7, #8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	e000e010 	.word	0xe000e010

08000b30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b38:	6878      	ldr	r0, [r7, #4]
 8000b3a:	f7ff ff47 	bl	80009cc <__NVIC_SetPriorityGrouping>
}
 8000b3e:	bf00      	nop
 8000b40:	3708      	adds	r7, #8
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}

08000b46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b46:	b580      	push	{r7, lr}
 8000b48:	b086      	sub	sp, #24
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	60b9      	str	r1, [r7, #8]
 8000b50:	607a      	str	r2, [r7, #4]
 8000b52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000b54:	2300      	movs	r3, #0
 8000b56:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b58:	f7ff ff5c 	bl	8000a14 <__NVIC_GetPriorityGrouping>
 8000b5c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b5e:	687a      	ldr	r2, [r7, #4]
 8000b60:	68b9      	ldr	r1, [r7, #8]
 8000b62:	6978      	ldr	r0, [r7, #20]
 8000b64:	f7ff ff8e 	bl	8000a84 <NVIC_EncodePriority>
 8000b68:	4602      	mov	r2, r0
 8000b6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b6e:	4611      	mov	r1, r2
 8000b70:	4618      	mov	r0, r3
 8000b72:	f7ff ff5d 	bl	8000a30 <__NVIC_SetPriority>
}
 8000b76:	bf00      	nop
 8000b78:	3718      	adds	r7, #24
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}

08000b7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b7e:	b580      	push	{r7, lr}
 8000b80:	b082      	sub	sp, #8
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b86:	6878      	ldr	r0, [r7, #4]
 8000b88:	f7ff ffb0 	bl	8000aec <SysTick_Config>
 8000b8c:	4603      	mov	r3, r0
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
	...

08000b98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b087      	sub	sp, #28
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
 8000ba0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ba6:	e17f      	b.n	8000ea8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	681a      	ldr	r2, [r3, #0]
 8000bac:	2101      	movs	r1, #1
 8000bae:	697b      	ldr	r3, [r7, #20]
 8000bb0:	fa01 f303 	lsl.w	r3, r1, r3
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	f000 8171 	beq.w	8000ea2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	685b      	ldr	r3, [r3, #4]
 8000bc4:	f003 0303 	and.w	r3, r3, #3
 8000bc8:	2b01      	cmp	r3, #1
 8000bca:	d005      	beq.n	8000bd8 <HAL_GPIO_Init+0x40>
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	685b      	ldr	r3, [r3, #4]
 8000bd0:	f003 0303 	and.w	r3, r3, #3
 8000bd4:	2b02      	cmp	r3, #2
 8000bd6:	d130      	bne.n	8000c3a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	689b      	ldr	r3, [r3, #8]
 8000bdc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000bde:	697b      	ldr	r3, [r7, #20]
 8000be0:	005b      	lsls	r3, r3, #1
 8000be2:	2203      	movs	r2, #3
 8000be4:	fa02 f303 	lsl.w	r3, r2, r3
 8000be8:	43db      	mvns	r3, r3
 8000bea:	693a      	ldr	r2, [r7, #16]
 8000bec:	4013      	ands	r3, r2
 8000bee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	68da      	ldr	r2, [r3, #12]
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	005b      	lsls	r3, r3, #1
 8000bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfc:	693a      	ldr	r2, [r7, #16]
 8000bfe:	4313      	orrs	r3, r2
 8000c00:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	693a      	ldr	r2, [r7, #16]
 8000c06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	685b      	ldr	r3, [r3, #4]
 8000c0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c0e:	2201      	movs	r2, #1
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	fa02 f303 	lsl.w	r3, r2, r3
 8000c16:	43db      	mvns	r3, r3
 8000c18:	693a      	ldr	r2, [r7, #16]
 8000c1a:	4013      	ands	r3, r2
 8000c1c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	091b      	lsrs	r3, r3, #4
 8000c24:	f003 0201 	and.w	r2, r3, #1
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2e:	693a      	ldr	r2, [r7, #16]
 8000c30:	4313      	orrs	r3, r2
 8000c32:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	693a      	ldr	r2, [r7, #16]
 8000c38:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	685b      	ldr	r3, [r3, #4]
 8000c3e:	f003 0303 	and.w	r3, r3, #3
 8000c42:	2b03      	cmp	r3, #3
 8000c44:	d118      	bne.n	8000c78 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c4a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	697b      	ldr	r3, [r7, #20]
 8000c50:	fa02 f303 	lsl.w	r3, r2, r3
 8000c54:	43db      	mvns	r3, r3
 8000c56:	693a      	ldr	r2, [r7, #16]
 8000c58:	4013      	ands	r3, r2
 8000c5a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	08db      	lsrs	r3, r3, #3
 8000c62:	f003 0201 	and.w	r2, r3, #1
 8000c66:	697b      	ldr	r3, [r7, #20]
 8000c68:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6c:	693a      	ldr	r2, [r7, #16]
 8000c6e:	4313      	orrs	r3, r2
 8000c70:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	693a      	ldr	r2, [r7, #16]
 8000c76:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	f003 0303 	and.w	r3, r3, #3
 8000c80:	2b03      	cmp	r3, #3
 8000c82:	d017      	beq.n	8000cb4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	68db      	ldr	r3, [r3, #12]
 8000c88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000c8a:	697b      	ldr	r3, [r7, #20]
 8000c8c:	005b      	lsls	r3, r3, #1
 8000c8e:	2203      	movs	r2, #3
 8000c90:	fa02 f303 	lsl.w	r3, r2, r3
 8000c94:	43db      	mvns	r3, r3
 8000c96:	693a      	ldr	r2, [r7, #16]
 8000c98:	4013      	ands	r3, r2
 8000c9a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	689a      	ldr	r2, [r3, #8]
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	005b      	lsls	r3, r3, #1
 8000ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca8:	693a      	ldr	r2, [r7, #16]
 8000caa:	4313      	orrs	r3, r2
 8000cac:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	693a      	ldr	r2, [r7, #16]
 8000cb2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	685b      	ldr	r3, [r3, #4]
 8000cb8:	f003 0303 	and.w	r3, r3, #3
 8000cbc:	2b02      	cmp	r3, #2
 8000cbe:	d123      	bne.n	8000d08 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	08da      	lsrs	r2, r3, #3
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	3208      	adds	r2, #8
 8000cc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ccc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	f003 0307 	and.w	r3, r3, #7
 8000cd4:	009b      	lsls	r3, r3, #2
 8000cd6:	220f      	movs	r2, #15
 8000cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cdc:	43db      	mvns	r3, r3
 8000cde:	693a      	ldr	r2, [r7, #16]
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	691a      	ldr	r2, [r3, #16]
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	f003 0307 	and.w	r3, r3, #7
 8000cee:	009b      	lsls	r3, r3, #2
 8000cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf4:	693a      	ldr	r2, [r7, #16]
 8000cf6:	4313      	orrs	r3, r2
 8000cf8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	08da      	lsrs	r2, r3, #3
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	3208      	adds	r2, #8
 8000d02:	6939      	ldr	r1, [r7, #16]
 8000d04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000d0e:	697b      	ldr	r3, [r7, #20]
 8000d10:	005b      	lsls	r3, r3, #1
 8000d12:	2203      	movs	r2, #3
 8000d14:	fa02 f303 	lsl.w	r3, r2, r3
 8000d18:	43db      	mvns	r3, r3
 8000d1a:	693a      	ldr	r2, [r7, #16]
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	f003 0203 	and.w	r2, r3, #3
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	005b      	lsls	r3, r3, #1
 8000d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d30:	693a      	ldr	r2, [r7, #16]
 8000d32:	4313      	orrs	r3, r2
 8000d34:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	693a      	ldr	r2, [r7, #16]
 8000d3a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	f000 80ac 	beq.w	8000ea2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d4a:	4b5f      	ldr	r3, [pc, #380]	; (8000ec8 <HAL_GPIO_Init+0x330>)
 8000d4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d4e:	4a5e      	ldr	r2, [pc, #376]	; (8000ec8 <HAL_GPIO_Init+0x330>)
 8000d50:	f043 0301 	orr.w	r3, r3, #1
 8000d54:	6613      	str	r3, [r2, #96]	; 0x60
 8000d56:	4b5c      	ldr	r3, [pc, #368]	; (8000ec8 <HAL_GPIO_Init+0x330>)
 8000d58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d5a:	f003 0301 	and.w	r3, r3, #1
 8000d5e:	60bb      	str	r3, [r7, #8]
 8000d60:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d62:	4a5a      	ldr	r2, [pc, #360]	; (8000ecc <HAL_GPIO_Init+0x334>)
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	089b      	lsrs	r3, r3, #2
 8000d68:	3302      	adds	r3, #2
 8000d6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d6e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	f003 0303 	and.w	r3, r3, #3
 8000d76:	009b      	lsls	r3, r3, #2
 8000d78:	220f      	movs	r2, #15
 8000d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7e:	43db      	mvns	r3, r3
 8000d80:	693a      	ldr	r2, [r7, #16]
 8000d82:	4013      	ands	r3, r2
 8000d84:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000d8c:	d025      	beq.n	8000dda <HAL_GPIO_Init+0x242>
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4a4f      	ldr	r2, [pc, #316]	; (8000ed0 <HAL_GPIO_Init+0x338>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d01f      	beq.n	8000dd6 <HAL_GPIO_Init+0x23e>
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	4a4e      	ldr	r2, [pc, #312]	; (8000ed4 <HAL_GPIO_Init+0x33c>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d019      	beq.n	8000dd2 <HAL_GPIO_Init+0x23a>
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	4a4d      	ldr	r2, [pc, #308]	; (8000ed8 <HAL_GPIO_Init+0x340>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d013      	beq.n	8000dce <HAL_GPIO_Init+0x236>
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	4a4c      	ldr	r2, [pc, #304]	; (8000edc <HAL_GPIO_Init+0x344>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d00d      	beq.n	8000dca <HAL_GPIO_Init+0x232>
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	4a4b      	ldr	r2, [pc, #300]	; (8000ee0 <HAL_GPIO_Init+0x348>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d007      	beq.n	8000dc6 <HAL_GPIO_Init+0x22e>
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	4a4a      	ldr	r2, [pc, #296]	; (8000ee4 <HAL_GPIO_Init+0x34c>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d101      	bne.n	8000dc2 <HAL_GPIO_Init+0x22a>
 8000dbe:	2306      	movs	r3, #6
 8000dc0:	e00c      	b.n	8000ddc <HAL_GPIO_Init+0x244>
 8000dc2:	2307      	movs	r3, #7
 8000dc4:	e00a      	b.n	8000ddc <HAL_GPIO_Init+0x244>
 8000dc6:	2305      	movs	r3, #5
 8000dc8:	e008      	b.n	8000ddc <HAL_GPIO_Init+0x244>
 8000dca:	2304      	movs	r3, #4
 8000dcc:	e006      	b.n	8000ddc <HAL_GPIO_Init+0x244>
 8000dce:	2303      	movs	r3, #3
 8000dd0:	e004      	b.n	8000ddc <HAL_GPIO_Init+0x244>
 8000dd2:	2302      	movs	r3, #2
 8000dd4:	e002      	b.n	8000ddc <HAL_GPIO_Init+0x244>
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	e000      	b.n	8000ddc <HAL_GPIO_Init+0x244>
 8000dda:	2300      	movs	r3, #0
 8000ddc:	697a      	ldr	r2, [r7, #20]
 8000dde:	f002 0203 	and.w	r2, r2, #3
 8000de2:	0092      	lsls	r2, r2, #2
 8000de4:	4093      	lsls	r3, r2
 8000de6:	693a      	ldr	r2, [r7, #16]
 8000de8:	4313      	orrs	r3, r2
 8000dea:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000dec:	4937      	ldr	r1, [pc, #220]	; (8000ecc <HAL_GPIO_Init+0x334>)
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	089b      	lsrs	r3, r3, #2
 8000df2:	3302      	adds	r3, #2
 8000df4:	693a      	ldr	r2, [r7, #16]
 8000df6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000dfa:	4b3b      	ldr	r3, [pc, #236]	; (8000ee8 <HAL_GPIO_Init+0x350>)
 8000dfc:	689b      	ldr	r3, [r3, #8]
 8000dfe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	43db      	mvns	r3, r3
 8000e04:	693a      	ldr	r2, [r7, #16]
 8000e06:	4013      	ands	r3, r2
 8000e08:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d003      	beq.n	8000e1e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000e16:	693a      	ldr	r2, [r7, #16]
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000e1e:	4a32      	ldr	r2, [pc, #200]	; (8000ee8 <HAL_GPIO_Init+0x350>)
 8000e20:	693b      	ldr	r3, [r7, #16]
 8000e22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000e24:	4b30      	ldr	r3, [pc, #192]	; (8000ee8 <HAL_GPIO_Init+0x350>)
 8000e26:	68db      	ldr	r3, [r3, #12]
 8000e28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	43db      	mvns	r3, r3
 8000e2e:	693a      	ldr	r2, [r7, #16]
 8000e30:	4013      	ands	r3, r2
 8000e32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d003      	beq.n	8000e48 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000e40:	693a      	ldr	r2, [r7, #16]
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	4313      	orrs	r3, r2
 8000e46:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000e48:	4a27      	ldr	r2, [pc, #156]	; (8000ee8 <HAL_GPIO_Init+0x350>)
 8000e4a:	693b      	ldr	r3, [r7, #16]
 8000e4c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000e4e:	4b26      	ldr	r3, [pc, #152]	; (8000ee8 <HAL_GPIO_Init+0x350>)
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	43db      	mvns	r3, r3
 8000e58:	693a      	ldr	r2, [r7, #16]
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d003      	beq.n	8000e72 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000e6a:	693a      	ldr	r2, [r7, #16]
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000e72:	4a1d      	ldr	r2, [pc, #116]	; (8000ee8 <HAL_GPIO_Init+0x350>)
 8000e74:	693b      	ldr	r3, [r7, #16]
 8000e76:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000e78:	4b1b      	ldr	r3, [pc, #108]	; (8000ee8 <HAL_GPIO_Init+0x350>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	43db      	mvns	r3, r3
 8000e82:	693a      	ldr	r2, [r7, #16]
 8000e84:	4013      	ands	r3, r2
 8000e86:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d003      	beq.n	8000e9c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000e94:	693a      	ldr	r2, [r7, #16]
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000e9c:	4a12      	ldr	r2, [pc, #72]	; (8000ee8 <HAL_GPIO_Init+0x350>)
 8000e9e:	693b      	ldr	r3, [r7, #16]
 8000ea0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	3301      	adds	r3, #1
 8000ea6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	fa22 f303 	lsr.w	r3, r2, r3
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	f47f ae78 	bne.w	8000ba8 <HAL_GPIO_Init+0x10>
  }
}
 8000eb8:	bf00      	nop
 8000eba:	bf00      	nop
 8000ebc:	371c      	adds	r7, #28
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	40021000 	.word	0x40021000
 8000ecc:	40010000 	.word	0x40010000
 8000ed0:	48000400 	.word	0x48000400
 8000ed4:	48000800 	.word	0x48000800
 8000ed8:	48000c00 	.word	0x48000c00
 8000edc:	48001000 	.word	0x48001000
 8000ee0:	48001400 	.word	0x48001400
 8000ee4:	48001800 	.word	0x48001800
 8000ee8:	40010400 	.word	0x40010400

08000eec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b085      	sub	sp, #20
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
 8000ef4:	460b      	mov	r3, r1
 8000ef6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	691a      	ldr	r2, [r3, #16]
 8000efc:	887b      	ldrh	r3, [r7, #2]
 8000efe:	4013      	ands	r3, r2
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d002      	beq.n	8000f0a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000f04:	2301      	movs	r3, #1
 8000f06:	73fb      	strb	r3, [r7, #15]
 8000f08:	e001      	b.n	8000f0e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000f0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3714      	adds	r7, #20
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr

08000f1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
 8000f24:	460b      	mov	r3, r1
 8000f26:	807b      	strh	r3, [r7, #2]
 8000f28:	4613      	mov	r3, r2
 8000f2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f2c:	787b      	ldrb	r3, [r7, #1]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d003      	beq.n	8000f3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f32:	887a      	ldrh	r2, [r7, #2]
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f38:	e002      	b.n	8000f40 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f3a:	887a      	ldrh	r2, [r7, #2]
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f40:	bf00      	nop
 8000f42:	370c      	adds	r7, #12
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr

08000f4c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b085      	sub	sp, #20
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
 8000f54:	460b      	mov	r3, r1
 8000f56:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	695b      	ldr	r3, [r3, #20]
 8000f5c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000f5e:	887a      	ldrh	r2, [r7, #2]
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	4013      	ands	r3, r2
 8000f64:	041a      	lsls	r2, r3, #16
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	43d9      	mvns	r1, r3
 8000f6a:	887b      	ldrh	r3, [r7, #2]
 8000f6c:	400b      	ands	r3, r1
 8000f6e:	431a      	orrs	r2, r3
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	619a      	str	r2, [r3, #24]
}
 8000f74:	bf00      	nop
 8000f76:	3714      	adds	r7, #20
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr

08000f80 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000f84:	4b04      	ldr	r3, [pc, #16]	; (8000f98 <HAL_PWREx_GetVoltageRange+0x18>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	40007000 	.word	0x40007000

08000f9c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b085      	sub	sp, #20
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000faa:	d130      	bne.n	800100e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000fac:	4b23      	ldr	r3, [pc, #140]	; (800103c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000fb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000fb8:	d038      	beq.n	800102c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fba:	4b20      	ldr	r3, [pc, #128]	; (800103c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000fc2:	4a1e      	ldr	r2, [pc, #120]	; (800103c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fc4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fc8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000fca:	4b1d      	ldr	r3, [pc, #116]	; (8001040 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	2232      	movs	r2, #50	; 0x32
 8000fd0:	fb02 f303 	mul.w	r3, r2, r3
 8000fd4:	4a1b      	ldr	r2, [pc, #108]	; (8001044 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8000fda:	0c9b      	lsrs	r3, r3, #18
 8000fdc:	3301      	adds	r3, #1
 8000fde:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000fe0:	e002      	b.n	8000fe8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	3b01      	subs	r3, #1
 8000fe6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000fe8:	4b14      	ldr	r3, [pc, #80]	; (800103c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fea:	695b      	ldr	r3, [r3, #20]
 8000fec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ff0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ff4:	d102      	bne.n	8000ffc <HAL_PWREx_ControlVoltageScaling+0x60>
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d1f2      	bne.n	8000fe2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000ffc:	4b0f      	ldr	r3, [pc, #60]	; (800103c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ffe:	695b      	ldr	r3, [r3, #20]
 8001000:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001004:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001008:	d110      	bne.n	800102c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800100a:	2303      	movs	r3, #3
 800100c:	e00f      	b.n	800102e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800100e:	4b0b      	ldr	r3, [pc, #44]	; (800103c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001016:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800101a:	d007      	beq.n	800102c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800101c:	4b07      	ldr	r3, [pc, #28]	; (800103c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001024:	4a05      	ldr	r2, [pc, #20]	; (800103c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001026:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800102a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800102c:	2300      	movs	r3, #0
}
 800102e:	4618      	mov	r0, r3
 8001030:	3714      	adds	r7, #20
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	40007000 	.word	0x40007000
 8001040:	20000000 	.word	0x20000000
 8001044:	431bde83 	.word	0x431bde83

08001048 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b088      	sub	sp, #32
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d101      	bne.n	800105a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001056:	2301      	movs	r3, #1
 8001058:	e3ca      	b.n	80017f0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800105a:	4b97      	ldr	r3, [pc, #604]	; (80012b8 <HAL_RCC_OscConfig+0x270>)
 800105c:	689b      	ldr	r3, [r3, #8]
 800105e:	f003 030c 	and.w	r3, r3, #12
 8001062:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001064:	4b94      	ldr	r3, [pc, #592]	; (80012b8 <HAL_RCC_OscConfig+0x270>)
 8001066:	68db      	ldr	r3, [r3, #12]
 8001068:	f003 0303 	and.w	r3, r3, #3
 800106c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f003 0310 	and.w	r3, r3, #16
 8001076:	2b00      	cmp	r3, #0
 8001078:	f000 80e4 	beq.w	8001244 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800107c:	69bb      	ldr	r3, [r7, #24]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d007      	beq.n	8001092 <HAL_RCC_OscConfig+0x4a>
 8001082:	69bb      	ldr	r3, [r7, #24]
 8001084:	2b0c      	cmp	r3, #12
 8001086:	f040 808b 	bne.w	80011a0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	2b01      	cmp	r3, #1
 800108e:	f040 8087 	bne.w	80011a0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001092:	4b89      	ldr	r3, [pc, #548]	; (80012b8 <HAL_RCC_OscConfig+0x270>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f003 0302 	and.w	r3, r3, #2
 800109a:	2b00      	cmp	r3, #0
 800109c:	d005      	beq.n	80010aa <HAL_RCC_OscConfig+0x62>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	699b      	ldr	r3, [r3, #24]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d101      	bne.n	80010aa <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
 80010a8:	e3a2      	b.n	80017f0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6a1a      	ldr	r2, [r3, #32]
 80010ae:	4b82      	ldr	r3, [pc, #520]	; (80012b8 <HAL_RCC_OscConfig+0x270>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f003 0308 	and.w	r3, r3, #8
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d004      	beq.n	80010c4 <HAL_RCC_OscConfig+0x7c>
 80010ba:	4b7f      	ldr	r3, [pc, #508]	; (80012b8 <HAL_RCC_OscConfig+0x270>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80010c2:	e005      	b.n	80010d0 <HAL_RCC_OscConfig+0x88>
 80010c4:	4b7c      	ldr	r3, [pc, #496]	; (80012b8 <HAL_RCC_OscConfig+0x270>)
 80010c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010ca:	091b      	lsrs	r3, r3, #4
 80010cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d223      	bcs.n	800111c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	6a1b      	ldr	r3, [r3, #32]
 80010d8:	4618      	mov	r0, r3
 80010da:	f000 fd55 	bl	8001b88 <RCC_SetFlashLatencyFromMSIRange>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80010e4:	2301      	movs	r3, #1
 80010e6:	e383      	b.n	80017f0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80010e8:	4b73      	ldr	r3, [pc, #460]	; (80012b8 <HAL_RCC_OscConfig+0x270>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a72      	ldr	r2, [pc, #456]	; (80012b8 <HAL_RCC_OscConfig+0x270>)
 80010ee:	f043 0308 	orr.w	r3, r3, #8
 80010f2:	6013      	str	r3, [r2, #0]
 80010f4:	4b70      	ldr	r3, [pc, #448]	; (80012b8 <HAL_RCC_OscConfig+0x270>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6a1b      	ldr	r3, [r3, #32]
 8001100:	496d      	ldr	r1, [pc, #436]	; (80012b8 <HAL_RCC_OscConfig+0x270>)
 8001102:	4313      	orrs	r3, r2
 8001104:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001106:	4b6c      	ldr	r3, [pc, #432]	; (80012b8 <HAL_RCC_OscConfig+0x270>)
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	69db      	ldr	r3, [r3, #28]
 8001112:	021b      	lsls	r3, r3, #8
 8001114:	4968      	ldr	r1, [pc, #416]	; (80012b8 <HAL_RCC_OscConfig+0x270>)
 8001116:	4313      	orrs	r3, r2
 8001118:	604b      	str	r3, [r1, #4]
 800111a:	e025      	b.n	8001168 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800111c:	4b66      	ldr	r3, [pc, #408]	; (80012b8 <HAL_RCC_OscConfig+0x270>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a65      	ldr	r2, [pc, #404]	; (80012b8 <HAL_RCC_OscConfig+0x270>)
 8001122:	f043 0308 	orr.w	r3, r3, #8
 8001126:	6013      	str	r3, [r2, #0]
 8001128:	4b63      	ldr	r3, [pc, #396]	; (80012b8 <HAL_RCC_OscConfig+0x270>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6a1b      	ldr	r3, [r3, #32]
 8001134:	4960      	ldr	r1, [pc, #384]	; (80012b8 <HAL_RCC_OscConfig+0x270>)
 8001136:	4313      	orrs	r3, r2
 8001138:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800113a:	4b5f      	ldr	r3, [pc, #380]	; (80012b8 <HAL_RCC_OscConfig+0x270>)
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	69db      	ldr	r3, [r3, #28]
 8001146:	021b      	lsls	r3, r3, #8
 8001148:	495b      	ldr	r1, [pc, #364]	; (80012b8 <HAL_RCC_OscConfig+0x270>)
 800114a:	4313      	orrs	r3, r2
 800114c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800114e:	69bb      	ldr	r3, [r7, #24]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d109      	bne.n	8001168 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6a1b      	ldr	r3, [r3, #32]
 8001158:	4618      	mov	r0, r3
 800115a:	f000 fd15 	bl	8001b88 <RCC_SetFlashLatencyFromMSIRange>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001164:	2301      	movs	r3, #1
 8001166:	e343      	b.n	80017f0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001168:	f000 fc4a 	bl	8001a00 <HAL_RCC_GetSysClockFreq>
 800116c:	4602      	mov	r2, r0
 800116e:	4b52      	ldr	r3, [pc, #328]	; (80012b8 <HAL_RCC_OscConfig+0x270>)
 8001170:	689b      	ldr	r3, [r3, #8]
 8001172:	091b      	lsrs	r3, r3, #4
 8001174:	f003 030f 	and.w	r3, r3, #15
 8001178:	4950      	ldr	r1, [pc, #320]	; (80012bc <HAL_RCC_OscConfig+0x274>)
 800117a:	5ccb      	ldrb	r3, [r1, r3]
 800117c:	f003 031f 	and.w	r3, r3, #31
 8001180:	fa22 f303 	lsr.w	r3, r2, r3
 8001184:	4a4e      	ldr	r2, [pc, #312]	; (80012c0 <HAL_RCC_OscConfig+0x278>)
 8001186:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001188:	4b4e      	ldr	r3, [pc, #312]	; (80012c4 <HAL_RCC_OscConfig+0x27c>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4618      	mov	r0, r3
 800118e:	f7ff fbd5 	bl	800093c <HAL_InitTick>
 8001192:	4603      	mov	r3, r0
 8001194:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001196:	7bfb      	ldrb	r3, [r7, #15]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d052      	beq.n	8001242 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800119c:	7bfb      	ldrb	r3, [r7, #15]
 800119e:	e327      	b.n	80017f0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	699b      	ldr	r3, [r3, #24]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d032      	beq.n	800120e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80011a8:	4b43      	ldr	r3, [pc, #268]	; (80012b8 <HAL_RCC_OscConfig+0x270>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a42      	ldr	r2, [pc, #264]	; (80012b8 <HAL_RCC_OscConfig+0x270>)
 80011ae:	f043 0301 	orr.w	r3, r3, #1
 80011b2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80011b4:	f7ff fbfe 	bl	80009b4 <HAL_GetTick>
 80011b8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80011ba:	e008      	b.n	80011ce <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80011bc:	f7ff fbfa 	bl	80009b4 <HAL_GetTick>
 80011c0:	4602      	mov	r2, r0
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	2b02      	cmp	r3, #2
 80011c8:	d901      	bls.n	80011ce <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80011ca:	2303      	movs	r3, #3
 80011cc:	e310      	b.n	80017f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80011ce:	4b3a      	ldr	r3, [pc, #232]	; (80012b8 <HAL_RCC_OscConfig+0x270>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f003 0302 	and.w	r3, r3, #2
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d0f0      	beq.n	80011bc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011da:	4b37      	ldr	r3, [pc, #220]	; (80012b8 <HAL_RCC_OscConfig+0x270>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4a36      	ldr	r2, [pc, #216]	; (80012b8 <HAL_RCC_OscConfig+0x270>)
 80011e0:	f043 0308 	orr.w	r3, r3, #8
 80011e4:	6013      	str	r3, [r2, #0]
 80011e6:	4b34      	ldr	r3, [pc, #208]	; (80012b8 <HAL_RCC_OscConfig+0x270>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6a1b      	ldr	r3, [r3, #32]
 80011f2:	4931      	ldr	r1, [pc, #196]	; (80012b8 <HAL_RCC_OscConfig+0x270>)
 80011f4:	4313      	orrs	r3, r2
 80011f6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011f8:	4b2f      	ldr	r3, [pc, #188]	; (80012b8 <HAL_RCC_OscConfig+0x270>)
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	69db      	ldr	r3, [r3, #28]
 8001204:	021b      	lsls	r3, r3, #8
 8001206:	492c      	ldr	r1, [pc, #176]	; (80012b8 <HAL_RCC_OscConfig+0x270>)
 8001208:	4313      	orrs	r3, r2
 800120a:	604b      	str	r3, [r1, #4]
 800120c:	e01a      	b.n	8001244 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800120e:	4b2a      	ldr	r3, [pc, #168]	; (80012b8 <HAL_RCC_OscConfig+0x270>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4a29      	ldr	r2, [pc, #164]	; (80012b8 <HAL_RCC_OscConfig+0x270>)
 8001214:	f023 0301 	bic.w	r3, r3, #1
 8001218:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800121a:	f7ff fbcb 	bl	80009b4 <HAL_GetTick>
 800121e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001220:	e008      	b.n	8001234 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001222:	f7ff fbc7 	bl	80009b4 <HAL_GetTick>
 8001226:	4602      	mov	r2, r0
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	1ad3      	subs	r3, r2, r3
 800122c:	2b02      	cmp	r3, #2
 800122e:	d901      	bls.n	8001234 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001230:	2303      	movs	r3, #3
 8001232:	e2dd      	b.n	80017f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001234:	4b20      	ldr	r3, [pc, #128]	; (80012b8 <HAL_RCC_OscConfig+0x270>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f003 0302 	and.w	r3, r3, #2
 800123c:	2b00      	cmp	r3, #0
 800123e:	d1f0      	bne.n	8001222 <HAL_RCC_OscConfig+0x1da>
 8001240:	e000      	b.n	8001244 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001242:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f003 0301 	and.w	r3, r3, #1
 800124c:	2b00      	cmp	r3, #0
 800124e:	d074      	beq.n	800133a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001250:	69bb      	ldr	r3, [r7, #24]
 8001252:	2b08      	cmp	r3, #8
 8001254:	d005      	beq.n	8001262 <HAL_RCC_OscConfig+0x21a>
 8001256:	69bb      	ldr	r3, [r7, #24]
 8001258:	2b0c      	cmp	r3, #12
 800125a:	d10e      	bne.n	800127a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	2b03      	cmp	r3, #3
 8001260:	d10b      	bne.n	800127a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001262:	4b15      	ldr	r3, [pc, #84]	; (80012b8 <HAL_RCC_OscConfig+0x270>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800126a:	2b00      	cmp	r3, #0
 800126c:	d064      	beq.n	8001338 <HAL_RCC_OscConfig+0x2f0>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d160      	bne.n	8001338 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	e2ba      	b.n	80017f0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001282:	d106      	bne.n	8001292 <HAL_RCC_OscConfig+0x24a>
 8001284:	4b0c      	ldr	r3, [pc, #48]	; (80012b8 <HAL_RCC_OscConfig+0x270>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a0b      	ldr	r2, [pc, #44]	; (80012b8 <HAL_RCC_OscConfig+0x270>)
 800128a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800128e:	6013      	str	r3, [r2, #0]
 8001290:	e026      	b.n	80012e0 <HAL_RCC_OscConfig+0x298>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800129a:	d115      	bne.n	80012c8 <HAL_RCC_OscConfig+0x280>
 800129c:	4b06      	ldr	r3, [pc, #24]	; (80012b8 <HAL_RCC_OscConfig+0x270>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a05      	ldr	r2, [pc, #20]	; (80012b8 <HAL_RCC_OscConfig+0x270>)
 80012a2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012a6:	6013      	str	r3, [r2, #0]
 80012a8:	4b03      	ldr	r3, [pc, #12]	; (80012b8 <HAL_RCC_OscConfig+0x270>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a02      	ldr	r2, [pc, #8]	; (80012b8 <HAL_RCC_OscConfig+0x270>)
 80012ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012b2:	6013      	str	r3, [r2, #0]
 80012b4:	e014      	b.n	80012e0 <HAL_RCC_OscConfig+0x298>
 80012b6:	bf00      	nop
 80012b8:	40021000 	.word	0x40021000
 80012bc:	080058c4 	.word	0x080058c4
 80012c0:	20000000 	.word	0x20000000
 80012c4:	20000004 	.word	0x20000004
 80012c8:	4ba0      	ldr	r3, [pc, #640]	; (800154c <HAL_RCC_OscConfig+0x504>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a9f      	ldr	r2, [pc, #636]	; (800154c <HAL_RCC_OscConfig+0x504>)
 80012ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012d2:	6013      	str	r3, [r2, #0]
 80012d4:	4b9d      	ldr	r3, [pc, #628]	; (800154c <HAL_RCC_OscConfig+0x504>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a9c      	ldr	r2, [pc, #624]	; (800154c <HAL_RCC_OscConfig+0x504>)
 80012da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d013      	beq.n	8001310 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012e8:	f7ff fb64 	bl	80009b4 <HAL_GetTick>
 80012ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80012ee:	e008      	b.n	8001302 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012f0:	f7ff fb60 	bl	80009b4 <HAL_GetTick>
 80012f4:	4602      	mov	r2, r0
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	2b64      	cmp	r3, #100	; 0x64
 80012fc:	d901      	bls.n	8001302 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80012fe:	2303      	movs	r3, #3
 8001300:	e276      	b.n	80017f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001302:	4b92      	ldr	r3, [pc, #584]	; (800154c <HAL_RCC_OscConfig+0x504>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800130a:	2b00      	cmp	r3, #0
 800130c:	d0f0      	beq.n	80012f0 <HAL_RCC_OscConfig+0x2a8>
 800130e:	e014      	b.n	800133a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001310:	f7ff fb50 	bl	80009b4 <HAL_GetTick>
 8001314:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001316:	e008      	b.n	800132a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001318:	f7ff fb4c 	bl	80009b4 <HAL_GetTick>
 800131c:	4602      	mov	r2, r0
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	2b64      	cmp	r3, #100	; 0x64
 8001324:	d901      	bls.n	800132a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001326:	2303      	movs	r3, #3
 8001328:	e262      	b.n	80017f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800132a:	4b88      	ldr	r3, [pc, #544]	; (800154c <HAL_RCC_OscConfig+0x504>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001332:	2b00      	cmp	r3, #0
 8001334:	d1f0      	bne.n	8001318 <HAL_RCC_OscConfig+0x2d0>
 8001336:	e000      	b.n	800133a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001338:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f003 0302 	and.w	r3, r3, #2
 8001342:	2b00      	cmp	r3, #0
 8001344:	d060      	beq.n	8001408 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001346:	69bb      	ldr	r3, [r7, #24]
 8001348:	2b04      	cmp	r3, #4
 800134a:	d005      	beq.n	8001358 <HAL_RCC_OscConfig+0x310>
 800134c:	69bb      	ldr	r3, [r7, #24]
 800134e:	2b0c      	cmp	r3, #12
 8001350:	d119      	bne.n	8001386 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	2b02      	cmp	r3, #2
 8001356:	d116      	bne.n	8001386 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001358:	4b7c      	ldr	r3, [pc, #496]	; (800154c <HAL_RCC_OscConfig+0x504>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001360:	2b00      	cmp	r3, #0
 8001362:	d005      	beq.n	8001370 <HAL_RCC_OscConfig+0x328>
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	68db      	ldr	r3, [r3, #12]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d101      	bne.n	8001370 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800136c:	2301      	movs	r3, #1
 800136e:	e23f      	b.n	80017f0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001370:	4b76      	ldr	r3, [pc, #472]	; (800154c <HAL_RCC_OscConfig+0x504>)
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	691b      	ldr	r3, [r3, #16]
 800137c:	061b      	lsls	r3, r3, #24
 800137e:	4973      	ldr	r1, [pc, #460]	; (800154c <HAL_RCC_OscConfig+0x504>)
 8001380:	4313      	orrs	r3, r2
 8001382:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001384:	e040      	b.n	8001408 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	68db      	ldr	r3, [r3, #12]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d023      	beq.n	80013d6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800138e:	4b6f      	ldr	r3, [pc, #444]	; (800154c <HAL_RCC_OscConfig+0x504>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a6e      	ldr	r2, [pc, #440]	; (800154c <HAL_RCC_OscConfig+0x504>)
 8001394:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001398:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800139a:	f7ff fb0b 	bl	80009b4 <HAL_GetTick>
 800139e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013a0:	e008      	b.n	80013b4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013a2:	f7ff fb07 	bl	80009b4 <HAL_GetTick>
 80013a6:	4602      	mov	r2, r0
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	1ad3      	subs	r3, r2, r3
 80013ac:	2b02      	cmp	r3, #2
 80013ae:	d901      	bls.n	80013b4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80013b0:	2303      	movs	r3, #3
 80013b2:	e21d      	b.n	80017f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013b4:	4b65      	ldr	r3, [pc, #404]	; (800154c <HAL_RCC_OscConfig+0x504>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d0f0      	beq.n	80013a2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013c0:	4b62      	ldr	r3, [pc, #392]	; (800154c <HAL_RCC_OscConfig+0x504>)
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	691b      	ldr	r3, [r3, #16]
 80013cc:	061b      	lsls	r3, r3, #24
 80013ce:	495f      	ldr	r1, [pc, #380]	; (800154c <HAL_RCC_OscConfig+0x504>)
 80013d0:	4313      	orrs	r3, r2
 80013d2:	604b      	str	r3, [r1, #4]
 80013d4:	e018      	b.n	8001408 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013d6:	4b5d      	ldr	r3, [pc, #372]	; (800154c <HAL_RCC_OscConfig+0x504>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a5c      	ldr	r2, [pc, #368]	; (800154c <HAL_RCC_OscConfig+0x504>)
 80013dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80013e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013e2:	f7ff fae7 	bl	80009b4 <HAL_GetTick>
 80013e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80013e8:	e008      	b.n	80013fc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013ea:	f7ff fae3 	bl	80009b4 <HAL_GetTick>
 80013ee:	4602      	mov	r2, r0
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	1ad3      	subs	r3, r2, r3
 80013f4:	2b02      	cmp	r3, #2
 80013f6:	d901      	bls.n	80013fc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80013f8:	2303      	movs	r3, #3
 80013fa:	e1f9      	b.n	80017f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80013fc:	4b53      	ldr	r3, [pc, #332]	; (800154c <HAL_RCC_OscConfig+0x504>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001404:	2b00      	cmp	r3, #0
 8001406:	d1f0      	bne.n	80013ea <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f003 0308 	and.w	r3, r3, #8
 8001410:	2b00      	cmp	r3, #0
 8001412:	d03c      	beq.n	800148e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	695b      	ldr	r3, [r3, #20]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d01c      	beq.n	8001456 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800141c:	4b4b      	ldr	r3, [pc, #300]	; (800154c <HAL_RCC_OscConfig+0x504>)
 800141e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001422:	4a4a      	ldr	r2, [pc, #296]	; (800154c <HAL_RCC_OscConfig+0x504>)
 8001424:	f043 0301 	orr.w	r3, r3, #1
 8001428:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800142c:	f7ff fac2 	bl	80009b4 <HAL_GetTick>
 8001430:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001432:	e008      	b.n	8001446 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001434:	f7ff fabe 	bl	80009b4 <HAL_GetTick>
 8001438:	4602      	mov	r2, r0
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	2b02      	cmp	r3, #2
 8001440:	d901      	bls.n	8001446 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001442:	2303      	movs	r3, #3
 8001444:	e1d4      	b.n	80017f0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001446:	4b41      	ldr	r3, [pc, #260]	; (800154c <HAL_RCC_OscConfig+0x504>)
 8001448:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800144c:	f003 0302 	and.w	r3, r3, #2
 8001450:	2b00      	cmp	r3, #0
 8001452:	d0ef      	beq.n	8001434 <HAL_RCC_OscConfig+0x3ec>
 8001454:	e01b      	b.n	800148e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001456:	4b3d      	ldr	r3, [pc, #244]	; (800154c <HAL_RCC_OscConfig+0x504>)
 8001458:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800145c:	4a3b      	ldr	r2, [pc, #236]	; (800154c <HAL_RCC_OscConfig+0x504>)
 800145e:	f023 0301 	bic.w	r3, r3, #1
 8001462:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001466:	f7ff faa5 	bl	80009b4 <HAL_GetTick>
 800146a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800146c:	e008      	b.n	8001480 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800146e:	f7ff faa1 	bl	80009b4 <HAL_GetTick>
 8001472:	4602      	mov	r2, r0
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	1ad3      	subs	r3, r2, r3
 8001478:	2b02      	cmp	r3, #2
 800147a:	d901      	bls.n	8001480 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800147c:	2303      	movs	r3, #3
 800147e:	e1b7      	b.n	80017f0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001480:	4b32      	ldr	r3, [pc, #200]	; (800154c <HAL_RCC_OscConfig+0x504>)
 8001482:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001486:	f003 0302 	and.w	r3, r3, #2
 800148a:	2b00      	cmp	r3, #0
 800148c:	d1ef      	bne.n	800146e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f003 0304 	and.w	r3, r3, #4
 8001496:	2b00      	cmp	r3, #0
 8001498:	f000 80a6 	beq.w	80015e8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800149c:	2300      	movs	r3, #0
 800149e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80014a0:	4b2a      	ldr	r3, [pc, #168]	; (800154c <HAL_RCC_OscConfig+0x504>)
 80014a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d10d      	bne.n	80014c8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014ac:	4b27      	ldr	r3, [pc, #156]	; (800154c <HAL_RCC_OscConfig+0x504>)
 80014ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014b0:	4a26      	ldr	r2, [pc, #152]	; (800154c <HAL_RCC_OscConfig+0x504>)
 80014b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014b6:	6593      	str	r3, [r2, #88]	; 0x58
 80014b8:	4b24      	ldr	r3, [pc, #144]	; (800154c <HAL_RCC_OscConfig+0x504>)
 80014ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014c0:	60bb      	str	r3, [r7, #8]
 80014c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014c4:	2301      	movs	r3, #1
 80014c6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014c8:	4b21      	ldr	r3, [pc, #132]	; (8001550 <HAL_RCC_OscConfig+0x508>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d118      	bne.n	8001506 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80014d4:	4b1e      	ldr	r3, [pc, #120]	; (8001550 <HAL_RCC_OscConfig+0x508>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a1d      	ldr	r2, [pc, #116]	; (8001550 <HAL_RCC_OscConfig+0x508>)
 80014da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014de:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014e0:	f7ff fa68 	bl	80009b4 <HAL_GetTick>
 80014e4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014e6:	e008      	b.n	80014fa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014e8:	f7ff fa64 	bl	80009b4 <HAL_GetTick>
 80014ec:	4602      	mov	r2, r0
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	2b02      	cmp	r3, #2
 80014f4:	d901      	bls.n	80014fa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80014f6:	2303      	movs	r3, #3
 80014f8:	e17a      	b.n	80017f0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014fa:	4b15      	ldr	r3, [pc, #84]	; (8001550 <HAL_RCC_OscConfig+0x508>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001502:	2b00      	cmp	r3, #0
 8001504:	d0f0      	beq.n	80014e8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	2b01      	cmp	r3, #1
 800150c:	d108      	bne.n	8001520 <HAL_RCC_OscConfig+0x4d8>
 800150e:	4b0f      	ldr	r3, [pc, #60]	; (800154c <HAL_RCC_OscConfig+0x504>)
 8001510:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001514:	4a0d      	ldr	r2, [pc, #52]	; (800154c <HAL_RCC_OscConfig+0x504>)
 8001516:	f043 0301 	orr.w	r3, r3, #1
 800151a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800151e:	e029      	b.n	8001574 <HAL_RCC_OscConfig+0x52c>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	2b05      	cmp	r3, #5
 8001526:	d115      	bne.n	8001554 <HAL_RCC_OscConfig+0x50c>
 8001528:	4b08      	ldr	r3, [pc, #32]	; (800154c <HAL_RCC_OscConfig+0x504>)
 800152a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800152e:	4a07      	ldr	r2, [pc, #28]	; (800154c <HAL_RCC_OscConfig+0x504>)
 8001530:	f043 0304 	orr.w	r3, r3, #4
 8001534:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001538:	4b04      	ldr	r3, [pc, #16]	; (800154c <HAL_RCC_OscConfig+0x504>)
 800153a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800153e:	4a03      	ldr	r2, [pc, #12]	; (800154c <HAL_RCC_OscConfig+0x504>)
 8001540:	f043 0301 	orr.w	r3, r3, #1
 8001544:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001548:	e014      	b.n	8001574 <HAL_RCC_OscConfig+0x52c>
 800154a:	bf00      	nop
 800154c:	40021000 	.word	0x40021000
 8001550:	40007000 	.word	0x40007000
 8001554:	4b9c      	ldr	r3, [pc, #624]	; (80017c8 <HAL_RCC_OscConfig+0x780>)
 8001556:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800155a:	4a9b      	ldr	r2, [pc, #620]	; (80017c8 <HAL_RCC_OscConfig+0x780>)
 800155c:	f023 0301 	bic.w	r3, r3, #1
 8001560:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001564:	4b98      	ldr	r3, [pc, #608]	; (80017c8 <HAL_RCC_OscConfig+0x780>)
 8001566:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800156a:	4a97      	ldr	r2, [pc, #604]	; (80017c8 <HAL_RCC_OscConfig+0x780>)
 800156c:	f023 0304 	bic.w	r3, r3, #4
 8001570:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d016      	beq.n	80015aa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800157c:	f7ff fa1a 	bl	80009b4 <HAL_GetTick>
 8001580:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001582:	e00a      	b.n	800159a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001584:	f7ff fa16 	bl	80009b4 <HAL_GetTick>
 8001588:	4602      	mov	r2, r0
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001592:	4293      	cmp	r3, r2
 8001594:	d901      	bls.n	800159a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001596:	2303      	movs	r3, #3
 8001598:	e12a      	b.n	80017f0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800159a:	4b8b      	ldr	r3, [pc, #556]	; (80017c8 <HAL_RCC_OscConfig+0x780>)
 800159c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015a0:	f003 0302 	and.w	r3, r3, #2
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d0ed      	beq.n	8001584 <HAL_RCC_OscConfig+0x53c>
 80015a8:	e015      	b.n	80015d6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015aa:	f7ff fa03 	bl	80009b4 <HAL_GetTick>
 80015ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80015b0:	e00a      	b.n	80015c8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015b2:	f7ff f9ff 	bl	80009b4 <HAL_GetTick>
 80015b6:	4602      	mov	r2, r0
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	1ad3      	subs	r3, r2, r3
 80015bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d901      	bls.n	80015c8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80015c4:	2303      	movs	r3, #3
 80015c6:	e113      	b.n	80017f0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80015c8:	4b7f      	ldr	r3, [pc, #508]	; (80017c8 <HAL_RCC_OscConfig+0x780>)
 80015ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015ce:	f003 0302 	and.w	r3, r3, #2
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d1ed      	bne.n	80015b2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015d6:	7ffb      	ldrb	r3, [r7, #31]
 80015d8:	2b01      	cmp	r3, #1
 80015da:	d105      	bne.n	80015e8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015dc:	4b7a      	ldr	r3, [pc, #488]	; (80017c8 <HAL_RCC_OscConfig+0x780>)
 80015de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015e0:	4a79      	ldr	r2, [pc, #484]	; (80017c8 <HAL_RCC_OscConfig+0x780>)
 80015e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015e6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	f000 80fe 	beq.w	80017ee <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015f6:	2b02      	cmp	r3, #2
 80015f8:	f040 80d0 	bne.w	800179c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80015fc:	4b72      	ldr	r3, [pc, #456]	; (80017c8 <HAL_RCC_OscConfig+0x780>)
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	f003 0203 	and.w	r2, r3, #3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800160c:	429a      	cmp	r2, r3
 800160e:	d130      	bne.n	8001672 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161a:	3b01      	subs	r3, #1
 800161c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800161e:	429a      	cmp	r2, r3
 8001620:	d127      	bne.n	8001672 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800162c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800162e:	429a      	cmp	r2, r3
 8001630:	d11f      	bne.n	8001672 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001638:	687a      	ldr	r2, [r7, #4]
 800163a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800163c:	2a07      	cmp	r2, #7
 800163e:	bf14      	ite	ne
 8001640:	2201      	movne	r2, #1
 8001642:	2200      	moveq	r2, #0
 8001644:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001646:	4293      	cmp	r3, r2
 8001648:	d113      	bne.n	8001672 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001654:	085b      	lsrs	r3, r3, #1
 8001656:	3b01      	subs	r3, #1
 8001658:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800165a:	429a      	cmp	r2, r3
 800165c:	d109      	bne.n	8001672 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001668:	085b      	lsrs	r3, r3, #1
 800166a:	3b01      	subs	r3, #1
 800166c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800166e:	429a      	cmp	r2, r3
 8001670:	d06e      	beq.n	8001750 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001672:	69bb      	ldr	r3, [r7, #24]
 8001674:	2b0c      	cmp	r3, #12
 8001676:	d069      	beq.n	800174c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001678:	4b53      	ldr	r3, [pc, #332]	; (80017c8 <HAL_RCC_OscConfig+0x780>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001680:	2b00      	cmp	r3, #0
 8001682:	d105      	bne.n	8001690 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001684:	4b50      	ldr	r3, [pc, #320]	; (80017c8 <HAL_RCC_OscConfig+0x780>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001690:	2301      	movs	r3, #1
 8001692:	e0ad      	b.n	80017f0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001694:	4b4c      	ldr	r3, [pc, #304]	; (80017c8 <HAL_RCC_OscConfig+0x780>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a4b      	ldr	r2, [pc, #300]	; (80017c8 <HAL_RCC_OscConfig+0x780>)
 800169a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800169e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80016a0:	f7ff f988 	bl	80009b4 <HAL_GetTick>
 80016a4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016a6:	e008      	b.n	80016ba <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016a8:	f7ff f984 	bl	80009b4 <HAL_GetTick>
 80016ac:	4602      	mov	r2, r0
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	2b02      	cmp	r3, #2
 80016b4:	d901      	bls.n	80016ba <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80016b6:	2303      	movs	r3, #3
 80016b8:	e09a      	b.n	80017f0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016ba:	4b43      	ldr	r3, [pc, #268]	; (80017c8 <HAL_RCC_OscConfig+0x780>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d1f0      	bne.n	80016a8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016c6:	4b40      	ldr	r3, [pc, #256]	; (80017c8 <HAL_RCC_OscConfig+0x780>)
 80016c8:	68da      	ldr	r2, [r3, #12]
 80016ca:	4b40      	ldr	r3, [pc, #256]	; (80017cc <HAL_RCC_OscConfig+0x784>)
 80016cc:	4013      	ands	r3, r2
 80016ce:	687a      	ldr	r2, [r7, #4]
 80016d0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80016d2:	687a      	ldr	r2, [r7, #4]
 80016d4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80016d6:	3a01      	subs	r2, #1
 80016d8:	0112      	lsls	r2, r2, #4
 80016da:	4311      	orrs	r1, r2
 80016dc:	687a      	ldr	r2, [r7, #4]
 80016de:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80016e0:	0212      	lsls	r2, r2, #8
 80016e2:	4311      	orrs	r1, r2
 80016e4:	687a      	ldr	r2, [r7, #4]
 80016e6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80016e8:	0852      	lsrs	r2, r2, #1
 80016ea:	3a01      	subs	r2, #1
 80016ec:	0552      	lsls	r2, r2, #21
 80016ee:	4311      	orrs	r1, r2
 80016f0:	687a      	ldr	r2, [r7, #4]
 80016f2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80016f4:	0852      	lsrs	r2, r2, #1
 80016f6:	3a01      	subs	r2, #1
 80016f8:	0652      	lsls	r2, r2, #25
 80016fa:	4311      	orrs	r1, r2
 80016fc:	687a      	ldr	r2, [r7, #4]
 80016fe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001700:	0912      	lsrs	r2, r2, #4
 8001702:	0452      	lsls	r2, r2, #17
 8001704:	430a      	orrs	r2, r1
 8001706:	4930      	ldr	r1, [pc, #192]	; (80017c8 <HAL_RCC_OscConfig+0x780>)
 8001708:	4313      	orrs	r3, r2
 800170a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800170c:	4b2e      	ldr	r3, [pc, #184]	; (80017c8 <HAL_RCC_OscConfig+0x780>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a2d      	ldr	r2, [pc, #180]	; (80017c8 <HAL_RCC_OscConfig+0x780>)
 8001712:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001716:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001718:	4b2b      	ldr	r3, [pc, #172]	; (80017c8 <HAL_RCC_OscConfig+0x780>)
 800171a:	68db      	ldr	r3, [r3, #12]
 800171c:	4a2a      	ldr	r2, [pc, #168]	; (80017c8 <HAL_RCC_OscConfig+0x780>)
 800171e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001722:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001724:	f7ff f946 	bl	80009b4 <HAL_GetTick>
 8001728:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800172a:	e008      	b.n	800173e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800172c:	f7ff f942 	bl	80009b4 <HAL_GetTick>
 8001730:	4602      	mov	r2, r0
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	2b02      	cmp	r3, #2
 8001738:	d901      	bls.n	800173e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800173a:	2303      	movs	r3, #3
 800173c:	e058      	b.n	80017f0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800173e:	4b22      	ldr	r3, [pc, #136]	; (80017c8 <HAL_RCC_OscConfig+0x780>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001746:	2b00      	cmp	r3, #0
 8001748:	d0f0      	beq.n	800172c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800174a:	e050      	b.n	80017ee <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	e04f      	b.n	80017f0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001750:	4b1d      	ldr	r3, [pc, #116]	; (80017c8 <HAL_RCC_OscConfig+0x780>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001758:	2b00      	cmp	r3, #0
 800175a:	d148      	bne.n	80017ee <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800175c:	4b1a      	ldr	r3, [pc, #104]	; (80017c8 <HAL_RCC_OscConfig+0x780>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a19      	ldr	r2, [pc, #100]	; (80017c8 <HAL_RCC_OscConfig+0x780>)
 8001762:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001766:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001768:	4b17      	ldr	r3, [pc, #92]	; (80017c8 <HAL_RCC_OscConfig+0x780>)
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	4a16      	ldr	r2, [pc, #88]	; (80017c8 <HAL_RCC_OscConfig+0x780>)
 800176e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001772:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001774:	f7ff f91e 	bl	80009b4 <HAL_GetTick>
 8001778:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800177a:	e008      	b.n	800178e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800177c:	f7ff f91a 	bl	80009b4 <HAL_GetTick>
 8001780:	4602      	mov	r2, r0
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	2b02      	cmp	r3, #2
 8001788:	d901      	bls.n	800178e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800178a:	2303      	movs	r3, #3
 800178c:	e030      	b.n	80017f0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800178e:	4b0e      	ldr	r3, [pc, #56]	; (80017c8 <HAL_RCC_OscConfig+0x780>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001796:	2b00      	cmp	r3, #0
 8001798:	d0f0      	beq.n	800177c <HAL_RCC_OscConfig+0x734>
 800179a:	e028      	b.n	80017ee <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800179c:	69bb      	ldr	r3, [r7, #24]
 800179e:	2b0c      	cmp	r3, #12
 80017a0:	d023      	beq.n	80017ea <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017a2:	4b09      	ldr	r3, [pc, #36]	; (80017c8 <HAL_RCC_OscConfig+0x780>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a08      	ldr	r2, [pc, #32]	; (80017c8 <HAL_RCC_OscConfig+0x780>)
 80017a8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ae:	f7ff f901 	bl	80009b4 <HAL_GetTick>
 80017b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017b4:	e00c      	b.n	80017d0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017b6:	f7ff f8fd 	bl	80009b4 <HAL_GetTick>
 80017ba:	4602      	mov	r2, r0
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	1ad3      	subs	r3, r2, r3
 80017c0:	2b02      	cmp	r3, #2
 80017c2:	d905      	bls.n	80017d0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80017c4:	2303      	movs	r3, #3
 80017c6:	e013      	b.n	80017f0 <HAL_RCC_OscConfig+0x7a8>
 80017c8:	40021000 	.word	0x40021000
 80017cc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017d0:	4b09      	ldr	r3, [pc, #36]	; (80017f8 <HAL_RCC_OscConfig+0x7b0>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d1ec      	bne.n	80017b6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80017dc:	4b06      	ldr	r3, [pc, #24]	; (80017f8 <HAL_RCC_OscConfig+0x7b0>)
 80017de:	68da      	ldr	r2, [r3, #12]
 80017e0:	4905      	ldr	r1, [pc, #20]	; (80017f8 <HAL_RCC_OscConfig+0x7b0>)
 80017e2:	4b06      	ldr	r3, [pc, #24]	; (80017fc <HAL_RCC_OscConfig+0x7b4>)
 80017e4:	4013      	ands	r3, r2
 80017e6:	60cb      	str	r3, [r1, #12]
 80017e8:	e001      	b.n	80017ee <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e000      	b.n	80017f0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80017ee:	2300      	movs	r3, #0
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	3720      	adds	r7, #32
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	40021000 	.word	0x40021000
 80017fc:	feeefffc 	.word	0xfeeefffc

08001800 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b084      	sub	sp, #16
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d101      	bne.n	8001814 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001810:	2301      	movs	r3, #1
 8001812:	e0e7      	b.n	80019e4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001814:	4b75      	ldr	r3, [pc, #468]	; (80019ec <HAL_RCC_ClockConfig+0x1ec>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f003 0307 	and.w	r3, r3, #7
 800181c:	683a      	ldr	r2, [r7, #0]
 800181e:	429a      	cmp	r2, r3
 8001820:	d910      	bls.n	8001844 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001822:	4b72      	ldr	r3, [pc, #456]	; (80019ec <HAL_RCC_ClockConfig+0x1ec>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f023 0207 	bic.w	r2, r3, #7
 800182a:	4970      	ldr	r1, [pc, #448]	; (80019ec <HAL_RCC_ClockConfig+0x1ec>)
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	4313      	orrs	r3, r2
 8001830:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001832:	4b6e      	ldr	r3, [pc, #440]	; (80019ec <HAL_RCC_ClockConfig+0x1ec>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 0307 	and.w	r3, r3, #7
 800183a:	683a      	ldr	r2, [r7, #0]
 800183c:	429a      	cmp	r2, r3
 800183e:	d001      	beq.n	8001844 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001840:	2301      	movs	r3, #1
 8001842:	e0cf      	b.n	80019e4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f003 0302 	and.w	r3, r3, #2
 800184c:	2b00      	cmp	r3, #0
 800184e:	d010      	beq.n	8001872 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	689a      	ldr	r2, [r3, #8]
 8001854:	4b66      	ldr	r3, [pc, #408]	; (80019f0 <HAL_RCC_ClockConfig+0x1f0>)
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800185c:	429a      	cmp	r2, r3
 800185e:	d908      	bls.n	8001872 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001860:	4b63      	ldr	r3, [pc, #396]	; (80019f0 <HAL_RCC_ClockConfig+0x1f0>)
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	4960      	ldr	r1, [pc, #384]	; (80019f0 <HAL_RCC_ClockConfig+0x1f0>)
 800186e:	4313      	orrs	r3, r2
 8001870:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 0301 	and.w	r3, r3, #1
 800187a:	2b00      	cmp	r3, #0
 800187c:	d04c      	beq.n	8001918 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	2b03      	cmp	r3, #3
 8001884:	d107      	bne.n	8001896 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001886:	4b5a      	ldr	r3, [pc, #360]	; (80019f0 <HAL_RCC_ClockConfig+0x1f0>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d121      	bne.n	80018d6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e0a6      	b.n	80019e4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	2b02      	cmp	r3, #2
 800189c:	d107      	bne.n	80018ae <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800189e:	4b54      	ldr	r3, [pc, #336]	; (80019f0 <HAL_RCC_ClockConfig+0x1f0>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d115      	bne.n	80018d6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e09a      	b.n	80019e4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d107      	bne.n	80018c6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018b6:	4b4e      	ldr	r3, [pc, #312]	; (80019f0 <HAL_RCC_ClockConfig+0x1f0>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 0302 	and.w	r3, r3, #2
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d109      	bne.n	80018d6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e08e      	b.n	80019e4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018c6:	4b4a      	ldr	r3, [pc, #296]	; (80019f0 <HAL_RCC_ClockConfig+0x1f0>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d101      	bne.n	80018d6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e086      	b.n	80019e4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80018d6:	4b46      	ldr	r3, [pc, #280]	; (80019f0 <HAL_RCC_ClockConfig+0x1f0>)
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	f023 0203 	bic.w	r2, r3, #3
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	4943      	ldr	r1, [pc, #268]	; (80019f0 <HAL_RCC_ClockConfig+0x1f0>)
 80018e4:	4313      	orrs	r3, r2
 80018e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80018e8:	f7ff f864 	bl	80009b4 <HAL_GetTick>
 80018ec:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018ee:	e00a      	b.n	8001906 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018f0:	f7ff f860 	bl	80009b4 <HAL_GetTick>
 80018f4:	4602      	mov	r2, r0
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80018fe:	4293      	cmp	r3, r2
 8001900:	d901      	bls.n	8001906 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001902:	2303      	movs	r3, #3
 8001904:	e06e      	b.n	80019e4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001906:	4b3a      	ldr	r3, [pc, #232]	; (80019f0 <HAL_RCC_ClockConfig+0x1f0>)
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	f003 020c 	and.w	r2, r3, #12
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	429a      	cmp	r2, r3
 8001916:	d1eb      	bne.n	80018f0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 0302 	and.w	r3, r3, #2
 8001920:	2b00      	cmp	r3, #0
 8001922:	d010      	beq.n	8001946 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	689a      	ldr	r2, [r3, #8]
 8001928:	4b31      	ldr	r3, [pc, #196]	; (80019f0 <HAL_RCC_ClockConfig+0x1f0>)
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001930:	429a      	cmp	r2, r3
 8001932:	d208      	bcs.n	8001946 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001934:	4b2e      	ldr	r3, [pc, #184]	; (80019f0 <HAL_RCC_ClockConfig+0x1f0>)
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	492b      	ldr	r1, [pc, #172]	; (80019f0 <HAL_RCC_ClockConfig+0x1f0>)
 8001942:	4313      	orrs	r3, r2
 8001944:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001946:	4b29      	ldr	r3, [pc, #164]	; (80019ec <HAL_RCC_ClockConfig+0x1ec>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 0307 	and.w	r3, r3, #7
 800194e:	683a      	ldr	r2, [r7, #0]
 8001950:	429a      	cmp	r2, r3
 8001952:	d210      	bcs.n	8001976 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001954:	4b25      	ldr	r3, [pc, #148]	; (80019ec <HAL_RCC_ClockConfig+0x1ec>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f023 0207 	bic.w	r2, r3, #7
 800195c:	4923      	ldr	r1, [pc, #140]	; (80019ec <HAL_RCC_ClockConfig+0x1ec>)
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	4313      	orrs	r3, r2
 8001962:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001964:	4b21      	ldr	r3, [pc, #132]	; (80019ec <HAL_RCC_ClockConfig+0x1ec>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 0307 	and.w	r3, r3, #7
 800196c:	683a      	ldr	r2, [r7, #0]
 800196e:	429a      	cmp	r2, r3
 8001970:	d001      	beq.n	8001976 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e036      	b.n	80019e4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 0304 	and.w	r3, r3, #4
 800197e:	2b00      	cmp	r3, #0
 8001980:	d008      	beq.n	8001994 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001982:	4b1b      	ldr	r3, [pc, #108]	; (80019f0 <HAL_RCC_ClockConfig+0x1f0>)
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	68db      	ldr	r3, [r3, #12]
 800198e:	4918      	ldr	r1, [pc, #96]	; (80019f0 <HAL_RCC_ClockConfig+0x1f0>)
 8001990:	4313      	orrs	r3, r2
 8001992:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f003 0308 	and.w	r3, r3, #8
 800199c:	2b00      	cmp	r3, #0
 800199e:	d009      	beq.n	80019b4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019a0:	4b13      	ldr	r3, [pc, #76]	; (80019f0 <HAL_RCC_ClockConfig+0x1f0>)
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	691b      	ldr	r3, [r3, #16]
 80019ac:	00db      	lsls	r3, r3, #3
 80019ae:	4910      	ldr	r1, [pc, #64]	; (80019f0 <HAL_RCC_ClockConfig+0x1f0>)
 80019b0:	4313      	orrs	r3, r2
 80019b2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80019b4:	f000 f824 	bl	8001a00 <HAL_RCC_GetSysClockFreq>
 80019b8:	4602      	mov	r2, r0
 80019ba:	4b0d      	ldr	r3, [pc, #52]	; (80019f0 <HAL_RCC_ClockConfig+0x1f0>)
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	091b      	lsrs	r3, r3, #4
 80019c0:	f003 030f 	and.w	r3, r3, #15
 80019c4:	490b      	ldr	r1, [pc, #44]	; (80019f4 <HAL_RCC_ClockConfig+0x1f4>)
 80019c6:	5ccb      	ldrb	r3, [r1, r3]
 80019c8:	f003 031f 	and.w	r3, r3, #31
 80019cc:	fa22 f303 	lsr.w	r3, r2, r3
 80019d0:	4a09      	ldr	r2, [pc, #36]	; (80019f8 <HAL_RCC_ClockConfig+0x1f8>)
 80019d2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80019d4:	4b09      	ldr	r3, [pc, #36]	; (80019fc <HAL_RCC_ClockConfig+0x1fc>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4618      	mov	r0, r3
 80019da:	f7fe ffaf 	bl	800093c <HAL_InitTick>
 80019de:	4603      	mov	r3, r0
 80019e0:	72fb      	strb	r3, [r7, #11]

  return status;
 80019e2:	7afb      	ldrb	r3, [r7, #11]
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	3710      	adds	r7, #16
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	40022000 	.word	0x40022000
 80019f0:	40021000 	.word	0x40021000
 80019f4:	080058c4 	.word	0x080058c4
 80019f8:	20000000 	.word	0x20000000
 80019fc:	20000004 	.word	0x20000004

08001a00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b089      	sub	sp, #36	; 0x24
 8001a04:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001a06:	2300      	movs	r3, #0
 8001a08:	61fb      	str	r3, [r7, #28]
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a0e:	4b3e      	ldr	r3, [pc, #248]	; (8001b08 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	f003 030c 	and.w	r3, r3, #12
 8001a16:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a18:	4b3b      	ldr	r3, [pc, #236]	; (8001b08 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	f003 0303 	and.w	r3, r3, #3
 8001a20:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d005      	beq.n	8001a34 <HAL_RCC_GetSysClockFreq+0x34>
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	2b0c      	cmp	r3, #12
 8001a2c:	d121      	bne.n	8001a72 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d11e      	bne.n	8001a72 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001a34:	4b34      	ldr	r3, [pc, #208]	; (8001b08 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f003 0308 	and.w	r3, r3, #8
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d107      	bne.n	8001a50 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001a40:	4b31      	ldr	r3, [pc, #196]	; (8001b08 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a46:	0a1b      	lsrs	r3, r3, #8
 8001a48:	f003 030f 	and.w	r3, r3, #15
 8001a4c:	61fb      	str	r3, [r7, #28]
 8001a4e:	e005      	b.n	8001a5c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001a50:	4b2d      	ldr	r3, [pc, #180]	; (8001b08 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	091b      	lsrs	r3, r3, #4
 8001a56:	f003 030f 	and.w	r3, r3, #15
 8001a5a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001a5c:	4a2b      	ldr	r2, [pc, #172]	; (8001b0c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a64:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d10d      	bne.n	8001a88 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a70:	e00a      	b.n	8001a88 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	2b04      	cmp	r3, #4
 8001a76:	d102      	bne.n	8001a7e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001a78:	4b25      	ldr	r3, [pc, #148]	; (8001b10 <HAL_RCC_GetSysClockFreq+0x110>)
 8001a7a:	61bb      	str	r3, [r7, #24]
 8001a7c:	e004      	b.n	8001a88 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	2b08      	cmp	r3, #8
 8001a82:	d101      	bne.n	8001a88 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001a84:	4b23      	ldr	r3, [pc, #140]	; (8001b14 <HAL_RCC_GetSysClockFreq+0x114>)
 8001a86:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	2b0c      	cmp	r3, #12
 8001a8c:	d134      	bne.n	8001af8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001a8e:	4b1e      	ldr	r3, [pc, #120]	; (8001b08 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a90:	68db      	ldr	r3, [r3, #12]
 8001a92:	f003 0303 	and.w	r3, r3, #3
 8001a96:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	2b02      	cmp	r3, #2
 8001a9c:	d003      	beq.n	8001aa6 <HAL_RCC_GetSysClockFreq+0xa6>
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	2b03      	cmp	r3, #3
 8001aa2:	d003      	beq.n	8001aac <HAL_RCC_GetSysClockFreq+0xac>
 8001aa4:	e005      	b.n	8001ab2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001aa6:	4b1a      	ldr	r3, [pc, #104]	; (8001b10 <HAL_RCC_GetSysClockFreq+0x110>)
 8001aa8:	617b      	str	r3, [r7, #20]
      break;
 8001aaa:	e005      	b.n	8001ab8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001aac:	4b19      	ldr	r3, [pc, #100]	; (8001b14 <HAL_RCC_GetSysClockFreq+0x114>)
 8001aae:	617b      	str	r3, [r7, #20]
      break;
 8001ab0:	e002      	b.n	8001ab8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	617b      	str	r3, [r7, #20]
      break;
 8001ab6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ab8:	4b13      	ldr	r3, [pc, #76]	; (8001b08 <HAL_RCC_GetSysClockFreq+0x108>)
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	091b      	lsrs	r3, r3, #4
 8001abe:	f003 0307 	and.w	r3, r3, #7
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001ac6:	4b10      	ldr	r3, [pc, #64]	; (8001b08 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ac8:	68db      	ldr	r3, [r3, #12]
 8001aca:	0a1b      	lsrs	r3, r3, #8
 8001acc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ad0:	697a      	ldr	r2, [r7, #20]
 8001ad2:	fb03 f202 	mul.w	r2, r3, r2
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001adc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001ade:	4b0a      	ldr	r3, [pc, #40]	; (8001b08 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ae0:	68db      	ldr	r3, [r3, #12]
 8001ae2:	0e5b      	lsrs	r3, r3, #25
 8001ae4:	f003 0303 	and.w	r3, r3, #3
 8001ae8:	3301      	adds	r3, #1
 8001aea:	005b      	lsls	r3, r3, #1
 8001aec:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001aee:	697a      	ldr	r2, [r7, #20]
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001af6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001af8:	69bb      	ldr	r3, [r7, #24]
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3724      	adds	r7, #36	; 0x24
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	40021000 	.word	0x40021000
 8001b0c:	080058dc 	.word	0x080058dc
 8001b10:	00f42400 	.word	0x00f42400
 8001b14:	007a1200 	.word	0x007a1200

08001b18 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b1c:	4b03      	ldr	r3, [pc, #12]	; (8001b2c <HAL_RCC_GetHCLKFreq+0x14>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	20000000 	.word	0x20000000

08001b30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001b34:	f7ff fff0 	bl	8001b18 <HAL_RCC_GetHCLKFreq>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	4b06      	ldr	r3, [pc, #24]	; (8001b54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	0a1b      	lsrs	r3, r3, #8
 8001b40:	f003 0307 	and.w	r3, r3, #7
 8001b44:	4904      	ldr	r1, [pc, #16]	; (8001b58 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001b46:	5ccb      	ldrb	r3, [r1, r3]
 8001b48:	f003 031f 	and.w	r3, r3, #31
 8001b4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	40021000 	.word	0x40021000
 8001b58:	080058d4 	.word	0x080058d4

08001b5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001b60:	f7ff ffda 	bl	8001b18 <HAL_RCC_GetHCLKFreq>
 8001b64:	4602      	mov	r2, r0
 8001b66:	4b06      	ldr	r3, [pc, #24]	; (8001b80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	0adb      	lsrs	r3, r3, #11
 8001b6c:	f003 0307 	and.w	r3, r3, #7
 8001b70:	4904      	ldr	r1, [pc, #16]	; (8001b84 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001b72:	5ccb      	ldrb	r3, [r1, r3]
 8001b74:	f003 031f 	and.w	r3, r3, #31
 8001b78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	40021000 	.word	0x40021000
 8001b84:	080058d4 	.word	0x080058d4

08001b88 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b086      	sub	sp, #24
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001b90:	2300      	movs	r3, #0
 8001b92:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001b94:	4b2a      	ldr	r3, [pc, #168]	; (8001c40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d003      	beq.n	8001ba8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001ba0:	f7ff f9ee 	bl	8000f80 <HAL_PWREx_GetVoltageRange>
 8001ba4:	6178      	str	r0, [r7, #20]
 8001ba6:	e014      	b.n	8001bd2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ba8:	4b25      	ldr	r3, [pc, #148]	; (8001c40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001baa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bac:	4a24      	ldr	r2, [pc, #144]	; (8001c40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001bae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bb2:	6593      	str	r3, [r2, #88]	; 0x58
 8001bb4:	4b22      	ldr	r3, [pc, #136]	; (8001c40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001bb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bbc:	60fb      	str	r3, [r7, #12]
 8001bbe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001bc0:	f7ff f9de 	bl	8000f80 <HAL_PWREx_GetVoltageRange>
 8001bc4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001bc6:	4b1e      	ldr	r3, [pc, #120]	; (8001c40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001bc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bca:	4a1d      	ldr	r2, [pc, #116]	; (8001c40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001bcc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bd0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001bd8:	d10b      	bne.n	8001bf2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2b80      	cmp	r3, #128	; 0x80
 8001bde:	d919      	bls.n	8001c14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2ba0      	cmp	r3, #160	; 0xa0
 8001be4:	d902      	bls.n	8001bec <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001be6:	2302      	movs	r3, #2
 8001be8:	613b      	str	r3, [r7, #16]
 8001bea:	e013      	b.n	8001c14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001bec:	2301      	movs	r3, #1
 8001bee:	613b      	str	r3, [r7, #16]
 8001bf0:	e010      	b.n	8001c14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2b80      	cmp	r3, #128	; 0x80
 8001bf6:	d902      	bls.n	8001bfe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	613b      	str	r3, [r7, #16]
 8001bfc:	e00a      	b.n	8001c14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2b80      	cmp	r3, #128	; 0x80
 8001c02:	d102      	bne.n	8001c0a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001c04:	2302      	movs	r3, #2
 8001c06:	613b      	str	r3, [r7, #16]
 8001c08:	e004      	b.n	8001c14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2b70      	cmp	r3, #112	; 0x70
 8001c0e:	d101      	bne.n	8001c14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001c10:	2301      	movs	r3, #1
 8001c12:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001c14:	4b0b      	ldr	r3, [pc, #44]	; (8001c44 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f023 0207 	bic.w	r2, r3, #7
 8001c1c:	4909      	ldr	r1, [pc, #36]	; (8001c44 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	4313      	orrs	r3, r2
 8001c22:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001c24:	4b07      	ldr	r3, [pc, #28]	; (8001c44 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 0307 	and.w	r3, r3, #7
 8001c2c:	693a      	ldr	r2, [r7, #16]
 8001c2e:	429a      	cmp	r2, r3
 8001c30:	d001      	beq.n	8001c36 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e000      	b.n	8001c38 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001c36:	2300      	movs	r3, #0
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3718      	adds	r7, #24
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	40021000 	.word	0x40021000
 8001c44:	40022000 	.word	0x40022000

08001c48 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b086      	sub	sp, #24
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001c50:	2300      	movs	r3, #0
 8001c52:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001c54:	2300      	movs	r3, #0
 8001c56:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d041      	beq.n	8001ce8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001c68:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001c6c:	d02a      	beq.n	8001cc4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001c6e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001c72:	d824      	bhi.n	8001cbe <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001c74:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001c78:	d008      	beq.n	8001c8c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001c7a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001c7e:	d81e      	bhi.n	8001cbe <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d00a      	beq.n	8001c9a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001c84:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c88:	d010      	beq.n	8001cac <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001c8a:	e018      	b.n	8001cbe <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001c8c:	4b86      	ldr	r3, [pc, #536]	; (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	4a85      	ldr	r2, [pc, #532]	; (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001c92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c96:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001c98:	e015      	b.n	8001cc6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	3304      	adds	r3, #4
 8001c9e:	2100      	movs	r1, #0
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f000 fabb 	bl	800221c <RCCEx_PLLSAI1_Config>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001caa:	e00c      	b.n	8001cc6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	3320      	adds	r3, #32
 8001cb0:	2100      	movs	r1, #0
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f000 fba6 	bl	8002404 <RCCEx_PLLSAI2_Config>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001cbc:	e003      	b.n	8001cc6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	74fb      	strb	r3, [r7, #19]
      break;
 8001cc2:	e000      	b.n	8001cc6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001cc4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001cc6:	7cfb      	ldrb	r3, [r7, #19]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d10b      	bne.n	8001ce4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001ccc:	4b76      	ldr	r3, [pc, #472]	; (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cd2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001cda:	4973      	ldr	r1, [pc, #460]	; (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001ce2:	e001      	b.n	8001ce8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001ce4:	7cfb      	ldrb	r3, [r7, #19]
 8001ce6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d041      	beq.n	8001d78 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001cf8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001cfc:	d02a      	beq.n	8001d54 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001cfe:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001d02:	d824      	bhi.n	8001d4e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001d04:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001d08:	d008      	beq.n	8001d1c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001d0a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001d0e:	d81e      	bhi.n	8001d4e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d00a      	beq.n	8001d2a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001d14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d18:	d010      	beq.n	8001d3c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001d1a:	e018      	b.n	8001d4e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001d1c:	4b62      	ldr	r3, [pc, #392]	; (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	4a61      	ldr	r2, [pc, #388]	; (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d26:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001d28:	e015      	b.n	8001d56 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	3304      	adds	r3, #4
 8001d2e:	2100      	movs	r1, #0
 8001d30:	4618      	mov	r0, r3
 8001d32:	f000 fa73 	bl	800221c <RCCEx_PLLSAI1_Config>
 8001d36:	4603      	mov	r3, r0
 8001d38:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001d3a:	e00c      	b.n	8001d56 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	3320      	adds	r3, #32
 8001d40:	2100      	movs	r1, #0
 8001d42:	4618      	mov	r0, r3
 8001d44:	f000 fb5e 	bl	8002404 <RCCEx_PLLSAI2_Config>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001d4c:	e003      	b.n	8001d56 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	74fb      	strb	r3, [r7, #19]
      break;
 8001d52:	e000      	b.n	8001d56 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001d54:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001d56:	7cfb      	ldrb	r3, [r7, #19]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d10b      	bne.n	8001d74 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001d5c:	4b52      	ldr	r3, [pc, #328]	; (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d62:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001d6a:	494f      	ldr	r1, [pc, #316]	; (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001d72:	e001      	b.n	8001d78 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001d74:	7cfb      	ldrb	r3, [r7, #19]
 8001d76:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	f000 80a0 	beq.w	8001ec6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d86:	2300      	movs	r3, #0
 8001d88:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001d8a:	4b47      	ldr	r3, [pc, #284]	; (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d101      	bne.n	8001d9a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001d96:	2301      	movs	r3, #1
 8001d98:	e000      	b.n	8001d9c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d00d      	beq.n	8001dbc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001da0:	4b41      	ldr	r3, [pc, #260]	; (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001da2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001da4:	4a40      	ldr	r2, [pc, #256]	; (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001da6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001daa:	6593      	str	r3, [r2, #88]	; 0x58
 8001dac:	4b3e      	ldr	r3, [pc, #248]	; (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001dae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001db0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001db4:	60bb      	str	r3, [r7, #8]
 8001db6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001db8:	2301      	movs	r3, #1
 8001dba:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001dbc:	4b3b      	ldr	r3, [pc, #236]	; (8001eac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a3a      	ldr	r2, [pc, #232]	; (8001eac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001dc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dc6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001dc8:	f7fe fdf4 	bl	80009b4 <HAL_GetTick>
 8001dcc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001dce:	e009      	b.n	8001de4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dd0:	f7fe fdf0 	bl	80009b4 <HAL_GetTick>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d902      	bls.n	8001de4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8001dde:	2303      	movs	r3, #3
 8001de0:	74fb      	strb	r3, [r7, #19]
        break;
 8001de2:	e005      	b.n	8001df0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001de4:	4b31      	ldr	r3, [pc, #196]	; (8001eac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d0ef      	beq.n	8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8001df0:	7cfb      	ldrb	r3, [r7, #19]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d15c      	bne.n	8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001df6:	4b2c      	ldr	r3, [pc, #176]	; (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001df8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dfc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e00:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d01f      	beq.n	8001e48 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e0e:	697a      	ldr	r2, [r7, #20]
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d019      	beq.n	8001e48 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001e14:	4b24      	ldr	r3, [pc, #144]	; (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e1e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001e20:	4b21      	ldr	r3, [pc, #132]	; (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e26:	4a20      	ldr	r2, [pc, #128]	; (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001e30:	4b1d      	ldr	r3, [pc, #116]	; (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e36:	4a1c      	ldr	r2, [pc, #112]	; (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001e40:	4a19      	ldr	r2, [pc, #100]	; (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	f003 0301 	and.w	r3, r3, #1
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d016      	beq.n	8001e80 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e52:	f7fe fdaf 	bl	80009b4 <HAL_GetTick>
 8001e56:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e58:	e00b      	b.n	8001e72 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e5a:	f7fe fdab 	bl	80009b4 <HAL_GetTick>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	1ad3      	subs	r3, r2, r3
 8001e64:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d902      	bls.n	8001e72 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8001e6c:	2303      	movs	r3, #3
 8001e6e:	74fb      	strb	r3, [r7, #19]
            break;
 8001e70:	e006      	b.n	8001e80 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e72:	4b0d      	ldr	r3, [pc, #52]	; (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e78:	f003 0302 	and.w	r3, r3, #2
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d0ec      	beq.n	8001e5a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8001e80:	7cfb      	ldrb	r3, [r7, #19]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d10c      	bne.n	8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e86:	4b08      	ldr	r3, [pc, #32]	; (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e8c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e96:	4904      	ldr	r1, [pc, #16]	; (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001e9e:	e009      	b.n	8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001ea0:	7cfb      	ldrb	r3, [r7, #19]
 8001ea2:	74bb      	strb	r3, [r7, #18]
 8001ea4:	e006      	b.n	8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8001ea6:	bf00      	nop
 8001ea8:	40021000 	.word	0x40021000
 8001eac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001eb0:	7cfb      	ldrb	r3, [r7, #19]
 8001eb2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001eb4:	7c7b      	ldrb	r3, [r7, #17]
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d105      	bne.n	8001ec6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001eba:	4b9e      	ldr	r3, [pc, #632]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001ebc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ebe:	4a9d      	ldr	r2, [pc, #628]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001ec0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ec4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 0301 	and.w	r3, r3, #1
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d00a      	beq.n	8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001ed2:	4b98      	ldr	r3, [pc, #608]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001ed4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ed8:	f023 0203 	bic.w	r2, r3, #3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ee0:	4994      	ldr	r1, [pc, #592]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 0302 	and.w	r3, r3, #2
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d00a      	beq.n	8001f0a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001ef4:	4b8f      	ldr	r3, [pc, #572]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001efa:	f023 020c 	bic.w	r2, r3, #12
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f02:	498c      	ldr	r1, [pc, #560]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f04:	4313      	orrs	r3, r2
 8001f06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 0304 	and.w	r3, r3, #4
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d00a      	beq.n	8001f2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001f16:	4b87      	ldr	r3, [pc, #540]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f1c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f24:	4983      	ldr	r1, [pc, #524]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f26:	4313      	orrs	r3, r2
 8001f28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 0308 	and.w	r3, r3, #8
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d00a      	beq.n	8001f4e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001f38:	4b7e      	ldr	r3, [pc, #504]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f3e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f46:	497b      	ldr	r1, [pc, #492]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 0310 	and.w	r3, r3, #16
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d00a      	beq.n	8001f70 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001f5a:	4b76      	ldr	r3, [pc, #472]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f60:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f68:	4972      	ldr	r1, [pc, #456]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 0320 	and.w	r3, r3, #32
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d00a      	beq.n	8001f92 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001f7c:	4b6d      	ldr	r3, [pc, #436]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f82:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f8a:	496a      	ldr	r1, [pc, #424]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d00a      	beq.n	8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001f9e:	4b65      	ldr	r3, [pc, #404]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fa4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fac:	4961      	ldr	r1, [pc, #388]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d00a      	beq.n	8001fd6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001fc0:	4b5c      	ldr	r3, [pc, #368]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fc6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fce:	4959      	ldr	r1, [pc, #356]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d00a      	beq.n	8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001fe2:	4b54      	ldr	r3, [pc, #336]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fe4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fe8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ff0:	4950      	ldr	r1, [pc, #320]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002000:	2b00      	cmp	r3, #0
 8002002:	d00a      	beq.n	800201a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002004:	4b4b      	ldr	r3, [pc, #300]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002006:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800200a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002012:	4948      	ldr	r1, [pc, #288]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002014:	4313      	orrs	r3, r2
 8002016:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002022:	2b00      	cmp	r3, #0
 8002024:	d00a      	beq.n	800203c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002026:	4b43      	ldr	r3, [pc, #268]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002028:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800202c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002034:	493f      	ldr	r1, [pc, #252]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002036:	4313      	orrs	r3, r2
 8002038:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002044:	2b00      	cmp	r3, #0
 8002046:	d028      	beq.n	800209a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002048:	4b3a      	ldr	r3, [pc, #232]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800204a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800204e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002056:	4937      	ldr	r1, [pc, #220]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002058:	4313      	orrs	r3, r2
 800205a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002062:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002066:	d106      	bne.n	8002076 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002068:	4b32      	ldr	r3, [pc, #200]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	4a31      	ldr	r2, [pc, #196]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800206e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002072:	60d3      	str	r3, [r2, #12]
 8002074:	e011      	b.n	800209a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800207a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800207e:	d10c      	bne.n	800209a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	3304      	adds	r3, #4
 8002084:	2101      	movs	r1, #1
 8002086:	4618      	mov	r0, r3
 8002088:	f000 f8c8 	bl	800221c <RCCEx_PLLSAI1_Config>
 800208c:	4603      	mov	r3, r0
 800208e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002090:	7cfb      	ldrb	r3, [r7, #19]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d001      	beq.n	800209a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002096:	7cfb      	ldrb	r3, [r7, #19]
 8002098:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d028      	beq.n	80020f8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80020a6:	4b23      	ldr	r3, [pc, #140]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020ac:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020b4:	491f      	ldr	r1, [pc, #124]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020b6:	4313      	orrs	r3, r2
 80020b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80020c4:	d106      	bne.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80020c6:	4b1b      	ldr	r3, [pc, #108]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020c8:	68db      	ldr	r3, [r3, #12]
 80020ca:	4a1a      	ldr	r2, [pc, #104]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80020d0:	60d3      	str	r3, [r2, #12]
 80020d2:	e011      	b.n	80020f8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80020dc:	d10c      	bne.n	80020f8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	3304      	adds	r3, #4
 80020e2:	2101      	movs	r1, #1
 80020e4:	4618      	mov	r0, r3
 80020e6:	f000 f899 	bl	800221c <RCCEx_PLLSAI1_Config>
 80020ea:	4603      	mov	r3, r0
 80020ec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80020ee:	7cfb      	ldrb	r3, [r7, #19]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d001      	beq.n	80020f8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80020f4:	7cfb      	ldrb	r3, [r7, #19]
 80020f6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002100:	2b00      	cmp	r3, #0
 8002102:	d02b      	beq.n	800215c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002104:	4b0b      	ldr	r3, [pc, #44]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800210a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002112:	4908      	ldr	r1, [pc, #32]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002114:	4313      	orrs	r3, r2
 8002116:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800211e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002122:	d109      	bne.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002124:	4b03      	ldr	r3, [pc, #12]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	4a02      	ldr	r2, [pc, #8]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800212a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800212e:	60d3      	str	r3, [r2, #12]
 8002130:	e014      	b.n	800215c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002132:	bf00      	nop
 8002134:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800213c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002140:	d10c      	bne.n	800215c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	3304      	adds	r3, #4
 8002146:	2101      	movs	r1, #1
 8002148:	4618      	mov	r0, r3
 800214a:	f000 f867 	bl	800221c <RCCEx_PLLSAI1_Config>
 800214e:	4603      	mov	r3, r0
 8002150:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002152:	7cfb      	ldrb	r3, [r7, #19]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d001      	beq.n	800215c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002158:	7cfb      	ldrb	r3, [r7, #19]
 800215a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002164:	2b00      	cmp	r3, #0
 8002166:	d02f      	beq.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002168:	4b2b      	ldr	r3, [pc, #172]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800216a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800216e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002176:	4928      	ldr	r1, [pc, #160]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002178:	4313      	orrs	r3, r2
 800217a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002182:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002186:	d10d      	bne.n	80021a4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	3304      	adds	r3, #4
 800218c:	2102      	movs	r1, #2
 800218e:	4618      	mov	r0, r3
 8002190:	f000 f844 	bl	800221c <RCCEx_PLLSAI1_Config>
 8002194:	4603      	mov	r3, r0
 8002196:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002198:	7cfb      	ldrb	r3, [r7, #19]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d014      	beq.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800219e:	7cfb      	ldrb	r3, [r7, #19]
 80021a0:	74bb      	strb	r3, [r7, #18]
 80021a2:	e011      	b.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80021a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80021ac:	d10c      	bne.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	3320      	adds	r3, #32
 80021b2:	2102      	movs	r1, #2
 80021b4:	4618      	mov	r0, r3
 80021b6:	f000 f925 	bl	8002404 <RCCEx_PLLSAI2_Config>
 80021ba:	4603      	mov	r3, r0
 80021bc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80021be:	7cfb      	ldrb	r3, [r7, #19]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d001      	beq.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80021c4:	7cfb      	ldrb	r3, [r7, #19]
 80021c6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d00a      	beq.n	80021ea <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80021d4:	4b10      	ldr	r3, [pc, #64]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80021d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021da:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80021e2:	490d      	ldr	r1, [pc, #52]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80021e4:	4313      	orrs	r3, r2
 80021e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d00b      	beq.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80021f6:	4b08      	ldr	r3, [pc, #32]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80021f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021fc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002206:	4904      	ldr	r1, [pc, #16]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002208:	4313      	orrs	r3, r2
 800220a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800220e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002210:	4618      	mov	r0, r3
 8002212:	3718      	adds	r7, #24
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}
 8002218:	40021000 	.word	0x40021000

0800221c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b084      	sub	sp, #16
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002226:	2300      	movs	r3, #0
 8002228:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800222a:	4b75      	ldr	r3, [pc, #468]	; (8002400 <RCCEx_PLLSAI1_Config+0x1e4>)
 800222c:	68db      	ldr	r3, [r3, #12]
 800222e:	f003 0303 	and.w	r3, r3, #3
 8002232:	2b00      	cmp	r3, #0
 8002234:	d018      	beq.n	8002268 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002236:	4b72      	ldr	r3, [pc, #456]	; (8002400 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002238:	68db      	ldr	r3, [r3, #12]
 800223a:	f003 0203 	and.w	r2, r3, #3
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	429a      	cmp	r2, r3
 8002244:	d10d      	bne.n	8002262 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
       ||
 800224a:	2b00      	cmp	r3, #0
 800224c:	d009      	beq.n	8002262 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800224e:	4b6c      	ldr	r3, [pc, #432]	; (8002400 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002250:	68db      	ldr	r3, [r3, #12]
 8002252:	091b      	lsrs	r3, r3, #4
 8002254:	f003 0307 	and.w	r3, r3, #7
 8002258:	1c5a      	adds	r2, r3, #1
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	685b      	ldr	r3, [r3, #4]
       ||
 800225e:	429a      	cmp	r2, r3
 8002260:	d047      	beq.n	80022f2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	73fb      	strb	r3, [r7, #15]
 8002266:	e044      	b.n	80022f2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	2b03      	cmp	r3, #3
 800226e:	d018      	beq.n	80022a2 <RCCEx_PLLSAI1_Config+0x86>
 8002270:	2b03      	cmp	r3, #3
 8002272:	d825      	bhi.n	80022c0 <RCCEx_PLLSAI1_Config+0xa4>
 8002274:	2b01      	cmp	r3, #1
 8002276:	d002      	beq.n	800227e <RCCEx_PLLSAI1_Config+0x62>
 8002278:	2b02      	cmp	r3, #2
 800227a:	d009      	beq.n	8002290 <RCCEx_PLLSAI1_Config+0x74>
 800227c:	e020      	b.n	80022c0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800227e:	4b60      	ldr	r3, [pc, #384]	; (8002400 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0302 	and.w	r3, r3, #2
 8002286:	2b00      	cmp	r3, #0
 8002288:	d11d      	bne.n	80022c6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800228e:	e01a      	b.n	80022c6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002290:	4b5b      	ldr	r3, [pc, #364]	; (8002400 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002298:	2b00      	cmp	r3, #0
 800229a:	d116      	bne.n	80022ca <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022a0:	e013      	b.n	80022ca <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80022a2:	4b57      	ldr	r3, [pc, #348]	; (8002400 <RCCEx_PLLSAI1_Config+0x1e4>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d10f      	bne.n	80022ce <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80022ae:	4b54      	ldr	r3, [pc, #336]	; (8002400 <RCCEx_PLLSAI1_Config+0x1e4>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d109      	bne.n	80022ce <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80022be:	e006      	b.n	80022ce <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	73fb      	strb	r3, [r7, #15]
      break;
 80022c4:	e004      	b.n	80022d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80022c6:	bf00      	nop
 80022c8:	e002      	b.n	80022d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80022ca:	bf00      	nop
 80022cc:	e000      	b.n	80022d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80022ce:	bf00      	nop
    }

    if(status == HAL_OK)
 80022d0:	7bfb      	ldrb	r3, [r7, #15]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d10d      	bne.n	80022f2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80022d6:	4b4a      	ldr	r3, [pc, #296]	; (8002400 <RCCEx_PLLSAI1_Config+0x1e4>)
 80022d8:	68db      	ldr	r3, [r3, #12]
 80022da:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6819      	ldr	r1, [r3, #0]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	3b01      	subs	r3, #1
 80022e8:	011b      	lsls	r3, r3, #4
 80022ea:	430b      	orrs	r3, r1
 80022ec:	4944      	ldr	r1, [pc, #272]	; (8002400 <RCCEx_PLLSAI1_Config+0x1e4>)
 80022ee:	4313      	orrs	r3, r2
 80022f0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80022f2:	7bfb      	ldrb	r3, [r7, #15]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d17d      	bne.n	80023f4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80022f8:	4b41      	ldr	r3, [pc, #260]	; (8002400 <RCCEx_PLLSAI1_Config+0x1e4>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a40      	ldr	r2, [pc, #256]	; (8002400 <RCCEx_PLLSAI1_Config+0x1e4>)
 80022fe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002302:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002304:	f7fe fb56 	bl	80009b4 <HAL_GetTick>
 8002308:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800230a:	e009      	b.n	8002320 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800230c:	f7fe fb52 	bl	80009b4 <HAL_GetTick>
 8002310:	4602      	mov	r2, r0
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	2b02      	cmp	r3, #2
 8002318:	d902      	bls.n	8002320 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	73fb      	strb	r3, [r7, #15]
        break;
 800231e:	e005      	b.n	800232c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002320:	4b37      	ldr	r3, [pc, #220]	; (8002400 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002328:	2b00      	cmp	r3, #0
 800232a:	d1ef      	bne.n	800230c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800232c:	7bfb      	ldrb	r3, [r7, #15]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d160      	bne.n	80023f4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d111      	bne.n	800235c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002338:	4b31      	ldr	r3, [pc, #196]	; (8002400 <RCCEx_PLLSAI1_Config+0x1e4>)
 800233a:	691b      	ldr	r3, [r3, #16]
 800233c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002340:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002344:	687a      	ldr	r2, [r7, #4]
 8002346:	6892      	ldr	r2, [r2, #8]
 8002348:	0211      	lsls	r1, r2, #8
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	68d2      	ldr	r2, [r2, #12]
 800234e:	0912      	lsrs	r2, r2, #4
 8002350:	0452      	lsls	r2, r2, #17
 8002352:	430a      	orrs	r2, r1
 8002354:	492a      	ldr	r1, [pc, #168]	; (8002400 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002356:	4313      	orrs	r3, r2
 8002358:	610b      	str	r3, [r1, #16]
 800235a:	e027      	b.n	80023ac <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	2b01      	cmp	r3, #1
 8002360:	d112      	bne.n	8002388 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002362:	4b27      	ldr	r3, [pc, #156]	; (8002400 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002364:	691b      	ldr	r3, [r3, #16]
 8002366:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800236a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	6892      	ldr	r2, [r2, #8]
 8002372:	0211      	lsls	r1, r2, #8
 8002374:	687a      	ldr	r2, [r7, #4]
 8002376:	6912      	ldr	r2, [r2, #16]
 8002378:	0852      	lsrs	r2, r2, #1
 800237a:	3a01      	subs	r2, #1
 800237c:	0552      	lsls	r2, r2, #21
 800237e:	430a      	orrs	r2, r1
 8002380:	491f      	ldr	r1, [pc, #124]	; (8002400 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002382:	4313      	orrs	r3, r2
 8002384:	610b      	str	r3, [r1, #16]
 8002386:	e011      	b.n	80023ac <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002388:	4b1d      	ldr	r3, [pc, #116]	; (8002400 <RCCEx_PLLSAI1_Config+0x1e4>)
 800238a:	691b      	ldr	r3, [r3, #16]
 800238c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002390:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	6892      	ldr	r2, [r2, #8]
 8002398:	0211      	lsls	r1, r2, #8
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	6952      	ldr	r2, [r2, #20]
 800239e:	0852      	lsrs	r2, r2, #1
 80023a0:	3a01      	subs	r2, #1
 80023a2:	0652      	lsls	r2, r2, #25
 80023a4:	430a      	orrs	r2, r1
 80023a6:	4916      	ldr	r1, [pc, #88]	; (8002400 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023a8:	4313      	orrs	r3, r2
 80023aa:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80023ac:	4b14      	ldr	r3, [pc, #80]	; (8002400 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a13      	ldr	r2, [pc, #76]	; (8002400 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023b2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80023b6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023b8:	f7fe fafc 	bl	80009b4 <HAL_GetTick>
 80023bc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80023be:	e009      	b.n	80023d4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80023c0:	f7fe faf8 	bl	80009b4 <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d902      	bls.n	80023d4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80023ce:	2303      	movs	r3, #3
 80023d0:	73fb      	strb	r3, [r7, #15]
          break;
 80023d2:	e005      	b.n	80023e0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80023d4:	4b0a      	ldr	r3, [pc, #40]	; (8002400 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d0ef      	beq.n	80023c0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80023e0:	7bfb      	ldrb	r3, [r7, #15]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d106      	bne.n	80023f4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80023e6:	4b06      	ldr	r3, [pc, #24]	; (8002400 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023e8:	691a      	ldr	r2, [r3, #16]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	699b      	ldr	r3, [r3, #24]
 80023ee:	4904      	ldr	r1, [pc, #16]	; (8002400 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023f0:	4313      	orrs	r3, r2
 80023f2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80023f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3710      	adds	r7, #16
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	40021000 	.word	0x40021000

08002404 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b084      	sub	sp, #16
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
 800240c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800240e:	2300      	movs	r3, #0
 8002410:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002412:	4b6a      	ldr	r3, [pc, #424]	; (80025bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002414:	68db      	ldr	r3, [r3, #12]
 8002416:	f003 0303 	and.w	r3, r3, #3
 800241a:	2b00      	cmp	r3, #0
 800241c:	d018      	beq.n	8002450 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800241e:	4b67      	ldr	r3, [pc, #412]	; (80025bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002420:	68db      	ldr	r3, [r3, #12]
 8002422:	f003 0203 	and.w	r2, r3, #3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	429a      	cmp	r2, r3
 800242c:	d10d      	bne.n	800244a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
       ||
 8002432:	2b00      	cmp	r3, #0
 8002434:	d009      	beq.n	800244a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002436:	4b61      	ldr	r3, [pc, #388]	; (80025bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002438:	68db      	ldr	r3, [r3, #12]
 800243a:	091b      	lsrs	r3, r3, #4
 800243c:	f003 0307 	and.w	r3, r3, #7
 8002440:	1c5a      	adds	r2, r3, #1
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	685b      	ldr	r3, [r3, #4]
       ||
 8002446:	429a      	cmp	r2, r3
 8002448:	d047      	beq.n	80024da <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	73fb      	strb	r3, [r7, #15]
 800244e:	e044      	b.n	80024da <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	2b03      	cmp	r3, #3
 8002456:	d018      	beq.n	800248a <RCCEx_PLLSAI2_Config+0x86>
 8002458:	2b03      	cmp	r3, #3
 800245a:	d825      	bhi.n	80024a8 <RCCEx_PLLSAI2_Config+0xa4>
 800245c:	2b01      	cmp	r3, #1
 800245e:	d002      	beq.n	8002466 <RCCEx_PLLSAI2_Config+0x62>
 8002460:	2b02      	cmp	r3, #2
 8002462:	d009      	beq.n	8002478 <RCCEx_PLLSAI2_Config+0x74>
 8002464:	e020      	b.n	80024a8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002466:	4b55      	ldr	r3, [pc, #340]	; (80025bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0302 	and.w	r3, r3, #2
 800246e:	2b00      	cmp	r3, #0
 8002470:	d11d      	bne.n	80024ae <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002476:	e01a      	b.n	80024ae <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002478:	4b50      	ldr	r3, [pc, #320]	; (80025bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002480:	2b00      	cmp	r3, #0
 8002482:	d116      	bne.n	80024b2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002488:	e013      	b.n	80024b2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800248a:	4b4c      	ldr	r3, [pc, #304]	; (80025bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d10f      	bne.n	80024b6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002496:	4b49      	ldr	r3, [pc, #292]	; (80025bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d109      	bne.n	80024b6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80024a6:	e006      	b.n	80024b6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	73fb      	strb	r3, [r7, #15]
      break;
 80024ac:	e004      	b.n	80024b8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80024ae:	bf00      	nop
 80024b0:	e002      	b.n	80024b8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80024b2:	bf00      	nop
 80024b4:	e000      	b.n	80024b8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80024b6:	bf00      	nop
    }

    if(status == HAL_OK)
 80024b8:	7bfb      	ldrb	r3, [r7, #15]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d10d      	bne.n	80024da <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80024be:	4b3f      	ldr	r3, [pc, #252]	; (80025bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80024c0:	68db      	ldr	r3, [r3, #12]
 80024c2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6819      	ldr	r1, [r3, #0]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	3b01      	subs	r3, #1
 80024d0:	011b      	lsls	r3, r3, #4
 80024d2:	430b      	orrs	r3, r1
 80024d4:	4939      	ldr	r1, [pc, #228]	; (80025bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80024d6:	4313      	orrs	r3, r2
 80024d8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80024da:	7bfb      	ldrb	r3, [r7, #15]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d167      	bne.n	80025b0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80024e0:	4b36      	ldr	r3, [pc, #216]	; (80025bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a35      	ldr	r2, [pc, #212]	; (80025bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80024e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024ec:	f7fe fa62 	bl	80009b4 <HAL_GetTick>
 80024f0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80024f2:	e009      	b.n	8002508 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80024f4:	f7fe fa5e 	bl	80009b4 <HAL_GetTick>
 80024f8:	4602      	mov	r2, r0
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d902      	bls.n	8002508 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	73fb      	strb	r3, [r7, #15]
        break;
 8002506:	e005      	b.n	8002514 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002508:	4b2c      	ldr	r3, [pc, #176]	; (80025bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002510:	2b00      	cmp	r3, #0
 8002512:	d1ef      	bne.n	80024f4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002514:	7bfb      	ldrb	r3, [r7, #15]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d14a      	bne.n	80025b0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d111      	bne.n	8002544 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002520:	4b26      	ldr	r3, [pc, #152]	; (80025bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002522:	695b      	ldr	r3, [r3, #20]
 8002524:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002528:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800252c:	687a      	ldr	r2, [r7, #4]
 800252e:	6892      	ldr	r2, [r2, #8]
 8002530:	0211      	lsls	r1, r2, #8
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	68d2      	ldr	r2, [r2, #12]
 8002536:	0912      	lsrs	r2, r2, #4
 8002538:	0452      	lsls	r2, r2, #17
 800253a:	430a      	orrs	r2, r1
 800253c:	491f      	ldr	r1, [pc, #124]	; (80025bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800253e:	4313      	orrs	r3, r2
 8002540:	614b      	str	r3, [r1, #20]
 8002542:	e011      	b.n	8002568 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002544:	4b1d      	ldr	r3, [pc, #116]	; (80025bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002546:	695b      	ldr	r3, [r3, #20]
 8002548:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800254c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	6892      	ldr	r2, [r2, #8]
 8002554:	0211      	lsls	r1, r2, #8
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	6912      	ldr	r2, [r2, #16]
 800255a:	0852      	lsrs	r2, r2, #1
 800255c:	3a01      	subs	r2, #1
 800255e:	0652      	lsls	r2, r2, #25
 8002560:	430a      	orrs	r2, r1
 8002562:	4916      	ldr	r1, [pc, #88]	; (80025bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002564:	4313      	orrs	r3, r2
 8002566:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002568:	4b14      	ldr	r3, [pc, #80]	; (80025bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a13      	ldr	r2, [pc, #76]	; (80025bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800256e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002572:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002574:	f7fe fa1e 	bl	80009b4 <HAL_GetTick>
 8002578:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800257a:	e009      	b.n	8002590 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800257c:	f7fe fa1a 	bl	80009b4 <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	2b02      	cmp	r3, #2
 8002588:	d902      	bls.n	8002590 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800258a:	2303      	movs	r3, #3
 800258c:	73fb      	strb	r3, [r7, #15]
          break;
 800258e:	e005      	b.n	800259c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002590:	4b0a      	ldr	r3, [pc, #40]	; (80025bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002598:	2b00      	cmp	r3, #0
 800259a:	d0ef      	beq.n	800257c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800259c:	7bfb      	ldrb	r3, [r7, #15]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d106      	bne.n	80025b0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80025a2:	4b06      	ldr	r3, [pc, #24]	; (80025bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80025a4:	695a      	ldr	r2, [r3, #20]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	695b      	ldr	r3, [r3, #20]
 80025aa:	4904      	ldr	r1, [pc, #16]	; (80025bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80025ac:	4313      	orrs	r3, r2
 80025ae:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80025b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3710      	adds	r7, #16
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	40021000 	.word	0x40021000

080025c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d101      	bne.n	80025d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e040      	b.n	8002654 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d106      	bne.n	80025e8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2200      	movs	r2, #0
 80025de:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f7fe f8dc 	bl	80007a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2224      	movs	r2, #36	; 0x24
 80025ec:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f022 0201 	bic.w	r2, r2, #1
 80025fc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002602:	2b00      	cmp	r3, #0
 8002604:	d002      	beq.n	800260c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f000 fae0 	bl	8002bcc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	f000 f825 	bl	800265c <UART_SetConfig>
 8002612:	4603      	mov	r3, r0
 8002614:	2b01      	cmp	r3, #1
 8002616:	d101      	bne.n	800261c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e01b      	b.n	8002654 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	685a      	ldr	r2, [r3, #4]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800262a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	689a      	ldr	r2, [r3, #8]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800263a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f042 0201 	orr.w	r2, r2, #1
 800264a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	f000 fb5f 	bl	8002d10 <UART_CheckIdleState>
 8002652:	4603      	mov	r3, r0
}
 8002654:	4618      	mov	r0, r3
 8002656:	3708      	adds	r7, #8
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}

0800265c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800265c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002660:	b08a      	sub	sp, #40	; 0x28
 8002662:	af00      	add	r7, sp, #0
 8002664:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002666:	2300      	movs	r3, #0
 8002668:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	689a      	ldr	r2, [r3, #8]
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	691b      	ldr	r3, [r3, #16]
 8002674:	431a      	orrs	r2, r3
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	695b      	ldr	r3, [r3, #20]
 800267a:	431a      	orrs	r2, r3
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	69db      	ldr	r3, [r3, #28]
 8002680:	4313      	orrs	r3, r2
 8002682:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	4ba4      	ldr	r3, [pc, #656]	; (800291c <UART_SetConfig+0x2c0>)
 800268c:	4013      	ands	r3, r2
 800268e:	68fa      	ldr	r2, [r7, #12]
 8002690:	6812      	ldr	r2, [r2, #0]
 8002692:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002694:	430b      	orrs	r3, r1
 8002696:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	68da      	ldr	r2, [r3, #12]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	430a      	orrs	r2, r1
 80026ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	699b      	ldr	r3, [r3, #24]
 80026b2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a99      	ldr	r2, [pc, #612]	; (8002920 <UART_SetConfig+0x2c4>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d004      	beq.n	80026c8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	6a1b      	ldr	r3, [r3, #32]
 80026c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026c4:	4313      	orrs	r3, r2
 80026c6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026d8:	430a      	orrs	r2, r1
 80026da:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a90      	ldr	r2, [pc, #576]	; (8002924 <UART_SetConfig+0x2c8>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d126      	bne.n	8002734 <UART_SetConfig+0xd8>
 80026e6:	4b90      	ldr	r3, [pc, #576]	; (8002928 <UART_SetConfig+0x2cc>)
 80026e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ec:	f003 0303 	and.w	r3, r3, #3
 80026f0:	2b03      	cmp	r3, #3
 80026f2:	d81b      	bhi.n	800272c <UART_SetConfig+0xd0>
 80026f4:	a201      	add	r2, pc, #4	; (adr r2, 80026fc <UART_SetConfig+0xa0>)
 80026f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026fa:	bf00      	nop
 80026fc:	0800270d 	.word	0x0800270d
 8002700:	0800271d 	.word	0x0800271d
 8002704:	08002715 	.word	0x08002715
 8002708:	08002725 	.word	0x08002725
 800270c:	2301      	movs	r3, #1
 800270e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002712:	e116      	b.n	8002942 <UART_SetConfig+0x2e6>
 8002714:	2302      	movs	r3, #2
 8002716:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800271a:	e112      	b.n	8002942 <UART_SetConfig+0x2e6>
 800271c:	2304      	movs	r3, #4
 800271e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002722:	e10e      	b.n	8002942 <UART_SetConfig+0x2e6>
 8002724:	2308      	movs	r3, #8
 8002726:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800272a:	e10a      	b.n	8002942 <UART_SetConfig+0x2e6>
 800272c:	2310      	movs	r3, #16
 800272e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002732:	e106      	b.n	8002942 <UART_SetConfig+0x2e6>
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a7c      	ldr	r2, [pc, #496]	; (800292c <UART_SetConfig+0x2d0>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d138      	bne.n	80027b0 <UART_SetConfig+0x154>
 800273e:	4b7a      	ldr	r3, [pc, #488]	; (8002928 <UART_SetConfig+0x2cc>)
 8002740:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002744:	f003 030c 	and.w	r3, r3, #12
 8002748:	2b0c      	cmp	r3, #12
 800274a:	d82d      	bhi.n	80027a8 <UART_SetConfig+0x14c>
 800274c:	a201      	add	r2, pc, #4	; (adr r2, 8002754 <UART_SetConfig+0xf8>)
 800274e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002752:	bf00      	nop
 8002754:	08002789 	.word	0x08002789
 8002758:	080027a9 	.word	0x080027a9
 800275c:	080027a9 	.word	0x080027a9
 8002760:	080027a9 	.word	0x080027a9
 8002764:	08002799 	.word	0x08002799
 8002768:	080027a9 	.word	0x080027a9
 800276c:	080027a9 	.word	0x080027a9
 8002770:	080027a9 	.word	0x080027a9
 8002774:	08002791 	.word	0x08002791
 8002778:	080027a9 	.word	0x080027a9
 800277c:	080027a9 	.word	0x080027a9
 8002780:	080027a9 	.word	0x080027a9
 8002784:	080027a1 	.word	0x080027a1
 8002788:	2300      	movs	r3, #0
 800278a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800278e:	e0d8      	b.n	8002942 <UART_SetConfig+0x2e6>
 8002790:	2302      	movs	r3, #2
 8002792:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002796:	e0d4      	b.n	8002942 <UART_SetConfig+0x2e6>
 8002798:	2304      	movs	r3, #4
 800279a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800279e:	e0d0      	b.n	8002942 <UART_SetConfig+0x2e6>
 80027a0:	2308      	movs	r3, #8
 80027a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80027a6:	e0cc      	b.n	8002942 <UART_SetConfig+0x2e6>
 80027a8:	2310      	movs	r3, #16
 80027aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80027ae:	e0c8      	b.n	8002942 <UART_SetConfig+0x2e6>
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a5e      	ldr	r2, [pc, #376]	; (8002930 <UART_SetConfig+0x2d4>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d125      	bne.n	8002806 <UART_SetConfig+0x1aa>
 80027ba:	4b5b      	ldr	r3, [pc, #364]	; (8002928 <UART_SetConfig+0x2cc>)
 80027bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027c0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80027c4:	2b30      	cmp	r3, #48	; 0x30
 80027c6:	d016      	beq.n	80027f6 <UART_SetConfig+0x19a>
 80027c8:	2b30      	cmp	r3, #48	; 0x30
 80027ca:	d818      	bhi.n	80027fe <UART_SetConfig+0x1a2>
 80027cc:	2b20      	cmp	r3, #32
 80027ce:	d00a      	beq.n	80027e6 <UART_SetConfig+0x18a>
 80027d0:	2b20      	cmp	r3, #32
 80027d2:	d814      	bhi.n	80027fe <UART_SetConfig+0x1a2>
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d002      	beq.n	80027de <UART_SetConfig+0x182>
 80027d8:	2b10      	cmp	r3, #16
 80027da:	d008      	beq.n	80027ee <UART_SetConfig+0x192>
 80027dc:	e00f      	b.n	80027fe <UART_SetConfig+0x1a2>
 80027de:	2300      	movs	r3, #0
 80027e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80027e4:	e0ad      	b.n	8002942 <UART_SetConfig+0x2e6>
 80027e6:	2302      	movs	r3, #2
 80027e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80027ec:	e0a9      	b.n	8002942 <UART_SetConfig+0x2e6>
 80027ee:	2304      	movs	r3, #4
 80027f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80027f4:	e0a5      	b.n	8002942 <UART_SetConfig+0x2e6>
 80027f6:	2308      	movs	r3, #8
 80027f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80027fc:	e0a1      	b.n	8002942 <UART_SetConfig+0x2e6>
 80027fe:	2310      	movs	r3, #16
 8002800:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002804:	e09d      	b.n	8002942 <UART_SetConfig+0x2e6>
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a4a      	ldr	r2, [pc, #296]	; (8002934 <UART_SetConfig+0x2d8>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d125      	bne.n	800285c <UART_SetConfig+0x200>
 8002810:	4b45      	ldr	r3, [pc, #276]	; (8002928 <UART_SetConfig+0x2cc>)
 8002812:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002816:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800281a:	2bc0      	cmp	r3, #192	; 0xc0
 800281c:	d016      	beq.n	800284c <UART_SetConfig+0x1f0>
 800281e:	2bc0      	cmp	r3, #192	; 0xc0
 8002820:	d818      	bhi.n	8002854 <UART_SetConfig+0x1f8>
 8002822:	2b80      	cmp	r3, #128	; 0x80
 8002824:	d00a      	beq.n	800283c <UART_SetConfig+0x1e0>
 8002826:	2b80      	cmp	r3, #128	; 0x80
 8002828:	d814      	bhi.n	8002854 <UART_SetConfig+0x1f8>
 800282a:	2b00      	cmp	r3, #0
 800282c:	d002      	beq.n	8002834 <UART_SetConfig+0x1d8>
 800282e:	2b40      	cmp	r3, #64	; 0x40
 8002830:	d008      	beq.n	8002844 <UART_SetConfig+0x1e8>
 8002832:	e00f      	b.n	8002854 <UART_SetConfig+0x1f8>
 8002834:	2300      	movs	r3, #0
 8002836:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800283a:	e082      	b.n	8002942 <UART_SetConfig+0x2e6>
 800283c:	2302      	movs	r3, #2
 800283e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002842:	e07e      	b.n	8002942 <UART_SetConfig+0x2e6>
 8002844:	2304      	movs	r3, #4
 8002846:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800284a:	e07a      	b.n	8002942 <UART_SetConfig+0x2e6>
 800284c:	2308      	movs	r3, #8
 800284e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002852:	e076      	b.n	8002942 <UART_SetConfig+0x2e6>
 8002854:	2310      	movs	r3, #16
 8002856:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800285a:	e072      	b.n	8002942 <UART_SetConfig+0x2e6>
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a35      	ldr	r2, [pc, #212]	; (8002938 <UART_SetConfig+0x2dc>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d12a      	bne.n	80028bc <UART_SetConfig+0x260>
 8002866:	4b30      	ldr	r3, [pc, #192]	; (8002928 <UART_SetConfig+0x2cc>)
 8002868:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800286c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002870:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002874:	d01a      	beq.n	80028ac <UART_SetConfig+0x250>
 8002876:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800287a:	d81b      	bhi.n	80028b4 <UART_SetConfig+0x258>
 800287c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002880:	d00c      	beq.n	800289c <UART_SetConfig+0x240>
 8002882:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002886:	d815      	bhi.n	80028b4 <UART_SetConfig+0x258>
 8002888:	2b00      	cmp	r3, #0
 800288a:	d003      	beq.n	8002894 <UART_SetConfig+0x238>
 800288c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002890:	d008      	beq.n	80028a4 <UART_SetConfig+0x248>
 8002892:	e00f      	b.n	80028b4 <UART_SetConfig+0x258>
 8002894:	2300      	movs	r3, #0
 8002896:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800289a:	e052      	b.n	8002942 <UART_SetConfig+0x2e6>
 800289c:	2302      	movs	r3, #2
 800289e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80028a2:	e04e      	b.n	8002942 <UART_SetConfig+0x2e6>
 80028a4:	2304      	movs	r3, #4
 80028a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80028aa:	e04a      	b.n	8002942 <UART_SetConfig+0x2e6>
 80028ac:	2308      	movs	r3, #8
 80028ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80028b2:	e046      	b.n	8002942 <UART_SetConfig+0x2e6>
 80028b4:	2310      	movs	r3, #16
 80028b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80028ba:	e042      	b.n	8002942 <UART_SetConfig+0x2e6>
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a17      	ldr	r2, [pc, #92]	; (8002920 <UART_SetConfig+0x2c4>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d13a      	bne.n	800293c <UART_SetConfig+0x2e0>
 80028c6:	4b18      	ldr	r3, [pc, #96]	; (8002928 <UART_SetConfig+0x2cc>)
 80028c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028cc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80028d0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80028d4:	d01a      	beq.n	800290c <UART_SetConfig+0x2b0>
 80028d6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80028da:	d81b      	bhi.n	8002914 <UART_SetConfig+0x2b8>
 80028dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028e0:	d00c      	beq.n	80028fc <UART_SetConfig+0x2a0>
 80028e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028e6:	d815      	bhi.n	8002914 <UART_SetConfig+0x2b8>
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d003      	beq.n	80028f4 <UART_SetConfig+0x298>
 80028ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028f0:	d008      	beq.n	8002904 <UART_SetConfig+0x2a8>
 80028f2:	e00f      	b.n	8002914 <UART_SetConfig+0x2b8>
 80028f4:	2300      	movs	r3, #0
 80028f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80028fa:	e022      	b.n	8002942 <UART_SetConfig+0x2e6>
 80028fc:	2302      	movs	r3, #2
 80028fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002902:	e01e      	b.n	8002942 <UART_SetConfig+0x2e6>
 8002904:	2304      	movs	r3, #4
 8002906:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800290a:	e01a      	b.n	8002942 <UART_SetConfig+0x2e6>
 800290c:	2308      	movs	r3, #8
 800290e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002912:	e016      	b.n	8002942 <UART_SetConfig+0x2e6>
 8002914:	2310      	movs	r3, #16
 8002916:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800291a:	e012      	b.n	8002942 <UART_SetConfig+0x2e6>
 800291c:	efff69f3 	.word	0xefff69f3
 8002920:	40008000 	.word	0x40008000
 8002924:	40013800 	.word	0x40013800
 8002928:	40021000 	.word	0x40021000
 800292c:	40004400 	.word	0x40004400
 8002930:	40004800 	.word	0x40004800
 8002934:	40004c00 	.word	0x40004c00
 8002938:	40005000 	.word	0x40005000
 800293c:	2310      	movs	r3, #16
 800293e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a9f      	ldr	r2, [pc, #636]	; (8002bc4 <UART_SetConfig+0x568>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d17a      	bne.n	8002a42 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800294c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002950:	2b08      	cmp	r3, #8
 8002952:	d824      	bhi.n	800299e <UART_SetConfig+0x342>
 8002954:	a201      	add	r2, pc, #4	; (adr r2, 800295c <UART_SetConfig+0x300>)
 8002956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800295a:	bf00      	nop
 800295c:	08002981 	.word	0x08002981
 8002960:	0800299f 	.word	0x0800299f
 8002964:	08002989 	.word	0x08002989
 8002968:	0800299f 	.word	0x0800299f
 800296c:	0800298f 	.word	0x0800298f
 8002970:	0800299f 	.word	0x0800299f
 8002974:	0800299f 	.word	0x0800299f
 8002978:	0800299f 	.word	0x0800299f
 800297c:	08002997 	.word	0x08002997
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002980:	f7ff f8d6 	bl	8001b30 <HAL_RCC_GetPCLK1Freq>
 8002984:	61f8      	str	r0, [r7, #28]
        break;
 8002986:	e010      	b.n	80029aa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002988:	4b8f      	ldr	r3, [pc, #572]	; (8002bc8 <UART_SetConfig+0x56c>)
 800298a:	61fb      	str	r3, [r7, #28]
        break;
 800298c:	e00d      	b.n	80029aa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800298e:	f7ff f837 	bl	8001a00 <HAL_RCC_GetSysClockFreq>
 8002992:	61f8      	str	r0, [r7, #28]
        break;
 8002994:	e009      	b.n	80029aa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002996:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800299a:	61fb      	str	r3, [r7, #28]
        break;
 800299c:	e005      	b.n	80029aa <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800299e:	2300      	movs	r3, #0
 80029a0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80029a8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	f000 80fb 	beq.w	8002ba8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	685a      	ldr	r2, [r3, #4]
 80029b6:	4613      	mov	r3, r2
 80029b8:	005b      	lsls	r3, r3, #1
 80029ba:	4413      	add	r3, r2
 80029bc:	69fa      	ldr	r2, [r7, #28]
 80029be:	429a      	cmp	r2, r3
 80029c0:	d305      	bcc.n	80029ce <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80029c8:	69fa      	ldr	r2, [r7, #28]
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d903      	bls.n	80029d6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80029d4:	e0e8      	b.n	8002ba8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	2200      	movs	r2, #0
 80029da:	461c      	mov	r4, r3
 80029dc:	4615      	mov	r5, r2
 80029de:	f04f 0200 	mov.w	r2, #0
 80029e2:	f04f 0300 	mov.w	r3, #0
 80029e6:	022b      	lsls	r3, r5, #8
 80029e8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80029ec:	0222      	lsls	r2, r4, #8
 80029ee:	68f9      	ldr	r1, [r7, #12]
 80029f0:	6849      	ldr	r1, [r1, #4]
 80029f2:	0849      	lsrs	r1, r1, #1
 80029f4:	2000      	movs	r0, #0
 80029f6:	4688      	mov	r8, r1
 80029f8:	4681      	mov	r9, r0
 80029fa:	eb12 0a08 	adds.w	sl, r2, r8
 80029fe:	eb43 0b09 	adc.w	fp, r3, r9
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	2200      	movs	r2, #0
 8002a08:	603b      	str	r3, [r7, #0]
 8002a0a:	607a      	str	r2, [r7, #4]
 8002a0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002a10:	4650      	mov	r0, sl
 8002a12:	4659      	mov	r1, fp
 8002a14:	f7fd fbdc 	bl	80001d0 <__aeabi_uldivmod>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	460b      	mov	r3, r1
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002a20:	69bb      	ldr	r3, [r7, #24]
 8002a22:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a26:	d308      	bcc.n	8002a3a <UART_SetConfig+0x3de>
 8002a28:	69bb      	ldr	r3, [r7, #24]
 8002a2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a2e:	d204      	bcs.n	8002a3a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	69ba      	ldr	r2, [r7, #24]
 8002a36:	60da      	str	r2, [r3, #12]
 8002a38:	e0b6      	b.n	8002ba8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002a40:	e0b2      	b.n	8002ba8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	69db      	ldr	r3, [r3, #28]
 8002a46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a4a:	d15e      	bne.n	8002b0a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8002a4c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002a50:	2b08      	cmp	r3, #8
 8002a52:	d828      	bhi.n	8002aa6 <UART_SetConfig+0x44a>
 8002a54:	a201      	add	r2, pc, #4	; (adr r2, 8002a5c <UART_SetConfig+0x400>)
 8002a56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a5a:	bf00      	nop
 8002a5c:	08002a81 	.word	0x08002a81
 8002a60:	08002a89 	.word	0x08002a89
 8002a64:	08002a91 	.word	0x08002a91
 8002a68:	08002aa7 	.word	0x08002aa7
 8002a6c:	08002a97 	.word	0x08002a97
 8002a70:	08002aa7 	.word	0x08002aa7
 8002a74:	08002aa7 	.word	0x08002aa7
 8002a78:	08002aa7 	.word	0x08002aa7
 8002a7c:	08002a9f 	.word	0x08002a9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a80:	f7ff f856 	bl	8001b30 <HAL_RCC_GetPCLK1Freq>
 8002a84:	61f8      	str	r0, [r7, #28]
        break;
 8002a86:	e014      	b.n	8002ab2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002a88:	f7ff f868 	bl	8001b5c <HAL_RCC_GetPCLK2Freq>
 8002a8c:	61f8      	str	r0, [r7, #28]
        break;
 8002a8e:	e010      	b.n	8002ab2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002a90:	4b4d      	ldr	r3, [pc, #308]	; (8002bc8 <UART_SetConfig+0x56c>)
 8002a92:	61fb      	str	r3, [r7, #28]
        break;
 8002a94:	e00d      	b.n	8002ab2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a96:	f7fe ffb3 	bl	8001a00 <HAL_RCC_GetSysClockFreq>
 8002a9a:	61f8      	str	r0, [r7, #28]
        break;
 8002a9c:	e009      	b.n	8002ab2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002aa2:	61fb      	str	r3, [r7, #28]
        break;
 8002aa4:	e005      	b.n	8002ab2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002ab0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d077      	beq.n	8002ba8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	005a      	lsls	r2, r3, #1
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	085b      	lsrs	r3, r3, #1
 8002ac2:	441a      	add	r2, r3
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002acc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ace:	69bb      	ldr	r3, [r7, #24]
 8002ad0:	2b0f      	cmp	r3, #15
 8002ad2:	d916      	bls.n	8002b02 <UART_SetConfig+0x4a6>
 8002ad4:	69bb      	ldr	r3, [r7, #24]
 8002ad6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ada:	d212      	bcs.n	8002b02 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002adc:	69bb      	ldr	r3, [r7, #24]
 8002ade:	b29b      	uxth	r3, r3
 8002ae0:	f023 030f 	bic.w	r3, r3, #15
 8002ae4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002ae6:	69bb      	ldr	r3, [r7, #24]
 8002ae8:	085b      	lsrs	r3, r3, #1
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	f003 0307 	and.w	r3, r3, #7
 8002af0:	b29a      	uxth	r2, r3
 8002af2:	8afb      	ldrh	r3, [r7, #22]
 8002af4:	4313      	orrs	r3, r2
 8002af6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	8afa      	ldrh	r2, [r7, #22]
 8002afe:	60da      	str	r2, [r3, #12]
 8002b00:	e052      	b.n	8002ba8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002b08:	e04e      	b.n	8002ba8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002b0a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002b0e:	2b08      	cmp	r3, #8
 8002b10:	d827      	bhi.n	8002b62 <UART_SetConfig+0x506>
 8002b12:	a201      	add	r2, pc, #4	; (adr r2, 8002b18 <UART_SetConfig+0x4bc>)
 8002b14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b18:	08002b3d 	.word	0x08002b3d
 8002b1c:	08002b45 	.word	0x08002b45
 8002b20:	08002b4d 	.word	0x08002b4d
 8002b24:	08002b63 	.word	0x08002b63
 8002b28:	08002b53 	.word	0x08002b53
 8002b2c:	08002b63 	.word	0x08002b63
 8002b30:	08002b63 	.word	0x08002b63
 8002b34:	08002b63 	.word	0x08002b63
 8002b38:	08002b5b 	.word	0x08002b5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b3c:	f7fe fff8 	bl	8001b30 <HAL_RCC_GetPCLK1Freq>
 8002b40:	61f8      	str	r0, [r7, #28]
        break;
 8002b42:	e014      	b.n	8002b6e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002b44:	f7ff f80a 	bl	8001b5c <HAL_RCC_GetPCLK2Freq>
 8002b48:	61f8      	str	r0, [r7, #28]
        break;
 8002b4a:	e010      	b.n	8002b6e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002b4c:	4b1e      	ldr	r3, [pc, #120]	; (8002bc8 <UART_SetConfig+0x56c>)
 8002b4e:	61fb      	str	r3, [r7, #28]
        break;
 8002b50:	e00d      	b.n	8002b6e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b52:	f7fe ff55 	bl	8001a00 <HAL_RCC_GetSysClockFreq>
 8002b56:	61f8      	str	r0, [r7, #28]
        break;
 8002b58:	e009      	b.n	8002b6e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b5e:	61fb      	str	r3, [r7, #28]
        break;
 8002b60:	e005      	b.n	8002b6e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8002b62:	2300      	movs	r3, #0
 8002b64:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002b6c:	bf00      	nop
    }

    if (pclk != 0U)
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d019      	beq.n	8002ba8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	085a      	lsrs	r2, r3, #1
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	441a      	add	r2, r3
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b86:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002b88:	69bb      	ldr	r3, [r7, #24]
 8002b8a:	2b0f      	cmp	r3, #15
 8002b8c:	d909      	bls.n	8002ba2 <UART_SetConfig+0x546>
 8002b8e:	69bb      	ldr	r3, [r7, #24]
 8002b90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b94:	d205      	bcs.n	8002ba2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002b96:	69bb      	ldr	r3, [r7, #24]
 8002b98:	b29a      	uxth	r2, r3
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	60da      	str	r2, [r3, #12]
 8002ba0:	e002      	b.n	8002ba8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2200      	movs	r2, #0
 8002bac:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002bb4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3728      	adds	r7, #40	; 0x28
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002bc2:	bf00      	nop
 8002bc4:	40008000 	.word	0x40008000
 8002bc8:	00f42400 	.word	0x00f42400

08002bcc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b083      	sub	sp, #12
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd8:	f003 0308 	and.w	r3, r3, #8
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d00a      	beq.n	8002bf6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	430a      	orrs	r2, r1
 8002bf4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfa:	f003 0301 	and.w	r3, r3, #1
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d00a      	beq.n	8002c18 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	430a      	orrs	r2, r1
 8002c16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1c:	f003 0302 	and.w	r3, r3, #2
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d00a      	beq.n	8002c3a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	430a      	orrs	r2, r1
 8002c38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c3e:	f003 0304 	and.w	r3, r3, #4
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d00a      	beq.n	8002c5c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	430a      	orrs	r2, r1
 8002c5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c60:	f003 0310 	and.w	r3, r3, #16
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d00a      	beq.n	8002c7e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	430a      	orrs	r2, r1
 8002c7c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c82:	f003 0320 	and.w	r3, r3, #32
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d00a      	beq.n	8002ca0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	430a      	orrs	r2, r1
 8002c9e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d01a      	beq.n	8002ce2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	430a      	orrs	r2, r1
 8002cc0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002cca:	d10a      	bne.n	8002ce2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	430a      	orrs	r2, r1
 8002ce0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d00a      	beq.n	8002d04 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	430a      	orrs	r2, r1
 8002d02:	605a      	str	r2, [r3, #4]
  }
}
 8002d04:	bf00      	nop
 8002d06:	370c      	adds	r7, #12
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr

08002d10 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b098      	sub	sp, #96	; 0x60
 8002d14:	af02      	add	r7, sp, #8
 8002d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002d20:	f7fd fe48 	bl	80009b4 <HAL_GetTick>
 8002d24:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 0308 	and.w	r3, r3, #8
 8002d30:	2b08      	cmp	r3, #8
 8002d32:	d12e      	bne.n	8002d92 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d34:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002d38:	9300      	str	r3, [sp, #0]
 8002d3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f000 f88c 	bl	8002e60 <UART_WaitOnFlagUntilTimeout>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d021      	beq.n	8002d92 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d56:	e853 3f00 	ldrex	r3, [r3]
 8002d5a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002d5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d62:	653b      	str	r3, [r7, #80]	; 0x50
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	461a      	mov	r2, r3
 8002d6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d6c:	647b      	str	r3, [r7, #68]	; 0x44
 8002d6e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d70:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002d72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002d74:	e841 2300 	strex	r3, r2, [r1]
 8002d78:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002d7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d1e6      	bne.n	8002d4e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2220      	movs	r2, #32
 8002d84:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	e062      	b.n	8002e58 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 0304 	and.w	r3, r3, #4
 8002d9c:	2b04      	cmp	r3, #4
 8002d9e:	d149      	bne.n	8002e34 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002da0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002da4:	9300      	str	r3, [sp, #0]
 8002da6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002da8:	2200      	movs	r2, #0
 8002daa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f000 f856 	bl	8002e60 <UART_WaitOnFlagUntilTimeout>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d03c      	beq.n	8002e34 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc2:	e853 3f00 	ldrex	r3, [r3]
 8002dc6:	623b      	str	r3, [r7, #32]
   return(result);
 8002dc8:	6a3b      	ldr	r3, [r7, #32]
 8002dca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002dce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dd8:	633b      	str	r3, [r7, #48]	; 0x30
 8002dda:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ddc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002dde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002de0:	e841 2300 	strex	r3, r2, [r1]
 8002de4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d1e6      	bne.n	8002dba <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	3308      	adds	r3, #8
 8002df2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	e853 3f00 	ldrex	r3, [r3]
 8002dfa:	60fb      	str	r3, [r7, #12]
   return(result);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f023 0301 	bic.w	r3, r3, #1
 8002e02:	64bb      	str	r3, [r7, #72]	; 0x48
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	3308      	adds	r3, #8
 8002e0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002e0c:	61fa      	str	r2, [r7, #28]
 8002e0e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e10:	69b9      	ldr	r1, [r7, #24]
 8002e12:	69fa      	ldr	r2, [r7, #28]
 8002e14:	e841 2300 	strex	r3, r2, [r1]
 8002e18:	617b      	str	r3, [r7, #20]
   return(result);
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d1e5      	bne.n	8002dec <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2220      	movs	r2, #32
 8002e24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002e30:	2303      	movs	r3, #3
 8002e32:	e011      	b.n	8002e58 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2220      	movs	r2, #32
 8002e38:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2220      	movs	r2, #32
 8002e3e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2200      	movs	r2, #0
 8002e46:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8002e56:	2300      	movs	r3, #0
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3758      	adds	r7, #88	; 0x58
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b084      	sub	sp, #16
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	60f8      	str	r0, [r7, #12]
 8002e68:	60b9      	str	r1, [r7, #8]
 8002e6a:	603b      	str	r3, [r7, #0]
 8002e6c:	4613      	mov	r3, r2
 8002e6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e70:	e04f      	b.n	8002f12 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e72:	69bb      	ldr	r3, [r7, #24]
 8002e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e78:	d04b      	beq.n	8002f12 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e7a:	f7fd fd9b 	bl	80009b4 <HAL_GetTick>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	1ad3      	subs	r3, r2, r3
 8002e84:	69ba      	ldr	r2, [r7, #24]
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d302      	bcc.n	8002e90 <UART_WaitOnFlagUntilTimeout+0x30>
 8002e8a:	69bb      	ldr	r3, [r7, #24]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d101      	bne.n	8002e94 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002e90:	2303      	movs	r3, #3
 8002e92:	e04e      	b.n	8002f32 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0304 	and.w	r3, r3, #4
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d037      	beq.n	8002f12 <UART_WaitOnFlagUntilTimeout+0xb2>
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	2b80      	cmp	r3, #128	; 0x80
 8002ea6:	d034      	beq.n	8002f12 <UART_WaitOnFlagUntilTimeout+0xb2>
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	2b40      	cmp	r3, #64	; 0x40
 8002eac:	d031      	beq.n	8002f12 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	69db      	ldr	r3, [r3, #28]
 8002eb4:	f003 0308 	and.w	r3, r3, #8
 8002eb8:	2b08      	cmp	r3, #8
 8002eba:	d110      	bne.n	8002ede <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	2208      	movs	r2, #8
 8002ec2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002ec4:	68f8      	ldr	r0, [r7, #12]
 8002ec6:	f000 f838 	bl	8002f3a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2208      	movs	r2, #8
 8002ece:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e029      	b.n	8002f32 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	69db      	ldr	r3, [r3, #28]
 8002ee4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ee8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002eec:	d111      	bne.n	8002f12 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ef6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002ef8:	68f8      	ldr	r0, [r7, #12]
 8002efa:	f000 f81e 	bl	8002f3a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2220      	movs	r2, #32
 8002f02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e00f      	b.n	8002f32 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	69da      	ldr	r2, [r3, #28]
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	68ba      	ldr	r2, [r7, #8]
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	bf0c      	ite	eq
 8002f22:	2301      	moveq	r3, #1
 8002f24:	2300      	movne	r3, #0
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	461a      	mov	r2, r3
 8002f2a:	79fb      	ldrb	r3, [r7, #7]
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d0a0      	beq.n	8002e72 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f30:	2300      	movs	r3, #0
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3710      	adds	r7, #16
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}

08002f3a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002f3a:	b480      	push	{r7}
 8002f3c:	b095      	sub	sp, #84	; 0x54
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f4a:	e853 3f00 	ldrex	r3, [r3]
 8002f4e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f52:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002f56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	461a      	mov	r2, r3
 8002f5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f60:	643b      	str	r3, [r7, #64]	; 0x40
 8002f62:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f64:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002f66:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002f68:	e841 2300 	strex	r3, r2, [r1]
 8002f6c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002f6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d1e6      	bne.n	8002f42 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	3308      	adds	r3, #8
 8002f7a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f7c:	6a3b      	ldr	r3, [r7, #32]
 8002f7e:	e853 3f00 	ldrex	r3, [r3]
 8002f82:	61fb      	str	r3, [r7, #28]
   return(result);
 8002f84:	69fb      	ldr	r3, [r7, #28]
 8002f86:	f023 0301 	bic.w	r3, r3, #1
 8002f8a:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	3308      	adds	r3, #8
 8002f92:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f94:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002f96:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f98:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f9c:	e841 2300 	strex	r3, r2, [r1]
 8002fa0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d1e5      	bne.n	8002f74 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d118      	bne.n	8002fe2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	e853 3f00 	ldrex	r3, [r3]
 8002fbc:	60bb      	str	r3, [r7, #8]
   return(result);
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	f023 0310 	bic.w	r3, r3, #16
 8002fc4:	647b      	str	r3, [r7, #68]	; 0x44
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	461a      	mov	r2, r3
 8002fcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fce:	61bb      	str	r3, [r7, #24]
 8002fd0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fd2:	6979      	ldr	r1, [r7, #20]
 8002fd4:	69ba      	ldr	r2, [r7, #24]
 8002fd6:	e841 2300 	strex	r3, r2, [r1]
 8002fda:	613b      	str	r3, [r7, #16]
   return(result);
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d1e6      	bne.n	8002fb0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2220      	movs	r2, #32
 8002fe6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	669a      	str	r2, [r3, #104]	; 0x68
}
 8002ff6:	bf00      	nop
 8002ff8:	3754      	adds	r7, #84	; 0x54
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003000:	4770      	bx	lr

08003002 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003002:	b480      	push	{r7}
 8003004:	b083      	sub	sp, #12
 8003006:	af00      	add	r7, sp, #0
 8003008:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f103 0208 	add.w	r2, r3, #8
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	f04f 32ff 	mov.w	r2, #4294967295
 800301a:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	f103 0208 	add.w	r2, r3, #8
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f103 0208 	add.w	r2, r3, #8
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2200      	movs	r2, #0
 8003034:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003036:	bf00      	nop
 8003038:	370c      	adds	r7, #12
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr

08003042 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003042:	b480      	push	{r7}
 8003044:	b083      	sub	sp, #12
 8003046:	af00      	add	r7, sp, #0
 8003048:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2200      	movs	r2, #0
 800304e:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003050:	bf00      	nop
 8003052:	370c      	adds	r7, #12
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr

0800305c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800305c:	b480      	push	{r7}
 800305e:	b085      	sub	sp, #20
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
 8003064:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	68fa      	ldr	r2, [r7, #12]
 8003070:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	689a      	ldr	r2, [r3, #8]
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	683a      	ldr	r2, [r7, #0]
 8003080:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	683a      	ldr	r2, [r7, #0]
 8003086:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	1c5a      	adds	r2, r3, #1
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	601a      	str	r2, [r3, #0]
}
 8003098:	bf00      	nop
 800309a:	3714      	adds	r7, #20
 800309c:	46bd      	mov	sp, r7
 800309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a2:	4770      	bx	lr

080030a4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80030a4:	b480      	push	{r7}
 80030a6:	b085      	sub	sp, #20
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
 80030ac:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030ba:	d103      	bne.n	80030c4 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	691b      	ldr	r3, [r3, #16]
 80030c0:	60fb      	str	r3, [r7, #12]
 80030c2:	e00c      	b.n	80030de <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	3308      	adds	r3, #8
 80030c8:	60fb      	str	r3, [r7, #12]
 80030ca:	e002      	b.n	80030d2 <vListInsert+0x2e>
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	60fb      	str	r3, [r7, #12]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	68ba      	ldr	r2, [r7, #8]
 80030da:	429a      	cmp	r2, r3
 80030dc:	d2f6      	bcs.n	80030cc <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	685a      	ldr	r2, [r3, #4]
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	683a      	ldr	r2, [r7, #0]
 80030ec:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	68fa      	ldr	r2, [r7, #12]
 80030f2:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	683a      	ldr	r2, [r7, #0]
 80030f8:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	1c5a      	adds	r2, r3, #1
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	601a      	str	r2, [r3, #0]
}
 800310a:	bf00      	nop
 800310c:	3714      	adds	r7, #20
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr

08003116 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003116:	b480      	push	{r7}
 8003118:	b085      	sub	sp, #20
 800311a:	af00      	add	r7, sp, #0
 800311c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	691b      	ldr	r3, [r3, #16]
 8003122:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	687a      	ldr	r2, [r7, #4]
 800312a:	6892      	ldr	r2, [r2, #8]
 800312c:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	6852      	ldr	r2, [r2, #4]
 8003136:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	687a      	ldr	r2, [r7, #4]
 800313e:	429a      	cmp	r2, r3
 8003140:	d103      	bne.n	800314a <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	689a      	ldr	r2, [r3, #8]
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2200      	movs	r2, #0
 800314e:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	1e5a      	subs	r2, r3, #1
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
}
 800315e:	4618      	mov	r0, r3
 8003160:	3714      	adds	r7, #20
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr
	...

0800316c <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b084      	sub	sp, #16
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d10a      	bne.n	8003196 <xQueueGenericReset+0x2a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8003180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003184:	f383 8811 	msr	BASEPRI, r3
 8003188:	f3bf 8f6f 	isb	sy
 800318c:	f3bf 8f4f 	dsb	sy
 8003190:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8003192:	bf00      	nop
 8003194:	e7fe      	b.n	8003194 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8003196:	f002 f82f 	bl	80051f8 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031a2:	68f9      	ldr	r1, [r7, #12]
 80031a4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80031a6:	fb01 f303 	mul.w	r3, r1, r3
 80031aa:	441a      	add	r2, r3
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2200      	movs	r2, #0
 80031b4:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031c6:	3b01      	subs	r3, #1
 80031c8:	68f9      	ldr	r1, [r7, #12]
 80031ca:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80031cc:	fb01 f303 	mul.w	r3, r1, r3
 80031d0:	441a      	add	r2, r3
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	22ff      	movs	r2, #255	; 0xff
 80031da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	22ff      	movs	r2, #255	; 0xff
 80031e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d114      	bne.n	8003216 <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	691b      	ldr	r3, [r3, #16]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d01a      	beq.n	800322a <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	3310      	adds	r3, #16
 80031f8:	4618      	mov	r0, r3
 80031fa:	f001 f911 	bl	8004420 <xTaskRemoveFromEventList>
 80031fe:	4603      	mov	r3, r0
 8003200:	2b00      	cmp	r3, #0
 8003202:	d012      	beq.n	800322a <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8003204:	4b0c      	ldr	r3, [pc, #48]	; (8003238 <xQueueGenericReset+0xcc>)
 8003206:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800320a:	601a      	str	r2, [r3, #0]
 800320c:	f3bf 8f4f 	dsb	sy
 8003210:	f3bf 8f6f 	isb	sy
 8003214:	e009      	b.n	800322a <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	3310      	adds	r3, #16
 800321a:	4618      	mov	r0, r3
 800321c:	f7ff fef1 	bl	8003002 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	3324      	adds	r3, #36	; 0x24
 8003224:	4618      	mov	r0, r3
 8003226:	f7ff feec 	bl	8003002 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 800322a:	f002 f815 	bl	8005258 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 800322e:	2301      	movs	r3, #1
}
 8003230:	4618      	mov	r0, r3
 8003232:	3710      	adds	r7, #16
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}
 8003238:	e000ed04 	.word	0xe000ed04

0800323c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 800323c:	b580      	push	{r7, lr}
 800323e:	b08c      	sub	sp, #48	; 0x30
 8003240:	af02      	add	r7, sp, #8
 8003242:	60f8      	str	r0, [r7, #12]
 8003244:	60b9      	str	r1, [r7, #8]
 8003246:	4613      	mov	r3, r2
 8003248:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d10a      	bne.n	8003266 <xQueueGenericCreate+0x2a>
        __asm volatile
 8003250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003254:	f383 8811 	msr	BASEPRI, r3
 8003258:	f3bf 8f6f 	isb	sy
 800325c:	f3bf 8f4f 	dsb	sy
 8003260:	61bb      	str	r3, [r7, #24]
    }
 8003262:	bf00      	nop
 8003264:	e7fe      	b.n	8003264 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	68ba      	ldr	r2, [r7, #8]
 800326a:	fb02 f303 	mul.w	r3, r2, r3
 800326e:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d006      	beq.n	8003284 <xQueueGenericCreate+0x48>
 8003276:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	fbb2 f3f3 	udiv	r3, r2, r3
 800327e:	68fa      	ldr	r2, [r7, #12]
 8003280:	429a      	cmp	r2, r3
 8003282:	d101      	bne.n	8003288 <xQueueGenericCreate+0x4c>
 8003284:	2301      	movs	r3, #1
 8003286:	e000      	b.n	800328a <xQueueGenericCreate+0x4e>
 8003288:	2300      	movs	r3, #0
 800328a:	2b00      	cmp	r3, #0
 800328c:	d10a      	bne.n	80032a4 <xQueueGenericCreate+0x68>
        __asm volatile
 800328e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003292:	f383 8811 	msr	BASEPRI, r3
 8003296:	f3bf 8f6f 	isb	sy
 800329a:	f3bf 8f4f 	dsb	sy
 800329e:	617b      	str	r3, [r7, #20]
    }
 80032a0:	bf00      	nop
 80032a2:	e7fe      	b.n	80032a2 <xQueueGenericCreate+0x66>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80032a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a6:	3354      	adds	r3, #84	; 0x54
 80032a8:	4618      	mov	r0, r3
 80032aa:	f002 f8bd 	bl	8005428 <pvPortMalloc>
 80032ae:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 80032b0:	6a3b      	ldr	r3, [r7, #32]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d00d      	beq.n	80032d2 <xQueueGenericCreate+0x96>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80032b6:	6a3b      	ldr	r3, [r7, #32]
 80032b8:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	3354      	adds	r3, #84	; 0x54
 80032be:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80032c0:	79fa      	ldrb	r2, [r7, #7]
 80032c2:	6a3b      	ldr	r3, [r7, #32]
 80032c4:	9300      	str	r3, [sp, #0]
 80032c6:	4613      	mov	r3, r2
 80032c8:	69fa      	ldr	r2, [r7, #28]
 80032ca:	68b9      	ldr	r1, [r7, #8]
 80032cc:	68f8      	ldr	r0, [r7, #12]
 80032ce:	f000 f805 	bl	80032dc <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80032d2:	6a3b      	ldr	r3, [r7, #32]
    }
 80032d4:	4618      	mov	r0, r3
 80032d6:	3728      	adds	r7, #40	; 0x28
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}

080032dc <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b084      	sub	sp, #16
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	60f8      	str	r0, [r7, #12]
 80032e4:	60b9      	str	r1, [r7, #8]
 80032e6:	607a      	str	r2, [r7, #4]
 80032e8:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d103      	bne.n	80032f8 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80032f0:	69bb      	ldr	r3, [r7, #24]
 80032f2:	69ba      	ldr	r2, [r7, #24]
 80032f4:	601a      	str	r2, [r3, #0]
 80032f6:	e002      	b.n	80032fe <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80032f8:	69bb      	ldr	r3, [r7, #24]
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80032fe:	69bb      	ldr	r3, [r7, #24]
 8003300:	68fa      	ldr	r2, [r7, #12]
 8003302:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8003304:	69bb      	ldr	r3, [r7, #24]
 8003306:	68ba      	ldr	r2, [r7, #8]
 8003308:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800330a:	2101      	movs	r1, #1
 800330c:	69b8      	ldr	r0, [r7, #24]
 800330e:	f7ff ff2d 	bl	800316c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8003312:	69bb      	ldr	r3, [r7, #24]
 8003314:	78fa      	ldrb	r2, [r7, #3]
 8003316:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        }
    #endif /* configUSE_TRACE_FACILITY */

    #if ( configUSE_QUEUE_SETS == 1 )
        {
            pxNewQueue->pxQueueSetContainer = NULL;
 800331a:	69bb      	ldr	r3, [r7, #24]
 800331c:	2200      	movs	r2, #0
 800331e:	649a      	str	r2, [r3, #72]	; 0x48
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8003320:	bf00      	nop
 8003322:	3710      	adds	r7, #16
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}

08003328 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b08e      	sub	sp, #56	; 0x38
 800332c:	af00      	add	r7, sp, #0
 800332e:	60f8      	str	r0, [r7, #12]
 8003330:	60b9      	str	r1, [r7, #8]
 8003332:	607a      	str	r2, [r7, #4]
 8003334:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003336:	2300      	movs	r3, #0
 8003338:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 800333e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003340:	2b00      	cmp	r3, #0
 8003342:	d10a      	bne.n	800335a <xQueueGenericSend+0x32>
        __asm volatile
 8003344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003348:	f383 8811 	msr	BASEPRI, r3
 800334c:	f3bf 8f6f 	isb	sy
 8003350:	f3bf 8f4f 	dsb	sy
 8003354:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8003356:	bf00      	nop
 8003358:	e7fe      	b.n	8003358 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d103      	bne.n	8003368 <xQueueGenericSend+0x40>
 8003360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003364:	2b00      	cmp	r3, #0
 8003366:	d101      	bne.n	800336c <xQueueGenericSend+0x44>
 8003368:	2301      	movs	r3, #1
 800336a:	e000      	b.n	800336e <xQueueGenericSend+0x46>
 800336c:	2300      	movs	r3, #0
 800336e:	2b00      	cmp	r3, #0
 8003370:	d10a      	bne.n	8003388 <xQueueGenericSend+0x60>
        __asm volatile
 8003372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003376:	f383 8811 	msr	BASEPRI, r3
 800337a:	f3bf 8f6f 	isb	sy
 800337e:	f3bf 8f4f 	dsb	sy
 8003382:	623b      	str	r3, [r7, #32]
    }
 8003384:	bf00      	nop
 8003386:	e7fe      	b.n	8003386 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	2b02      	cmp	r3, #2
 800338c:	d103      	bne.n	8003396 <xQueueGenericSend+0x6e>
 800338e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003390:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003392:	2b01      	cmp	r3, #1
 8003394:	d101      	bne.n	800339a <xQueueGenericSend+0x72>
 8003396:	2301      	movs	r3, #1
 8003398:	e000      	b.n	800339c <xQueueGenericSend+0x74>
 800339a:	2300      	movs	r3, #0
 800339c:	2b00      	cmp	r3, #0
 800339e:	d10a      	bne.n	80033b6 <xQueueGenericSend+0x8e>
        __asm volatile
 80033a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033a4:	f383 8811 	msr	BASEPRI, r3
 80033a8:	f3bf 8f6f 	isb	sy
 80033ac:	f3bf 8f4f 	dsb	sy
 80033b0:	61fb      	str	r3, [r7, #28]
    }
 80033b2:	bf00      	nop
 80033b4:	e7fe      	b.n	80033b4 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80033b6:	f001 f9df 	bl	8004778 <xTaskGetSchedulerState>
 80033ba:	4603      	mov	r3, r0
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d102      	bne.n	80033c6 <xQueueGenericSend+0x9e>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d101      	bne.n	80033ca <xQueueGenericSend+0xa2>
 80033c6:	2301      	movs	r3, #1
 80033c8:	e000      	b.n	80033cc <xQueueGenericSend+0xa4>
 80033ca:	2300      	movs	r3, #0
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d10a      	bne.n	80033e6 <xQueueGenericSend+0xbe>
        __asm volatile
 80033d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033d4:	f383 8811 	msr	BASEPRI, r3
 80033d8:	f3bf 8f6f 	isb	sy
 80033dc:	f3bf 8f4f 	dsb	sy
 80033e0:	61bb      	str	r3, [r7, #24]
    }
 80033e2:	bf00      	nop
 80033e4:	e7fe      	b.n	80033e4 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80033e6:	f001 ff07 	bl	80051f8 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80033ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d302      	bcc.n	80033fc <xQueueGenericSend+0xd4>
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	2b02      	cmp	r3, #2
 80033fa:	d145      	bne.n	8003488 <xQueueGenericSend+0x160>
            {
                traceQUEUE_SEND( pxQueue );

                #if ( configUSE_QUEUE_SETS == 1 )
                    {
                        const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80033fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003400:	62fb      	str	r3, [r7, #44]	; 0x2c

                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003402:	683a      	ldr	r2, [r7, #0]
 8003404:	68b9      	ldr	r1, [r7, #8]
 8003406:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003408:	f000 fa4a 	bl	80038a0 <prvCopyDataToQueue>
 800340c:	62b8      	str	r0, [r7, #40]	; 0x28

                        if( pxQueue->pxQueueSetContainer != NULL )
 800340e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003410:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003412:	2b00      	cmp	r3, #0
 8003414:	d014      	beq.n	8003440 <xQueueGenericSend+0x118>
                        {
                            if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 ) )
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	2b02      	cmp	r3, #2
 800341a:	d102      	bne.n	8003422 <xQueueGenericSend+0xfa>
 800341c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800341e:	2b00      	cmp	r3, #0
 8003420:	d12e      	bne.n	8003480 <xQueueGenericSend+0x158>
                                /* Do not notify the queue set as an existing item
                                 * was overwritten in the queue so the number of items
                                 * in the queue has not changed. */
                                mtCOVERAGE_TEST_MARKER();
                            }
                            else if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 8003422:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003424:	f000 fbb8 	bl	8003b98 <prvNotifyQueueSetContainer>
 8003428:	4603      	mov	r3, r0
 800342a:	2b00      	cmp	r3, #0
 800342c:	d028      	beq.n	8003480 <xQueueGenericSend+0x158>
                            {
                                /* The queue is a member of a queue set, and posting
                                 * to the queue set caused a higher priority task to
                                 * unblock. A context switch is required. */
                                queueYIELD_IF_USING_PREEMPTION();
 800342e:	4b4a      	ldr	r3, [pc, #296]	; (8003558 <xQueueGenericSend+0x230>)
 8003430:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003434:	601a      	str	r2, [r3, #0]
 8003436:	f3bf 8f4f 	dsb	sy
 800343a:	f3bf 8f6f 	isb	sy
 800343e:	e01f      	b.n	8003480 <xQueueGenericSend+0x158>
                        }
                        else
                        {
                            /* If there was a task waiting for data to arrive on the
                             * queue then unblock it now. */
                            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003444:	2b00      	cmp	r3, #0
 8003446:	d010      	beq.n	800346a <xQueueGenericSend+0x142>
                            {
                                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800344a:	3324      	adds	r3, #36	; 0x24
 800344c:	4618      	mov	r0, r3
 800344e:	f000 ffe7 	bl	8004420 <xTaskRemoveFromEventList>
 8003452:	4603      	mov	r3, r0
 8003454:	2b00      	cmp	r3, #0
 8003456:	d013      	beq.n	8003480 <xQueueGenericSend+0x158>
                                {
                                    /* The unblocked task has a priority higher than
                                     * our own so yield immediately.  Yes it is ok to
                                     * do this from within the critical section - the
                                     * kernel takes care of that. */
                                    queueYIELD_IF_USING_PREEMPTION();
 8003458:	4b3f      	ldr	r3, [pc, #252]	; (8003558 <xQueueGenericSend+0x230>)
 800345a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800345e:	601a      	str	r2, [r3, #0]
 8003460:	f3bf 8f4f 	dsb	sy
 8003464:	f3bf 8f6f 	isb	sy
 8003468:	e00a      	b.n	8003480 <xQueueGenericSend+0x158>
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }
                            }
                            else if( xYieldRequired != pdFALSE )
 800346a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800346c:	2b00      	cmp	r3, #0
 800346e:	d007      	beq.n	8003480 <xQueueGenericSend+0x158>
                            {
                                /* This path is a special case that will only get
                                 * executed if the task was holding multiple mutexes
                                 * and the mutexes were given back in an order that is
                                 * different to that in which they were taken. */
                                queueYIELD_IF_USING_PREEMPTION();
 8003470:	4b39      	ldr	r3, [pc, #228]	; (8003558 <xQueueGenericSend+0x230>)
 8003472:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003476:	601a      	str	r2, [r3, #0]
 8003478:	f3bf 8f4f 	dsb	sy
 800347c:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8003480:	f001 feea 	bl	8005258 <vPortExitCritical>
                return pdPASS;
 8003484:	2301      	movs	r3, #1
 8003486:	e063      	b.n	8003550 <xQueueGenericSend+0x228>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d103      	bne.n	8003496 <xQueueGenericSend+0x16e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800348e:	f001 fee3 	bl	8005258 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8003492:	2300      	movs	r3, #0
 8003494:	e05c      	b.n	8003550 <xQueueGenericSend+0x228>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003496:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003498:	2b00      	cmp	r3, #0
 800349a:	d106      	bne.n	80034aa <xQueueGenericSend+0x182>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800349c:	f107 0310 	add.w	r3, r7, #16
 80034a0:	4618      	mov	r0, r3
 80034a2:	f001 f81f 	bl	80044e4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80034a6:	2301      	movs	r3, #1
 80034a8:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80034aa:	f001 fed5 	bl	8005258 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80034ae:	f000 fd7f 	bl	8003fb0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80034b2:	f001 fea1 	bl	80051f8 <vPortEnterCritical>
 80034b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80034bc:	b25b      	sxtb	r3, r3
 80034be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034c2:	d103      	bne.n	80034cc <xQueueGenericSend+0x1a4>
 80034c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034c6:	2200      	movs	r2, #0
 80034c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80034d2:	b25b      	sxtb	r3, r3
 80034d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034d8:	d103      	bne.n	80034e2 <xQueueGenericSend+0x1ba>
 80034da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034dc:	2200      	movs	r2, #0
 80034de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80034e2:	f001 feb9 	bl	8005258 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80034e6:	1d3a      	adds	r2, r7, #4
 80034e8:	f107 0310 	add.w	r3, r7, #16
 80034ec:	4611      	mov	r1, r2
 80034ee:	4618      	mov	r0, r3
 80034f0:	f001 f80e 	bl	8004510 <xTaskCheckForTimeOut>
 80034f4:	4603      	mov	r3, r0
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d124      	bne.n	8003544 <xQueueGenericSend+0x21c>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80034fa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80034fc:	f000 fad5 	bl	8003aaa <prvIsQueueFull>
 8003500:	4603      	mov	r3, r0
 8003502:	2b00      	cmp	r3, #0
 8003504:	d018      	beq.n	8003538 <xQueueGenericSend+0x210>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003508:	3310      	adds	r3, #16
 800350a:	687a      	ldr	r2, [r7, #4]
 800350c:	4611      	mov	r1, r2
 800350e:	4618      	mov	r0, r3
 8003510:	f000 ff36 	bl	8004380 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8003514:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003516:	f000 fa53 	bl	80039c0 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 800351a:	f000 fd57 	bl	8003fcc <xTaskResumeAll>
 800351e:	4603      	mov	r3, r0
 8003520:	2b00      	cmp	r3, #0
 8003522:	f47f af60 	bne.w	80033e6 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8003526:	4b0c      	ldr	r3, [pc, #48]	; (8003558 <xQueueGenericSend+0x230>)
 8003528:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800352c:	601a      	str	r2, [r3, #0]
 800352e:	f3bf 8f4f 	dsb	sy
 8003532:	f3bf 8f6f 	isb	sy
 8003536:	e756      	b.n	80033e6 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8003538:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800353a:	f000 fa41 	bl	80039c0 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800353e:	f000 fd45 	bl	8003fcc <xTaskResumeAll>
 8003542:	e750      	b.n	80033e6 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8003544:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003546:	f000 fa3b 	bl	80039c0 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800354a:	f000 fd3f 	bl	8003fcc <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 800354e:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8003550:	4618      	mov	r0, r3
 8003552:	3738      	adds	r7, #56	; 0x38
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}
 8003558:	e000ed04 	.word	0xe000ed04

0800355c <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b090      	sub	sp, #64	; 0x40
 8003560:	af00      	add	r7, sp, #0
 8003562:	60f8      	str	r0, [r7, #12]
 8003564:	60b9      	str	r1, [r7, #8]
 8003566:	607a      	str	r2, [r7, #4]
 8003568:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 800356e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003570:	2b00      	cmp	r3, #0
 8003572:	d10a      	bne.n	800358a <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8003574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003578:	f383 8811 	msr	BASEPRI, r3
 800357c:	f3bf 8f6f 	isb	sy
 8003580:	f3bf 8f4f 	dsb	sy
 8003584:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8003586:	bf00      	nop
 8003588:	e7fe      	b.n	8003588 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d103      	bne.n	8003598 <xQueueGenericSendFromISR+0x3c>
 8003590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003594:	2b00      	cmp	r3, #0
 8003596:	d101      	bne.n	800359c <xQueueGenericSendFromISR+0x40>
 8003598:	2301      	movs	r3, #1
 800359a:	e000      	b.n	800359e <xQueueGenericSendFromISR+0x42>
 800359c:	2300      	movs	r3, #0
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d10a      	bne.n	80035b8 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 80035a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035a6:	f383 8811 	msr	BASEPRI, r3
 80035aa:	f3bf 8f6f 	isb	sy
 80035ae:	f3bf 8f4f 	dsb	sy
 80035b2:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80035b4:	bf00      	nop
 80035b6:	e7fe      	b.n	80035b6 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	2b02      	cmp	r3, #2
 80035bc:	d103      	bne.n	80035c6 <xQueueGenericSendFromISR+0x6a>
 80035be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d101      	bne.n	80035ca <xQueueGenericSendFromISR+0x6e>
 80035c6:	2301      	movs	r3, #1
 80035c8:	e000      	b.n	80035cc <xQueueGenericSendFromISR+0x70>
 80035ca:	2300      	movs	r3, #0
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d10a      	bne.n	80035e6 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 80035d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035d4:	f383 8811 	msr	BASEPRI, r3
 80035d8:	f3bf 8f6f 	isb	sy
 80035dc:	f3bf 8f4f 	dsb	sy
 80035e0:	623b      	str	r3, [r7, #32]
    }
 80035e2:	bf00      	nop
 80035e4:	e7fe      	b.n	80035e4 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80035e6:	f001 fedf 	bl	80053a8 <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 80035ea:	f3ef 8211 	mrs	r2, BASEPRI
 80035ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035f2:	f383 8811 	msr	BASEPRI, r3
 80035f6:	f3bf 8f6f 	isb	sy
 80035fa:	f3bf 8f4f 	dsb	sy
 80035fe:	61fa      	str	r2, [r7, #28]
 8003600:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8003602:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003604:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003608:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800360a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800360c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800360e:	429a      	cmp	r2, r3
 8003610:	d302      	bcc.n	8003618 <xQueueGenericSendFromISR+0xbc>
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	2b02      	cmp	r3, #2
 8003616:	d155      	bne.n	80036c4 <xQueueGenericSendFromISR+0x168>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8003618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800361a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800361e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003626:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003628:	683a      	ldr	r2, [r7, #0]
 800362a:	68b9      	ldr	r1, [r7, #8]
 800362c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800362e:	f000 f937 	bl	80038a0 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8003632:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003636:	f1b3 3fff 	cmp.w	r3, #4294967295
 800363a:	d129      	bne.n	8003690 <xQueueGenericSendFromISR+0x134>
            {
                #if ( configUSE_QUEUE_SETS == 1 )
                    {
                        if( pxQueue->pxQueueSetContainer != NULL )
 800363c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800363e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003640:	2b00      	cmp	r3, #0
 8003642:	d012      	beq.n	800366a <xQueueGenericSendFromISR+0x10e>
                        {
                            if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 ) )
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	2b02      	cmp	r3, #2
 8003648:	d102      	bne.n	8003650 <xQueueGenericSendFromISR+0xf4>
 800364a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800364c:	2b00      	cmp	r3, #0
 800364e:	d136      	bne.n	80036be <xQueueGenericSendFromISR+0x162>
                                /* Do not notify the queue set as an existing item
                                 * was overwritten in the queue so the number of items
                                 * in the queue has not changed. */
                                mtCOVERAGE_TEST_MARKER();
                            }
                            else if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 8003650:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003652:	f000 faa1 	bl	8003b98 <prvNotifyQueueSetContainer>
 8003656:	4603      	mov	r3, r0
 8003658:	2b00      	cmp	r3, #0
 800365a:	d030      	beq.n	80036be <xQueueGenericSendFromISR+0x162>
                            {
                                /* The queue is a member of a queue set, and posting
                                 * to the queue set caused a higher priority task to
                                 * unblock.  A context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d02d      	beq.n	80036be <xQueueGenericSendFromISR+0x162>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2201      	movs	r2, #1
 8003666:	601a      	str	r2, [r3, #0]
 8003668:	e029      	b.n	80036be <xQueueGenericSendFromISR+0x162>
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else
                        {
                            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800366a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800366c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366e:	2b00      	cmp	r3, #0
 8003670:	d025      	beq.n	80036be <xQueueGenericSendFromISR+0x162>
                            {
                                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003674:	3324      	adds	r3, #36	; 0x24
 8003676:	4618      	mov	r0, r3
 8003678:	f000 fed2 	bl	8004420 <xTaskRemoveFromEventList>
 800367c:	4603      	mov	r3, r0
 800367e:	2b00      	cmp	r3, #0
 8003680:	d01d      	beq.n	80036be <xQueueGenericSendFromISR+0x162>
                                {
                                    /* The task waiting has a higher priority so
                                     *  record that a context switch is required. */
                                    if( pxHigherPriorityTaskWoken != NULL )
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d01a      	beq.n	80036be <xQueueGenericSendFromISR+0x162>
                                    {
                                        *pxHigherPriorityTaskWoken = pdTRUE;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2201      	movs	r2, #1
 800368c:	601a      	str	r2, [r3, #0]
 800368e:	e016      	b.n	80036be <xQueueGenericSendFromISR+0x162>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8003690:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003694:	2b7f      	cmp	r3, #127	; 0x7f
 8003696:	d10a      	bne.n	80036ae <xQueueGenericSendFromISR+0x152>
        __asm volatile
 8003698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800369c:	f383 8811 	msr	BASEPRI, r3
 80036a0:	f3bf 8f6f 	isb	sy
 80036a4:	f3bf 8f4f 	dsb	sy
 80036a8:	617b      	str	r3, [r7, #20]
    }
 80036aa:	bf00      	nop
 80036ac:	e7fe      	b.n	80036ac <xQueueGenericSendFromISR+0x150>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80036ae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80036b2:	3301      	adds	r3, #1
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	b25a      	sxtb	r2, r3
 80036b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 80036be:	2301      	movs	r3, #1
 80036c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 80036c2:	e001      	b.n	80036c8 <xQueueGenericSendFromISR+0x16c>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 80036c4:	2300      	movs	r3, #0
 80036c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036ca:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80036d2:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80036d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3740      	adds	r7, #64	; 0x40
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
	...

080036e0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b08c      	sub	sp, #48	; 0x30
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	60f8      	str	r0, [r7, #12]
 80036e8:	60b9      	str	r1, [r7, #8]
 80036ea:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80036ec:	2300      	movs	r3, #0
 80036ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80036f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d10a      	bne.n	8003710 <xQueueReceive+0x30>
        __asm volatile
 80036fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036fe:	f383 8811 	msr	BASEPRI, r3
 8003702:	f3bf 8f6f 	isb	sy
 8003706:	f3bf 8f4f 	dsb	sy
 800370a:	623b      	str	r3, [r7, #32]
    }
 800370c:	bf00      	nop
 800370e:	e7fe      	b.n	800370e <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d103      	bne.n	800371e <xQueueReceive+0x3e>
 8003716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371a:	2b00      	cmp	r3, #0
 800371c:	d101      	bne.n	8003722 <xQueueReceive+0x42>
 800371e:	2301      	movs	r3, #1
 8003720:	e000      	b.n	8003724 <xQueueReceive+0x44>
 8003722:	2300      	movs	r3, #0
 8003724:	2b00      	cmp	r3, #0
 8003726:	d10a      	bne.n	800373e <xQueueReceive+0x5e>
        __asm volatile
 8003728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800372c:	f383 8811 	msr	BASEPRI, r3
 8003730:	f3bf 8f6f 	isb	sy
 8003734:	f3bf 8f4f 	dsb	sy
 8003738:	61fb      	str	r3, [r7, #28]
    }
 800373a:	bf00      	nop
 800373c:	e7fe      	b.n	800373c <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800373e:	f001 f81b 	bl	8004778 <xTaskGetSchedulerState>
 8003742:	4603      	mov	r3, r0
 8003744:	2b00      	cmp	r3, #0
 8003746:	d102      	bne.n	800374e <xQueueReceive+0x6e>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d101      	bne.n	8003752 <xQueueReceive+0x72>
 800374e:	2301      	movs	r3, #1
 8003750:	e000      	b.n	8003754 <xQueueReceive+0x74>
 8003752:	2300      	movs	r3, #0
 8003754:	2b00      	cmp	r3, #0
 8003756:	d10a      	bne.n	800376e <xQueueReceive+0x8e>
        __asm volatile
 8003758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800375c:	f383 8811 	msr	BASEPRI, r3
 8003760:	f3bf 8f6f 	isb	sy
 8003764:	f3bf 8f4f 	dsb	sy
 8003768:	61bb      	str	r3, [r7, #24]
    }
 800376a:	bf00      	nop
 800376c:	e7fe      	b.n	800376c <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800376e:	f001 fd43 	bl	80051f8 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003776:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377a:	2b00      	cmp	r3, #0
 800377c:	d01f      	beq.n	80037be <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800377e:	68b9      	ldr	r1, [r7, #8]
 8003780:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003782:	f000 f8f7 	bl	8003974 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003788:	1e5a      	subs	r2, r3, #1
 800378a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800378c:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800378e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003790:	691b      	ldr	r3, [r3, #16]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d00f      	beq.n	80037b6 <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003798:	3310      	adds	r3, #16
 800379a:	4618      	mov	r0, r3
 800379c:	f000 fe40 	bl	8004420 <xTaskRemoveFromEventList>
 80037a0:	4603      	mov	r3, r0
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d007      	beq.n	80037b6 <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80037a6:	4b3d      	ldr	r3, [pc, #244]	; (800389c <xQueueReceive+0x1bc>)
 80037a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037ac:	601a      	str	r2, [r3, #0]
 80037ae:	f3bf 8f4f 	dsb	sy
 80037b2:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80037b6:	f001 fd4f 	bl	8005258 <vPortExitCritical>
                return pdPASS;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e069      	b.n	8003892 <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d103      	bne.n	80037cc <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80037c4:	f001 fd48 	bl	8005258 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80037c8:	2300      	movs	r3, #0
 80037ca:	e062      	b.n	8003892 <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 80037cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d106      	bne.n	80037e0 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80037d2:	f107 0310 	add.w	r3, r7, #16
 80037d6:	4618      	mov	r0, r3
 80037d8:	f000 fe84 	bl	80044e4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80037dc:	2301      	movs	r3, #1
 80037de:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80037e0:	f001 fd3a 	bl	8005258 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80037e4:	f000 fbe4 	bl	8003fb0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80037e8:	f001 fd06 	bl	80051f8 <vPortEnterCritical>
 80037ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80037f2:	b25b      	sxtb	r3, r3
 80037f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037f8:	d103      	bne.n	8003802 <xQueueReceive+0x122>
 80037fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037fc:	2200      	movs	r2, #0
 80037fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003804:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003808:	b25b      	sxtb	r3, r3
 800380a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800380e:	d103      	bne.n	8003818 <xQueueReceive+0x138>
 8003810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003812:	2200      	movs	r2, #0
 8003814:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003818:	f001 fd1e 	bl	8005258 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800381c:	1d3a      	adds	r2, r7, #4
 800381e:	f107 0310 	add.w	r3, r7, #16
 8003822:	4611      	mov	r1, r2
 8003824:	4618      	mov	r0, r3
 8003826:	f000 fe73 	bl	8004510 <xTaskCheckForTimeOut>
 800382a:	4603      	mov	r3, r0
 800382c:	2b00      	cmp	r3, #0
 800382e:	d123      	bne.n	8003878 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003830:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003832:	f000 f924 	bl	8003a7e <prvIsQueueEmpty>
 8003836:	4603      	mov	r3, r0
 8003838:	2b00      	cmp	r3, #0
 800383a:	d017      	beq.n	800386c <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800383c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800383e:	3324      	adds	r3, #36	; 0x24
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	4611      	mov	r1, r2
 8003844:	4618      	mov	r0, r3
 8003846:	f000 fd9b 	bl	8004380 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800384a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800384c:	f000 f8b8 	bl	80039c0 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8003850:	f000 fbbc 	bl	8003fcc <xTaskResumeAll>
 8003854:	4603      	mov	r3, r0
 8003856:	2b00      	cmp	r3, #0
 8003858:	d189      	bne.n	800376e <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 800385a:	4b10      	ldr	r3, [pc, #64]	; (800389c <xQueueReceive+0x1bc>)
 800385c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003860:	601a      	str	r2, [r3, #0]
 8003862:	f3bf 8f4f 	dsb	sy
 8003866:	f3bf 8f6f 	isb	sy
 800386a:	e780      	b.n	800376e <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800386c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800386e:	f000 f8a7 	bl	80039c0 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003872:	f000 fbab 	bl	8003fcc <xTaskResumeAll>
 8003876:	e77a      	b.n	800376e <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8003878:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800387a:	f000 f8a1 	bl	80039c0 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800387e:	f000 fba5 	bl	8003fcc <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003882:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003884:	f000 f8fb 	bl	8003a7e <prvIsQueueEmpty>
 8003888:	4603      	mov	r3, r0
 800388a:	2b00      	cmp	r3, #0
 800388c:	f43f af6f 	beq.w	800376e <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8003890:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8003892:	4618      	mov	r0, r3
 8003894:	3730      	adds	r7, #48	; 0x30
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}
 800389a:	bf00      	nop
 800389c:	e000ed04 	.word	0xe000ed04

080038a0 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b086      	sub	sp, #24
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	60f8      	str	r0, [r7, #12]
 80038a8:	60b9      	str	r1, [r7, #8]
 80038aa:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80038ac:	2300      	movs	r3, #0
 80038ae:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038b4:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d10d      	bne.n	80038da <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d14d      	bne.n	8003962 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	4618      	mov	r0, r3
 80038cc:	f000 ff72 	bl	80047b4 <xTaskPriorityDisinherit>
 80038d0:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2200      	movs	r2, #0
 80038d6:	609a      	str	r2, [r3, #8]
 80038d8:	e043      	b.n	8003962 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d119      	bne.n	8003914 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	6858      	ldr	r0, [r3, #4]
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e8:	461a      	mov	r2, r3
 80038ea:	68b9      	ldr	r1, [r7, #8]
 80038ec:	f001 ffb2 	bl	8005854 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	685a      	ldr	r2, [r3, #4]
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f8:	441a      	add	r2, r3
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	685a      	ldr	r2, [r3, #4]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	429a      	cmp	r2, r3
 8003908:	d32b      	bcc.n	8003962 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	605a      	str	r2, [r3, #4]
 8003912:	e026      	b.n	8003962 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	68d8      	ldr	r0, [r3, #12]
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391c:	461a      	mov	r2, r3
 800391e:	68b9      	ldr	r1, [r7, #8]
 8003920:	f001 ff98 	bl	8005854 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	68da      	ldr	r2, [r3, #12]
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392c:	425b      	negs	r3, r3
 800392e:	441a      	add	r2, r3
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	68da      	ldr	r2, [r3, #12]
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	429a      	cmp	r2, r3
 800393e:	d207      	bcs.n	8003950 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	689a      	ldr	r2, [r3, #8]
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003948:	425b      	negs	r3, r3
 800394a:	441a      	add	r2, r3
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2b02      	cmp	r3, #2
 8003954:	d105      	bne.n	8003962 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d002      	beq.n	8003962 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	3b01      	subs	r3, #1
 8003960:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	1c5a      	adds	r2, r3, #1
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 800396a:	697b      	ldr	r3, [r7, #20]
}
 800396c:	4618      	mov	r0, r3
 800396e:	3718      	adds	r7, #24
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}

08003974 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b082      	sub	sp, #8
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
 800397c:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003982:	2b00      	cmp	r3, #0
 8003984:	d018      	beq.n	80039b8 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	68da      	ldr	r2, [r3, #12]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398e:	441a      	add	r2, r3
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	68da      	ldr	r2, [r3, #12]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	429a      	cmp	r2, r3
 800399e:	d303      	bcc.n	80039a8 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	68d9      	ldr	r1, [r3, #12]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b0:	461a      	mov	r2, r3
 80039b2:	6838      	ldr	r0, [r7, #0]
 80039b4:	f001 ff4e 	bl	8005854 <memcpy>
    }
}
 80039b8:	bf00      	nop
 80039ba:	3708      	adds	r7, #8
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}

080039c0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b084      	sub	sp, #16
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80039c8:	f001 fc16 	bl	80051f8 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80039d2:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80039d4:	e01e      	b.n	8003a14 <prvUnlockQueue+0x54>
        {
            /* Data was posted while the queue was locked.  Are any tasks
             * blocked waiting for data to become available? */
            #if ( configUSE_QUEUE_SETS == 1 )
                {
                    if( pxQueue->pxQueueSetContainer != NULL )
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d008      	beq.n	80039f0 <prvUnlockQueue+0x30>
                    {
                        if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f000 f8da 	bl	8003b98 <prvNotifyQueueSetContainer>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d010      	beq.n	8003a0c <prvUnlockQueue+0x4c>
                        {
                            /* The queue is a member of a queue set, and posting to
                             * the queue set caused a higher priority task to unblock.
                             * A context switch is required. */
                            vTaskMissedYield();
 80039ea:	f000 fe07 	bl	80045fc <vTaskMissedYield>
 80039ee:	e00d      	b.n	8003a0c <prvUnlockQueue+0x4c>
                    else
                    {
                        /* Tasks that are removed from the event list will get
                         * added to the pending ready list as the scheduler is still
                         * suspended. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d012      	beq.n	8003a1e <prvUnlockQueue+0x5e>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	3324      	adds	r3, #36	; 0x24
 80039fc:	4618      	mov	r0, r3
 80039fe:	f000 fd0f 	bl	8004420 <xTaskRemoveFromEventList>
 8003a02:	4603      	mov	r3, r0
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d001      	beq.n	8003a0c <prvUnlockQueue+0x4c>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                vTaskMissedYield();
 8003a08:	f000 fdf8 	bl	80045fc <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8003a0c:	7bfb      	ldrb	r3, [r7, #15]
 8003a0e:	3b01      	subs	r3, #1
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003a14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	dcdc      	bgt.n	80039d6 <prvUnlockQueue+0x16>
 8003a1c:	e000      	b.n	8003a20 <prvUnlockQueue+0x60>
                            break;
 8003a1e:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	22ff      	movs	r2, #255	; 0xff
 8003a24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8003a28:	f001 fc16 	bl	8005258 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8003a2c:	f001 fbe4 	bl	80051f8 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a36:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003a38:	e011      	b.n	8003a5e <prvUnlockQueue+0x9e>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	691b      	ldr	r3, [r3, #16]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d012      	beq.n	8003a68 <prvUnlockQueue+0xa8>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	3310      	adds	r3, #16
 8003a46:	4618      	mov	r0, r3
 8003a48:	f000 fcea 	bl	8004420 <xTaskRemoveFromEventList>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d001      	beq.n	8003a56 <prvUnlockQueue+0x96>
                {
                    vTaskMissedYield();
 8003a52:	f000 fdd3 	bl	80045fc <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8003a56:	7bbb      	ldrb	r3, [r7, #14]
 8003a58:	3b01      	subs	r3, #1
 8003a5a:	b2db      	uxtb	r3, r3
 8003a5c:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003a5e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	dce9      	bgt.n	8003a3a <prvUnlockQueue+0x7a>
 8003a66:	e000      	b.n	8003a6a <prvUnlockQueue+0xaa>
            }
            else
            {
                break;
 8003a68:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	22ff      	movs	r2, #255	; 0xff
 8003a6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8003a72:	f001 fbf1 	bl	8005258 <vPortExitCritical>
}
 8003a76:	bf00      	nop
 8003a78:	3710      	adds	r7, #16
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}

08003a7e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8003a7e:	b580      	push	{r7, lr}
 8003a80:	b084      	sub	sp, #16
 8003a82:	af00      	add	r7, sp, #0
 8003a84:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003a86:	f001 fbb7 	bl	80051f8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d102      	bne.n	8003a98 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8003a92:	2301      	movs	r3, #1
 8003a94:	60fb      	str	r3, [r7, #12]
 8003a96:	e001      	b.n	8003a9c <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8003a9c:	f001 fbdc 	bl	8005258 <vPortExitCritical>

    return xReturn;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3710      	adds	r7, #16
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}

08003aaa <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8003aaa:	b580      	push	{r7, lr}
 8003aac:	b084      	sub	sp, #16
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003ab2:	f001 fba1 	bl	80051f8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	d102      	bne.n	8003ac8 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	60fb      	str	r3, [r7, #12]
 8003ac6:	e001      	b.n	8003acc <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8003acc:	f001 fbc4 	bl	8005258 <vPortExitCritical>

    return xReturn;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3710      	adds	r7, #16
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}
	...

08003adc <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8003adc:	b480      	push	{r7}
 8003ade:	b085      	sub	sp, #20
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
 8003ae4:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	60fb      	str	r3, [r7, #12]
 8003aea:	e014      	b.n	8003b16 <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003aec:	4a0f      	ldr	r2, [pc, #60]	; (8003b2c <vQueueAddToRegistry+0x50>)
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d10b      	bne.n	8003b10 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003af8:	490c      	ldr	r1, [pc, #48]	; (8003b2c <vQueueAddToRegistry+0x50>)
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	683a      	ldr	r2, [r7, #0]
 8003afe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8003b02:	4a0a      	ldr	r2, [pc, #40]	; (8003b2c <vQueueAddToRegistry+0x50>)
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	00db      	lsls	r3, r3, #3
 8003b08:	4413      	add	r3, r2
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 8003b0e:	e006      	b.n	8003b1e <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	3301      	adds	r3, #1
 8003b14:	60fb      	str	r3, [r7, #12]
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2b04      	cmp	r3, #4
 8003b1a:	d9e7      	bls.n	8003aec <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8003b1c:	bf00      	nop
 8003b1e:	bf00      	nop
 8003b20:	3714      	adds	r7, #20
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr
 8003b2a:	bf00      	nop
 8003b2c:	200000c4 	.word	0x200000c4

08003b30 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b086      	sub	sp, #24
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	60f8      	str	r0, [r7, #12]
 8003b38:	60b9      	str	r1, [r7, #8]
 8003b3a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8003b40:	f001 fb5a 	bl	80051f8 <vPortEnterCritical>
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003b4a:	b25b      	sxtb	r3, r3
 8003b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b50:	d103      	bne.n	8003b5a <vQueueWaitForMessageRestricted+0x2a>
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	2200      	movs	r2, #0
 8003b56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b60:	b25b      	sxtb	r3, r3
 8003b62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b66:	d103      	bne.n	8003b70 <vQueueWaitForMessageRestricted+0x40>
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b70:	f001 fb72 	bl	8005258 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d106      	bne.n	8003b8a <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	3324      	adds	r3, #36	; 0x24
 8003b80:	687a      	ldr	r2, [r7, #4]
 8003b82:	68b9      	ldr	r1, [r7, #8]
 8003b84:	4618      	mov	r0, r3
 8003b86:	f000 fc1f 	bl	80043c8 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8003b8a:	6978      	ldr	r0, [r7, #20]
 8003b8c:	f7ff ff18 	bl	80039c0 <prvUnlockQueue>
    }
 8003b90:	bf00      	nop
 8003b92:	3718      	adds	r7, #24
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}

08003b98 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

    static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue )
    {
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b088      	sub	sp, #32
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
        Queue_t * pxQueueSetContainer = pxQueue->pxQueueSetContainer;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ba4:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	61fb      	str	r3, [r7, #28]

        /* This function must be called form a critical section. */

        configASSERT( pxQueueSetContainer );
 8003baa:	69bb      	ldr	r3, [r7, #24]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d10a      	bne.n	8003bc6 <prvNotifyQueueSetContainer+0x2e>
        __asm volatile
 8003bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bb4:	f383 8811 	msr	BASEPRI, r3
 8003bb8:	f3bf 8f6f 	isb	sy
 8003bbc:	f3bf 8f4f 	dsb	sy
 8003bc0:	613b      	str	r3, [r7, #16]
    }
 8003bc2:	bf00      	nop
 8003bc4:	e7fe      	b.n	8003bc4 <prvNotifyQueueSetContainer+0x2c>
        configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
 8003bc6:	69bb      	ldr	r3, [r7, #24]
 8003bc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bca:	69bb      	ldr	r3, [r7, #24]
 8003bcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d30a      	bcc.n	8003be8 <prvNotifyQueueSetContainer+0x50>
        __asm volatile
 8003bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bd6:	f383 8811 	msr	BASEPRI, r3
 8003bda:	f3bf 8f6f 	isb	sy
 8003bde:	f3bf 8f4f 	dsb	sy
 8003be2:	60fb      	str	r3, [r7, #12]
    }
 8003be4:	bf00      	nop
 8003be6:	e7fe      	b.n	8003be6 <prvNotifyQueueSetContainer+0x4e>

        if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
 8003be8:	69bb      	ldr	r3, [r7, #24]
 8003bea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bec:	69bb      	ldr	r3, [r7, #24]
 8003bee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d234      	bcs.n	8003c5e <prvNotifyQueueSetContainer+0xc6>
        {
            const int8_t cTxLock = pxQueueSetContainer->cTxLock;
 8003bf4:	69bb      	ldr	r3, [r7, #24]
 8003bf6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003bfa:	75fb      	strb	r3, [r7, #23]

            traceQUEUE_SET_SEND( pxQueueSetContainer );

            /* The data copied is the handle of the queue that contains data. */
            xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, queueSEND_TO_BACK );
 8003bfc:	1d3b      	adds	r3, r7, #4
 8003bfe:	2200      	movs	r2, #0
 8003c00:	4619      	mov	r1, r3
 8003c02:	69b8      	ldr	r0, [r7, #24]
 8003c04:	f7ff fe4c 	bl	80038a0 <prvCopyDataToQueue>
 8003c08:	61f8      	str	r0, [r7, #28]

            if( cTxLock == queueUNLOCKED )
 8003c0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003c0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c12:	d10e      	bne.n	8003c32 <prvNotifyQueueSetContainer+0x9a>
            {
                if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
 8003c14:	69bb      	ldr	r3, [r7, #24]
 8003c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d020      	beq.n	8003c5e <prvNotifyQueueSetContainer+0xc6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
 8003c1c:	69bb      	ldr	r3, [r7, #24]
 8003c1e:	3324      	adds	r3, #36	; 0x24
 8003c20:	4618      	mov	r0, r3
 8003c22:	f000 fbfd 	bl	8004420 <xTaskRemoveFromEventList>
 8003c26:	4603      	mov	r3, r0
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d018      	beq.n	8003c5e <prvNotifyQueueSetContainer+0xc6>
                    {
                        /* The task waiting has a higher priority. */
                        xReturn = pdTRUE;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	61fb      	str	r3, [r7, #28]
 8003c30:	e015      	b.n	8003c5e <prvNotifyQueueSetContainer+0xc6>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                configASSERT( cTxLock != queueINT8_MAX );
 8003c32:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003c36:	2b7f      	cmp	r3, #127	; 0x7f
 8003c38:	d10a      	bne.n	8003c50 <prvNotifyQueueSetContainer+0xb8>
        __asm volatile
 8003c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c3e:	f383 8811 	msr	BASEPRI, r3
 8003c42:	f3bf 8f6f 	isb	sy
 8003c46:	f3bf 8f4f 	dsb	sy
 8003c4a:	60bb      	str	r3, [r7, #8]
    }
 8003c4c:	bf00      	nop
 8003c4e:	e7fe      	b.n	8003c4e <prvNotifyQueueSetContainer+0xb6>

                pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003c50:	7dfb      	ldrb	r3, [r7, #23]
 8003c52:	3301      	adds	r3, #1
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	b25a      	sxtb	r2, r3
 8003c58:	69bb      	ldr	r3, [r7, #24]
 8003c5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003c5e:	69fb      	ldr	r3, [r7, #28]
    }
 8003c60:	4618      	mov	r0, r3
 8003c62:	3720      	adds	r7, #32
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}

08003c68 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b08c      	sub	sp, #48	; 0x30
 8003c6c:	af04      	add	r7, sp, #16
 8003c6e:	60f8      	str	r0, [r7, #12]
 8003c70:	60b9      	str	r1, [r7, #8]
 8003c72:	603b      	str	r3, [r7, #0]
 8003c74:	4613      	mov	r3, r2
 8003c76:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003c78:	88fb      	ldrh	r3, [r7, #6]
 8003c7a:	009b      	lsls	r3, r3, #2
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f001 fbd3 	bl	8005428 <pvPortMalloc>
 8003c82:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d00e      	beq.n	8003ca8 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003c8a:	2068      	movs	r0, #104	; 0x68
 8003c8c:	f001 fbcc 	bl	8005428 <pvPortMalloc>
 8003c90:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d003      	beq.n	8003ca0 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8003c98:	69fb      	ldr	r3, [r7, #28]
 8003c9a:	697a      	ldr	r2, [r7, #20]
 8003c9c:	631a      	str	r2, [r3, #48]	; 0x30
 8003c9e:	e005      	b.n	8003cac <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8003ca0:	6978      	ldr	r0, [r7, #20]
 8003ca2:	f001 fc8d 	bl	80055c0 <vPortFree>
 8003ca6:	e001      	b.n	8003cac <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8003cac:	69fb      	ldr	r3, [r7, #28]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d013      	beq.n	8003cda <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003cb2:	88fa      	ldrh	r2, [r7, #6]
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	9303      	str	r3, [sp, #12]
 8003cb8:	69fb      	ldr	r3, [r7, #28]
 8003cba:	9302      	str	r3, [sp, #8]
 8003cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cbe:	9301      	str	r3, [sp, #4]
 8003cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cc2:	9300      	str	r3, [sp, #0]
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	68b9      	ldr	r1, [r7, #8]
 8003cc8:	68f8      	ldr	r0, [r7, #12]
 8003cca:	f000 f80e 	bl	8003cea <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8003cce:	69f8      	ldr	r0, [r7, #28]
 8003cd0:	f000 f8b2 	bl	8003e38 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	61bb      	str	r3, [r7, #24]
 8003cd8:	e002      	b.n	8003ce0 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003cda:	f04f 33ff 	mov.w	r3, #4294967295
 8003cde:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8003ce0:	69bb      	ldr	r3, [r7, #24]
    }
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3720      	adds	r7, #32
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}

08003cea <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8003cea:	b580      	push	{r7, lr}
 8003cec:	b088      	sub	sp, #32
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	60f8      	str	r0, [r7, #12]
 8003cf2:	60b9      	str	r1, [r7, #8]
 8003cf4:	607a      	str	r2, [r7, #4]
 8003cf6:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cfa:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	009b      	lsls	r3, r3, #2
 8003d00:	461a      	mov	r2, r3
 8003d02:	21a5      	movs	r1, #165	; 0xa5
 8003d04:	f001 fd7a 	bl	80057fc <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003d12:	3b01      	subs	r3, #1
 8003d14:	009b      	lsls	r3, r3, #2
 8003d16:	4413      	add	r3, r2
 8003d18:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003d1a:	69bb      	ldr	r3, [r7, #24]
 8003d1c:	f023 0307 	bic.w	r3, r3, #7
 8003d20:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003d22:	69bb      	ldr	r3, [r7, #24]
 8003d24:	f003 0307 	and.w	r3, r3, #7
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d00a      	beq.n	8003d42 <prvInitialiseNewTask+0x58>
        __asm volatile
 8003d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d30:	f383 8811 	msr	BASEPRI, r3
 8003d34:	f3bf 8f6f 	isb	sy
 8003d38:	f3bf 8f4f 	dsb	sy
 8003d3c:	617b      	str	r3, [r7, #20]
    }
 8003d3e:	bf00      	nop
 8003d40:	e7fe      	b.n	8003d40 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d01f      	beq.n	8003d88 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003d48:	2300      	movs	r3, #0
 8003d4a:	61fb      	str	r3, [r7, #28]
 8003d4c:	e012      	b.n	8003d74 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003d4e:	68ba      	ldr	r2, [r7, #8]
 8003d50:	69fb      	ldr	r3, [r7, #28]
 8003d52:	4413      	add	r3, r2
 8003d54:	7819      	ldrb	r1, [r3, #0]
 8003d56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d58:	69fb      	ldr	r3, [r7, #28]
 8003d5a:	4413      	add	r3, r2
 8003d5c:	3334      	adds	r3, #52	; 0x34
 8003d5e:	460a      	mov	r2, r1
 8003d60:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8003d62:	68ba      	ldr	r2, [r7, #8]
 8003d64:	69fb      	ldr	r3, [r7, #28]
 8003d66:	4413      	add	r3, r2
 8003d68:	781b      	ldrb	r3, [r3, #0]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d006      	beq.n	8003d7c <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003d6e:	69fb      	ldr	r3, [r7, #28]
 8003d70:	3301      	adds	r3, #1
 8003d72:	61fb      	str	r3, [r7, #28]
 8003d74:	69fb      	ldr	r3, [r7, #28]
 8003d76:	2b09      	cmp	r3, #9
 8003d78:	d9e9      	bls.n	8003d4e <prvInitialiseNewTask+0x64>
 8003d7a:	e000      	b.n	8003d7e <prvInitialiseNewTask+0x94>
            {
                break;
 8003d7c:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d80:	2200      	movs	r2, #0
 8003d82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003d86:	e003      	b.n	8003d90 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d92:	2b04      	cmp	r3, #4
 8003d94:	d901      	bls.n	8003d9a <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003d96:	2304      	movs	r3, #4
 8003d98:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8003d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d9e:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8003da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003da2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003da4:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8003da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003da8:	2200      	movs	r2, #0
 8003daa:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dae:	3304      	adds	r3, #4
 8003db0:	4618      	mov	r0, r3
 8003db2:	f7ff f946 	bl	8003042 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003db8:	3318      	adds	r3, #24
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f7ff f941 	bl	8003042 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dc2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003dc4:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dc8:	f1c3 0205 	rsb	r2, r3, #5
 8003dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dce:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003dd4:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif /* portCRITICAL_NESTING_IN_TCB */

    #if ( configUSE_APPLICATION_TASK_TAG == 1 )
        {
            pxNewTCB->pxTaskTag = NULL;
 8003dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dd8:	2200      	movs	r2, #0
 8003dda:	651a      	str	r2, [r3, #80]	; 0x50
        }
    #endif /* configUSE_APPLICATION_TASK_TAG */

    #if ( configGENERATE_RUN_TIME_STATS == 1 )
        {
            pxNewTCB->ulRunTimeCounter = 0UL;
 8003ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dde:	2200      	movs	r2, #0
 8003de0:	65da      	str	r2, [r3, #92]	; 0x5c
        }
    #endif

    #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
        {
            memset( ( void * ) &( pxNewTCB->pvThreadLocalStoragePointers[ 0 ] ), 0x00, sizeof( pxNewTCB->pvThreadLocalStoragePointers ) );
 8003de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003de4:	3354      	adds	r3, #84	; 0x54
 8003de6:	2208      	movs	r2, #8
 8003de8:	2100      	movs	r1, #0
 8003dea:	4618      	mov	r0, r3
 8003dec:	f001 fd06 	bl	80057fc <memset>
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8003df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003df2:	3360      	adds	r3, #96	; 0x60
 8003df4:	2204      	movs	r2, #4
 8003df6:	2100      	movs	r1, #0
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f001 fcff 	bl	80057fc <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8003dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e00:	3364      	adds	r3, #100	; 0x64
 8003e02:	2201      	movs	r2, #1
 8003e04:	2100      	movs	r1, #0
 8003e06:	4618      	mov	r0, r3
 8003e08:	f001 fcf8 	bl	80057fc <memset>
        }
    #endif

    #if ( INCLUDE_xTaskAbortDelay == 1 )
        {
            pxNewTCB->ucDelayAborted = pdFALSE;
 8003e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e0e:	2200      	movs	r2, #0
 8003e10:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003e14:	683a      	ldr	r2, [r7, #0]
 8003e16:	68f9      	ldr	r1, [r7, #12]
 8003e18:	69b8      	ldr	r0, [r7, #24]
 8003e1a:	f001 f8c1 	bl	8004fa0 <pxPortInitialiseStack>
 8003e1e:	4602      	mov	r2, r0
 8003e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e22:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8003e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d002      	beq.n	8003e30 <prvInitialiseNewTask+0x146>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e2e:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003e30:	bf00      	nop
 8003e32:	3720      	adds	r7, #32
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}

08003e38 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b082      	sub	sp, #8
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8003e40:	f001 f9da 	bl	80051f8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8003e44:	4b2c      	ldr	r3, [pc, #176]	; (8003ef8 <prvAddNewTaskToReadyList+0xc0>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	3301      	adds	r3, #1
 8003e4a:	4a2b      	ldr	r2, [pc, #172]	; (8003ef8 <prvAddNewTaskToReadyList+0xc0>)
 8003e4c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8003e4e:	4b2b      	ldr	r3, [pc, #172]	; (8003efc <prvAddNewTaskToReadyList+0xc4>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d109      	bne.n	8003e6a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8003e56:	4a29      	ldr	r2, [pc, #164]	; (8003efc <prvAddNewTaskToReadyList+0xc4>)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003e5c:	4b26      	ldr	r3, [pc, #152]	; (8003ef8 <prvAddNewTaskToReadyList+0xc0>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d110      	bne.n	8003e86 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8003e64:	f000 fbee 	bl	8004644 <prvInitialiseTaskLists>
 8003e68:	e00d      	b.n	8003e86 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8003e6a:	4b25      	ldr	r3, [pc, #148]	; (8003f00 <prvAddNewTaskToReadyList+0xc8>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d109      	bne.n	8003e86 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003e72:	4b22      	ldr	r3, [pc, #136]	; (8003efc <prvAddNewTaskToReadyList+0xc4>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d802      	bhi.n	8003e86 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8003e80:	4a1e      	ldr	r2, [pc, #120]	; (8003efc <prvAddNewTaskToReadyList+0xc4>)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8003e86:	4b1f      	ldr	r3, [pc, #124]	; (8003f04 <prvAddNewTaskToReadyList+0xcc>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	3301      	adds	r3, #1
 8003e8c:	4a1d      	ldr	r2, [pc, #116]	; (8003f04 <prvAddNewTaskToReadyList+0xcc>)
 8003e8e:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003e90:	4b1c      	ldr	r3, [pc, #112]	; (8003f04 <prvAddNewTaskToReadyList+0xcc>)
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	409a      	lsls	r2, r3
 8003ea0:	4b19      	ldr	r3, [pc, #100]	; (8003f08 <prvAddNewTaskToReadyList+0xd0>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	4a18      	ldr	r2, [pc, #96]	; (8003f08 <prvAddNewTaskToReadyList+0xd0>)
 8003ea8:	6013      	str	r3, [r2, #0]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eae:	4613      	mov	r3, r2
 8003eb0:	009b      	lsls	r3, r3, #2
 8003eb2:	4413      	add	r3, r2
 8003eb4:	009b      	lsls	r3, r3, #2
 8003eb6:	4a15      	ldr	r2, [pc, #84]	; (8003f0c <prvAddNewTaskToReadyList+0xd4>)
 8003eb8:	441a      	add	r2, r3
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	3304      	adds	r3, #4
 8003ebe:	4619      	mov	r1, r3
 8003ec0:	4610      	mov	r0, r2
 8003ec2:	f7ff f8cb 	bl	800305c <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8003ec6:	f001 f9c7 	bl	8005258 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8003eca:	4b0d      	ldr	r3, [pc, #52]	; (8003f00 <prvAddNewTaskToReadyList+0xc8>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d00e      	beq.n	8003ef0 <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003ed2:	4b0a      	ldr	r3, [pc, #40]	; (8003efc <prvAddNewTaskToReadyList+0xc4>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d207      	bcs.n	8003ef0 <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8003ee0:	4b0b      	ldr	r3, [pc, #44]	; (8003f10 <prvAddNewTaskToReadyList+0xd8>)
 8003ee2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ee6:	601a      	str	r2, [r3, #0]
 8003ee8:	f3bf 8f4f 	dsb	sy
 8003eec:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003ef0:	bf00      	nop
 8003ef2:	3708      	adds	r7, #8
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}
 8003ef8:	200001c4 	.word	0x200001c4
 8003efc:	200000ec 	.word	0x200000ec
 8003f00:	200001d0 	.word	0x200001d0
 8003f04:	200001e0 	.word	0x200001e0
 8003f08:	200001cc 	.word	0x200001cc
 8003f0c:	200000f0 	.word	0x200000f0
 8003f10:	e000ed04 	.word	0xe000ed04

08003f14 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b086      	sub	sp, #24
 8003f18:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8003f1a:	4b1f      	ldr	r3, [pc, #124]	; (8003f98 <vTaskStartScheduler+0x84>)
 8003f1c:	9301      	str	r3, [sp, #4]
 8003f1e:	2300      	movs	r3, #0
 8003f20:	9300      	str	r3, [sp, #0]
 8003f22:	2300      	movs	r3, #0
 8003f24:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f28:	491c      	ldr	r1, [pc, #112]	; (8003f9c <vTaskStartScheduler+0x88>)
 8003f2a:	481d      	ldr	r0, [pc, #116]	; (8003fa0 <vTaskStartScheduler+0x8c>)
 8003f2c:	f7ff fe9c 	bl	8003c68 <xTaskCreate>
 8003f30:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d102      	bne.n	8003f3e <vTaskStartScheduler+0x2a>
            {
                xReturn = xTimerCreateTimerTask();
 8003f38:	f000 fd20 	bl	800497c <xTimerCreateTimerTask>
 8003f3c:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d116      	bne.n	8003f72 <vTaskStartScheduler+0x5e>
        __asm volatile
 8003f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f48:	f383 8811 	msr	BASEPRI, r3
 8003f4c:	f3bf 8f6f 	isb	sy
 8003f50:	f3bf 8f4f 	dsb	sy
 8003f54:	60bb      	str	r3, [r7, #8]
    }
 8003f56:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8003f58:	4b12      	ldr	r3, [pc, #72]	; (8003fa4 <vTaskStartScheduler+0x90>)
 8003f5a:	f04f 32ff 	mov.w	r2, #4294967295
 8003f5e:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8003f60:	4b11      	ldr	r3, [pc, #68]	; (8003fa8 <vTaskStartScheduler+0x94>)
 8003f62:	2201      	movs	r2, #1
 8003f64:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003f66:	4b11      	ldr	r3, [pc, #68]	; (8003fac <vTaskStartScheduler+0x98>)
 8003f68:	2200      	movs	r2, #0
 8003f6a:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8003f6c:	f001 f8a2 	bl	80050b4 <xPortStartScheduler>
    }

    /* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;
}
 8003f70:	e00e      	b.n	8003f90 <vTaskStartScheduler+0x7c>
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f78:	d10a      	bne.n	8003f90 <vTaskStartScheduler+0x7c>
        __asm volatile
 8003f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f7e:	f383 8811 	msr	BASEPRI, r3
 8003f82:	f3bf 8f6f 	isb	sy
 8003f86:	f3bf 8f4f 	dsb	sy
 8003f8a:	607b      	str	r3, [r7, #4]
    }
 8003f8c:	bf00      	nop
 8003f8e:	e7fe      	b.n	8003f8e <vTaskStartScheduler+0x7a>
}
 8003f90:	bf00      	nop
 8003f92:	3710      	adds	r7, #16
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}
 8003f98:	200001e8 	.word	0x200001e8
 8003f9c:	080058ac 	.word	0x080058ac
 8003fa0:	08004615 	.word	0x08004615
 8003fa4:	200001e4 	.word	0x200001e4
 8003fa8:	200001d0 	.word	0x200001d0
 8003fac:	200001c8 	.word	0x200001c8

08003fb0 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003fb4:	4b04      	ldr	r3, [pc, #16]	; (8003fc8 <vTaskSuspendAll+0x18>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	3301      	adds	r3, #1
 8003fba:	4a03      	ldr	r2, [pc, #12]	; (8003fc8 <vTaskSuspendAll+0x18>)
 8003fbc:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8003fbe:	bf00      	nop
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr
 8003fc8:	200001ec 	.word	0x200001ec

08003fcc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b084      	sub	sp, #16
 8003fd0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8003fda:	4b41      	ldr	r3, [pc, #260]	; (80040e0 <xTaskResumeAll+0x114>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d10a      	bne.n	8003ff8 <xTaskResumeAll+0x2c>
        __asm volatile
 8003fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fe6:	f383 8811 	msr	BASEPRI, r3
 8003fea:	f3bf 8f6f 	isb	sy
 8003fee:	f3bf 8f4f 	dsb	sy
 8003ff2:	603b      	str	r3, [r7, #0]
    }
 8003ff4:	bf00      	nop
 8003ff6:	e7fe      	b.n	8003ff6 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8003ff8:	f001 f8fe 	bl	80051f8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8003ffc:	4b38      	ldr	r3, [pc, #224]	; (80040e0 <xTaskResumeAll+0x114>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	3b01      	subs	r3, #1
 8004002:	4a37      	ldr	r2, [pc, #220]	; (80040e0 <xTaskResumeAll+0x114>)
 8004004:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004006:	4b36      	ldr	r3, [pc, #216]	; (80040e0 <xTaskResumeAll+0x114>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d161      	bne.n	80040d2 <xTaskResumeAll+0x106>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800400e:	4b35      	ldr	r3, [pc, #212]	; (80040e4 <xTaskResumeAll+0x118>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d05d      	beq.n	80040d2 <xTaskResumeAll+0x106>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004016:	e02e      	b.n	8004076 <xTaskResumeAll+0xaa>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004018:	4b33      	ldr	r3, [pc, #204]	; (80040e8 <xTaskResumeAll+0x11c>)
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	68db      	ldr	r3, [r3, #12]
 800401e:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	3318      	adds	r3, #24
 8004024:	4618      	mov	r0, r3
 8004026:	f7ff f876 	bl	8003116 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	3304      	adds	r3, #4
 800402e:	4618      	mov	r0, r3
 8004030:	f7ff f871 	bl	8003116 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004038:	2201      	movs	r2, #1
 800403a:	409a      	lsls	r2, r3
 800403c:	4b2b      	ldr	r3, [pc, #172]	; (80040ec <xTaskResumeAll+0x120>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4313      	orrs	r3, r2
 8004042:	4a2a      	ldr	r2, [pc, #168]	; (80040ec <xTaskResumeAll+0x120>)
 8004044:	6013      	str	r3, [r2, #0]
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800404a:	4613      	mov	r3, r2
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	4413      	add	r3, r2
 8004050:	009b      	lsls	r3, r3, #2
 8004052:	4a27      	ldr	r2, [pc, #156]	; (80040f0 <xTaskResumeAll+0x124>)
 8004054:	441a      	add	r2, r3
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	3304      	adds	r3, #4
 800405a:	4619      	mov	r1, r3
 800405c:	4610      	mov	r0, r2
 800405e:	f7fe fffd 	bl	800305c <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004066:	4b23      	ldr	r3, [pc, #140]	; (80040f4 <xTaskResumeAll+0x128>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800406c:	429a      	cmp	r2, r3
 800406e:	d302      	bcc.n	8004076 <xTaskResumeAll+0xaa>
                    {
                        xYieldPending = pdTRUE;
 8004070:	4b21      	ldr	r3, [pc, #132]	; (80040f8 <xTaskResumeAll+0x12c>)
 8004072:	2201      	movs	r2, #1
 8004074:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004076:	4b1c      	ldr	r3, [pc, #112]	; (80040e8 <xTaskResumeAll+0x11c>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d1cc      	bne.n	8004018 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d001      	beq.n	8004088 <xTaskResumeAll+0xbc>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8004084:	f000 fb5c 	bl	8004740 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004088:	4b1c      	ldr	r3, [pc, #112]	; (80040fc <xTaskResumeAll+0x130>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d010      	beq.n	80040b6 <xTaskResumeAll+0xea>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8004094:	f000 f846 	bl	8004124 <xTaskIncrementTick>
 8004098:	4603      	mov	r3, r0
 800409a:	2b00      	cmp	r3, #0
 800409c:	d002      	beq.n	80040a4 <xTaskResumeAll+0xd8>
                            {
                                xYieldPending = pdTRUE;
 800409e:	4b16      	ldr	r3, [pc, #88]	; (80040f8 <xTaskResumeAll+0x12c>)
 80040a0:	2201      	movs	r2, #1
 80040a2:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	3b01      	subs	r3, #1
 80040a8:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d1f1      	bne.n	8004094 <xTaskResumeAll+0xc8>

                        xPendedTicks = 0;
 80040b0:	4b12      	ldr	r3, [pc, #72]	; (80040fc <xTaskResumeAll+0x130>)
 80040b2:	2200      	movs	r2, #0
 80040b4:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80040b6:	4b10      	ldr	r3, [pc, #64]	; (80040f8 <xTaskResumeAll+0x12c>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d009      	beq.n	80040d2 <xTaskResumeAll+0x106>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80040be:	2301      	movs	r3, #1
 80040c0:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80040c2:	4b0f      	ldr	r3, [pc, #60]	; (8004100 <xTaskResumeAll+0x134>)
 80040c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040c8:	601a      	str	r2, [r3, #0]
 80040ca:	f3bf 8f4f 	dsb	sy
 80040ce:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80040d2:	f001 f8c1 	bl	8005258 <vPortExitCritical>

    return xAlreadyYielded;
 80040d6:	68bb      	ldr	r3, [r7, #8]
}
 80040d8:	4618      	mov	r0, r3
 80040da:	3710      	adds	r7, #16
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}
 80040e0:	200001ec 	.word	0x200001ec
 80040e4:	200001c4 	.word	0x200001c4
 80040e8:	20000184 	.word	0x20000184
 80040ec:	200001cc 	.word	0x200001cc
 80040f0:	200000f0 	.word	0x200000f0
 80040f4:	200000ec 	.word	0x200000ec
 80040f8:	200001d8 	.word	0x200001d8
 80040fc:	200001d4 	.word	0x200001d4
 8004100:	e000ed04 	.word	0xe000ed04

08004104 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004104:	b480      	push	{r7}
 8004106:	b083      	sub	sp, #12
 8004108:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800410a:	4b05      	ldr	r3, [pc, #20]	; (8004120 <xTaskGetTickCount+0x1c>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8004110:	687b      	ldr	r3, [r7, #4]
}
 8004112:	4618      	mov	r0, r3
 8004114:	370c      	adds	r7, #12
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr
 800411e:	bf00      	nop
 8004120:	200001c8 	.word	0x200001c8

08004124 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b086      	sub	sp, #24
 8004128:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800412a:	2300      	movs	r3, #0
 800412c:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800412e:	4b4e      	ldr	r3, [pc, #312]	; (8004268 <xTaskIncrementTick+0x144>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	2b00      	cmp	r3, #0
 8004134:	f040 808e 	bne.w	8004254 <xTaskIncrementTick+0x130>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004138:	4b4c      	ldr	r3, [pc, #304]	; (800426c <xTaskIncrementTick+0x148>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	3301      	adds	r3, #1
 800413e:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8004140:	4a4a      	ldr	r2, [pc, #296]	; (800426c <xTaskIncrementTick+0x148>)
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d120      	bne.n	800418e <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 800414c:	4b48      	ldr	r3, [pc, #288]	; (8004270 <xTaskIncrementTick+0x14c>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d00a      	beq.n	800416c <xTaskIncrementTick+0x48>
        __asm volatile
 8004156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800415a:	f383 8811 	msr	BASEPRI, r3
 800415e:	f3bf 8f6f 	isb	sy
 8004162:	f3bf 8f4f 	dsb	sy
 8004166:	603b      	str	r3, [r7, #0]
    }
 8004168:	bf00      	nop
 800416a:	e7fe      	b.n	800416a <xTaskIncrementTick+0x46>
 800416c:	4b40      	ldr	r3, [pc, #256]	; (8004270 <xTaskIncrementTick+0x14c>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	60fb      	str	r3, [r7, #12]
 8004172:	4b40      	ldr	r3, [pc, #256]	; (8004274 <xTaskIncrementTick+0x150>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a3e      	ldr	r2, [pc, #248]	; (8004270 <xTaskIncrementTick+0x14c>)
 8004178:	6013      	str	r3, [r2, #0]
 800417a:	4a3e      	ldr	r2, [pc, #248]	; (8004274 <xTaskIncrementTick+0x150>)
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	6013      	str	r3, [r2, #0]
 8004180:	4b3d      	ldr	r3, [pc, #244]	; (8004278 <xTaskIncrementTick+0x154>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	3301      	adds	r3, #1
 8004186:	4a3c      	ldr	r2, [pc, #240]	; (8004278 <xTaskIncrementTick+0x154>)
 8004188:	6013      	str	r3, [r2, #0]
 800418a:	f000 fad9 	bl	8004740 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800418e:	4b3b      	ldr	r3, [pc, #236]	; (800427c <xTaskIncrementTick+0x158>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	693a      	ldr	r2, [r7, #16]
 8004194:	429a      	cmp	r2, r3
 8004196:	d348      	bcc.n	800422a <xTaskIncrementTick+0x106>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004198:	4b35      	ldr	r3, [pc, #212]	; (8004270 <xTaskIncrementTick+0x14c>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d104      	bne.n	80041ac <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041a2:	4b36      	ldr	r3, [pc, #216]	; (800427c <xTaskIncrementTick+0x158>)
 80041a4:	f04f 32ff 	mov.w	r2, #4294967295
 80041a8:	601a      	str	r2, [r3, #0]
                    break;
 80041aa:	e03e      	b.n	800422a <xTaskIncrementTick+0x106>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041ac:	4b30      	ldr	r3, [pc, #192]	; (8004270 <xTaskIncrementTick+0x14c>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	68db      	ldr	r3, [r3, #12]
 80041b2:	68db      	ldr	r3, [r3, #12]
 80041b4:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 80041bc:	693a      	ldr	r2, [r7, #16]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d203      	bcs.n	80041cc <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80041c4:	4a2d      	ldr	r2, [pc, #180]	; (800427c <xTaskIncrementTick+0x158>)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80041ca:	e02e      	b.n	800422a <xTaskIncrementTick+0x106>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	3304      	adds	r3, #4
 80041d0:	4618      	mov	r0, r3
 80041d2:	f7fe ffa0 	bl	8003116 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d004      	beq.n	80041e8 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	3318      	adds	r3, #24
 80041e2:	4618      	mov	r0, r3
 80041e4:	f7fe ff97 	bl	8003116 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ec:	2201      	movs	r2, #1
 80041ee:	409a      	lsls	r2, r3
 80041f0:	4b23      	ldr	r3, [pc, #140]	; (8004280 <xTaskIncrementTick+0x15c>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	4a22      	ldr	r2, [pc, #136]	; (8004280 <xTaskIncrementTick+0x15c>)
 80041f8:	6013      	str	r3, [r2, #0]
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041fe:	4613      	mov	r3, r2
 8004200:	009b      	lsls	r3, r3, #2
 8004202:	4413      	add	r3, r2
 8004204:	009b      	lsls	r3, r3, #2
 8004206:	4a1f      	ldr	r2, [pc, #124]	; (8004284 <xTaskIncrementTick+0x160>)
 8004208:	441a      	add	r2, r3
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	3304      	adds	r3, #4
 800420e:	4619      	mov	r1, r3
 8004210:	4610      	mov	r0, r2
 8004212:	f7fe ff23 	bl	800305c <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800421a:	4b1b      	ldr	r3, [pc, #108]	; (8004288 <xTaskIncrementTick+0x164>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004220:	429a      	cmp	r2, r3
 8004222:	d3b9      	bcc.n	8004198 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8004224:	2301      	movs	r3, #1
 8004226:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004228:	e7b6      	b.n	8004198 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800422a:	4b17      	ldr	r3, [pc, #92]	; (8004288 <xTaskIncrementTick+0x164>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004230:	4914      	ldr	r1, [pc, #80]	; (8004284 <xTaskIncrementTick+0x160>)
 8004232:	4613      	mov	r3, r2
 8004234:	009b      	lsls	r3, r3, #2
 8004236:	4413      	add	r3, r2
 8004238:	009b      	lsls	r3, r3, #2
 800423a:	440b      	add	r3, r1
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	2b01      	cmp	r3, #1
 8004240:	d901      	bls.n	8004246 <xTaskIncrementTick+0x122>
                {
                    xSwitchRequired = pdTRUE;
 8004242:	2301      	movs	r3, #1
 8004244:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8004246:	4b11      	ldr	r3, [pc, #68]	; (800428c <xTaskIncrementTick+0x168>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d007      	beq.n	800425e <xTaskIncrementTick+0x13a>
                {
                    xSwitchRequired = pdTRUE;
 800424e:	2301      	movs	r3, #1
 8004250:	617b      	str	r3, [r7, #20]
 8004252:	e004      	b.n	800425e <xTaskIncrementTick+0x13a>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8004254:	4b0e      	ldr	r3, [pc, #56]	; (8004290 <xTaskIncrementTick+0x16c>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	3301      	adds	r3, #1
 800425a:	4a0d      	ldr	r2, [pc, #52]	; (8004290 <xTaskIncrementTick+0x16c>)
 800425c:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 800425e:	697b      	ldr	r3, [r7, #20]
}
 8004260:	4618      	mov	r0, r3
 8004262:	3718      	adds	r7, #24
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}
 8004268:	200001ec 	.word	0x200001ec
 800426c:	200001c8 	.word	0x200001c8
 8004270:	2000017c 	.word	0x2000017c
 8004274:	20000180 	.word	0x20000180
 8004278:	200001dc 	.word	0x200001dc
 800427c:	200001e4 	.word	0x200001e4
 8004280:	200001cc 	.word	0x200001cc
 8004284:	200000f0 	.word	0x200000f0
 8004288:	200000ec 	.word	0x200000ec
 800428c:	200001d8 	.word	0x200001d8
 8004290:	200001d4 	.word	0x200001d4

08004294 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004294:	b480      	push	{r7}
 8004296:	b087      	sub	sp, #28
 8004298:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800429a:	4b32      	ldr	r3, [pc, #200]	; (8004364 <vTaskSwitchContext+0xd0>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d003      	beq.n	80042aa <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80042a2:	4b31      	ldr	r3, [pc, #196]	; (8004368 <vTaskSwitchContext+0xd4>)
 80042a4:	2201      	movs	r2, #1
 80042a6:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80042a8:	e056      	b.n	8004358 <vTaskSwitchContext+0xc4>
        xYieldPending = pdFALSE;
 80042aa:	4b2f      	ldr	r3, [pc, #188]	; (8004368 <vTaskSwitchContext+0xd4>)
 80042ac:	2200      	movs	r2, #0
 80042ae:	601a      	str	r2, [r3, #0]
                    ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 80042b0:	4b2e      	ldr	r3, [pc, #184]	; (800436c <vTaskSwitchContext+0xd8>)
 80042b2:	2200      	movs	r2, #0
 80042b4:	601a      	str	r2, [r3, #0]
                if( ulTotalRunTime > ulTaskSwitchedInTime )
 80042b6:	4b2d      	ldr	r3, [pc, #180]	; (800436c <vTaskSwitchContext+0xd8>)
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	4b2d      	ldr	r3, [pc, #180]	; (8004370 <vTaskSwitchContext+0xdc>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	429a      	cmp	r2, r3
 80042c0:	d909      	bls.n	80042d6 <vTaskSwitchContext+0x42>
                    pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 80042c2:	4b2a      	ldr	r3, [pc, #168]	; (800436c <vTaskSwitchContext+0xd8>)
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	4b2a      	ldr	r3, [pc, #168]	; (8004370 <vTaskSwitchContext+0xdc>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	1ad1      	subs	r1, r2, r3
 80042cc:	4b29      	ldr	r3, [pc, #164]	; (8004374 <vTaskSwitchContext+0xe0>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80042d2:	440a      	add	r2, r1
 80042d4:	65da      	str	r2, [r3, #92]	; 0x5c
                ulTaskSwitchedInTime = ulTotalRunTime;
 80042d6:	4b25      	ldr	r3, [pc, #148]	; (800436c <vTaskSwitchContext+0xd8>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a25      	ldr	r2, [pc, #148]	; (8004370 <vTaskSwitchContext+0xdc>)
 80042dc:	6013      	str	r3, [r2, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042de:	4b26      	ldr	r3, [pc, #152]	; (8004378 <vTaskSwitchContext+0xe4>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	fab3 f383 	clz	r3, r3
 80042ea:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80042ec:	7afb      	ldrb	r3, [r7, #11]
 80042ee:	f1c3 031f 	rsb	r3, r3, #31
 80042f2:	617b      	str	r3, [r7, #20]
 80042f4:	4921      	ldr	r1, [pc, #132]	; (800437c <vTaskSwitchContext+0xe8>)
 80042f6:	697a      	ldr	r2, [r7, #20]
 80042f8:	4613      	mov	r3, r2
 80042fa:	009b      	lsls	r3, r3, #2
 80042fc:	4413      	add	r3, r2
 80042fe:	009b      	lsls	r3, r3, #2
 8004300:	440b      	add	r3, r1
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d10a      	bne.n	800431e <vTaskSwitchContext+0x8a>
        __asm volatile
 8004308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800430c:	f383 8811 	msr	BASEPRI, r3
 8004310:	f3bf 8f6f 	isb	sy
 8004314:	f3bf 8f4f 	dsb	sy
 8004318:	607b      	str	r3, [r7, #4]
    }
 800431a:	bf00      	nop
 800431c:	e7fe      	b.n	800431c <vTaskSwitchContext+0x88>
 800431e:	697a      	ldr	r2, [r7, #20]
 8004320:	4613      	mov	r3, r2
 8004322:	009b      	lsls	r3, r3, #2
 8004324:	4413      	add	r3, r2
 8004326:	009b      	lsls	r3, r3, #2
 8004328:	4a14      	ldr	r2, [pc, #80]	; (800437c <vTaskSwitchContext+0xe8>)
 800432a:	4413      	add	r3, r2
 800432c:	613b      	str	r3, [r7, #16]
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	685a      	ldr	r2, [r3, #4]
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	605a      	str	r2, [r3, #4]
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	685a      	ldr	r2, [r3, #4]
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	3308      	adds	r3, #8
 8004340:	429a      	cmp	r2, r3
 8004342:	d104      	bne.n	800434e <vTaskSwitchContext+0xba>
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	685a      	ldr	r2, [r3, #4]
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	605a      	str	r2, [r3, #4]
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	4a07      	ldr	r2, [pc, #28]	; (8004374 <vTaskSwitchContext+0xe0>)
 8004356:	6013      	str	r3, [r2, #0]
}
 8004358:	bf00      	nop
 800435a:	371c      	adds	r7, #28
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr
 8004364:	200001ec 	.word	0x200001ec
 8004368:	200001d8 	.word	0x200001d8
 800436c:	200001f4 	.word	0x200001f4
 8004370:	200001f0 	.word	0x200001f0
 8004374:	200000ec 	.word	0x200000ec
 8004378:	200001cc 	.word	0x200001cc
 800437c:	200000f0 	.word	0x200000f0

08004380 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b084      	sub	sp, #16
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
 8004388:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d10a      	bne.n	80043a6 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8004390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004394:	f383 8811 	msr	BASEPRI, r3
 8004398:	f3bf 8f6f 	isb	sy
 800439c:	f3bf 8f4f 	dsb	sy
 80043a0:	60fb      	str	r3, [r7, #12]
    }
 80043a2:	bf00      	nop
 80043a4:	e7fe      	b.n	80043a4 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80043a6:	4b07      	ldr	r3, [pc, #28]	; (80043c4 <vTaskPlaceOnEventList+0x44>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	3318      	adds	r3, #24
 80043ac:	4619      	mov	r1, r3
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f7fe fe78 	bl	80030a4 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80043b4:	2101      	movs	r1, #1
 80043b6:	6838      	ldr	r0, [r7, #0]
 80043b8:	f000 fa76 	bl	80048a8 <prvAddCurrentTaskToDelayedList>
}
 80043bc:	bf00      	nop
 80043be:	3710      	adds	r7, #16
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}
 80043c4:	200000ec 	.word	0x200000ec

080043c8 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b086      	sub	sp, #24
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	60f8      	str	r0, [r7, #12]
 80043d0:	60b9      	str	r1, [r7, #8]
 80043d2:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d10a      	bne.n	80043f0 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 80043da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043de:	f383 8811 	msr	BASEPRI, r3
 80043e2:	f3bf 8f6f 	isb	sy
 80043e6:	f3bf 8f4f 	dsb	sy
 80043ea:	617b      	str	r3, [r7, #20]
    }
 80043ec:	bf00      	nop
 80043ee:	e7fe      	b.n	80043ee <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80043f0:	4b0a      	ldr	r3, [pc, #40]	; (800441c <vTaskPlaceOnEventListRestricted+0x54>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	3318      	adds	r3, #24
 80043f6:	4619      	mov	r1, r3
 80043f8:	68f8      	ldr	r0, [r7, #12]
 80043fa:	f7fe fe2f 	bl	800305c <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d002      	beq.n	800440a <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8004404:	f04f 33ff 	mov.w	r3, #4294967295
 8004408:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800440a:	6879      	ldr	r1, [r7, #4]
 800440c:	68b8      	ldr	r0, [r7, #8]
 800440e:	f000 fa4b 	bl	80048a8 <prvAddCurrentTaskToDelayedList>
    }
 8004412:	bf00      	nop
 8004414:	3718      	adds	r7, #24
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}
 800441a:	bf00      	nop
 800441c:	200000ec 	.word	0x200000ec

08004420 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b086      	sub	sp, #24
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	68db      	ldr	r3, [r3, #12]
 800442c:	68db      	ldr	r3, [r3, #12]
 800442e:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d10a      	bne.n	800444c <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8004436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800443a:	f383 8811 	msr	BASEPRI, r3
 800443e:	f3bf 8f6f 	isb	sy
 8004442:	f3bf 8f4f 	dsb	sy
 8004446:	60fb      	str	r3, [r7, #12]
    }
 8004448:	bf00      	nop
 800444a:	e7fe      	b.n	800444a <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	3318      	adds	r3, #24
 8004450:	4618      	mov	r0, r3
 8004452:	f7fe fe60 	bl	8003116 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004456:	4b1d      	ldr	r3, [pc, #116]	; (80044cc <xTaskRemoveFromEventList+0xac>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d11c      	bne.n	8004498 <xTaskRemoveFromEventList+0x78>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	3304      	adds	r3, #4
 8004462:	4618      	mov	r0, r3
 8004464:	f7fe fe57 	bl	8003116 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800446c:	2201      	movs	r2, #1
 800446e:	409a      	lsls	r2, r3
 8004470:	4b17      	ldr	r3, [pc, #92]	; (80044d0 <xTaskRemoveFromEventList+0xb0>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4313      	orrs	r3, r2
 8004476:	4a16      	ldr	r2, [pc, #88]	; (80044d0 <xTaskRemoveFromEventList+0xb0>)
 8004478:	6013      	str	r3, [r2, #0]
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800447e:	4613      	mov	r3, r2
 8004480:	009b      	lsls	r3, r3, #2
 8004482:	4413      	add	r3, r2
 8004484:	009b      	lsls	r3, r3, #2
 8004486:	4a13      	ldr	r2, [pc, #76]	; (80044d4 <xTaskRemoveFromEventList+0xb4>)
 8004488:	441a      	add	r2, r3
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	3304      	adds	r3, #4
 800448e:	4619      	mov	r1, r3
 8004490:	4610      	mov	r0, r2
 8004492:	f7fe fde3 	bl	800305c <vListInsertEnd>
 8004496:	e005      	b.n	80044a4 <xTaskRemoveFromEventList+0x84>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	3318      	adds	r3, #24
 800449c:	4619      	mov	r1, r3
 800449e:	480e      	ldr	r0, [pc, #56]	; (80044d8 <xTaskRemoveFromEventList+0xb8>)
 80044a0:	f7fe fddc 	bl	800305c <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044a8:	4b0c      	ldr	r3, [pc, #48]	; (80044dc <xTaskRemoveFromEventList+0xbc>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ae:	429a      	cmp	r2, r3
 80044b0:	d905      	bls.n	80044be <xTaskRemoveFromEventList+0x9e>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80044b2:	2301      	movs	r3, #1
 80044b4:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80044b6:	4b0a      	ldr	r3, [pc, #40]	; (80044e0 <xTaskRemoveFromEventList+0xc0>)
 80044b8:	2201      	movs	r2, #1
 80044ba:	601a      	str	r2, [r3, #0]
 80044bc:	e001      	b.n	80044c2 <xTaskRemoveFromEventList+0xa2>
    }
    else
    {
        xReturn = pdFALSE;
 80044be:	2300      	movs	r3, #0
 80044c0:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 80044c2:	697b      	ldr	r3, [r7, #20]
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	3718      	adds	r7, #24
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}
 80044cc:	200001ec 	.word	0x200001ec
 80044d0:	200001cc 	.word	0x200001cc
 80044d4:	200000f0 	.word	0x200000f0
 80044d8:	20000184 	.word	0x20000184
 80044dc:	200000ec 	.word	0x200000ec
 80044e0:	200001d8 	.word	0x200001d8

080044e4 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80044e4:	b480      	push	{r7}
 80044e6:	b083      	sub	sp, #12
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80044ec:	4b06      	ldr	r3, [pc, #24]	; (8004508 <vTaskInternalSetTimeOutState+0x24>)
 80044ee:	681a      	ldr	r2, [r3, #0]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80044f4:	4b05      	ldr	r3, [pc, #20]	; (800450c <vTaskInternalSetTimeOutState+0x28>)
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	605a      	str	r2, [r3, #4]
}
 80044fc:	bf00      	nop
 80044fe:	370c      	adds	r7, #12
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr
 8004508:	200001dc 	.word	0x200001dc
 800450c:	200001c8 	.word	0x200001c8

08004510 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b088      	sub	sp, #32
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
 8004518:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d10a      	bne.n	8004536 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8004520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004524:	f383 8811 	msr	BASEPRI, r3
 8004528:	f3bf 8f6f 	isb	sy
 800452c:	f3bf 8f4f 	dsb	sy
 8004530:	613b      	str	r3, [r7, #16]
    }
 8004532:	bf00      	nop
 8004534:	e7fe      	b.n	8004534 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d10a      	bne.n	8004552 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 800453c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004540:	f383 8811 	msr	BASEPRI, r3
 8004544:	f3bf 8f6f 	isb	sy
 8004548:	f3bf 8f4f 	dsb	sy
 800454c:	60fb      	str	r3, [r7, #12]
    }
 800454e:	bf00      	nop
 8004550:	e7fe      	b.n	8004550 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8004552:	f000 fe51 	bl	80051f8 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8004556:	4b26      	ldr	r3, [pc, #152]	; (80045f0 <xTaskCheckForTimeOut+0xe0>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	69ba      	ldr	r2, [r7, #24]
 8004562:	1ad3      	subs	r3, r2, r3
 8004564:	617b      	str	r3, [r7, #20]

        #if ( INCLUDE_xTaskAbortDelay == 1 )
            if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
 8004566:	4b23      	ldr	r3, [pc, #140]	; (80045f4 <xTaskCheckForTimeOut+0xe4>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 800456e:	2b00      	cmp	r3, #0
 8004570:	d007      	beq.n	8004582 <xTaskCheckForTimeOut+0x72>
            {
                /* The delay was aborted, which is not the same as a time out,
                 * but has the same result. */
                pxCurrentTCB->ucDelayAborted = pdFALSE;
 8004572:	4b20      	ldr	r3, [pc, #128]	; (80045f4 <xTaskCheckForTimeOut+0xe4>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	2200      	movs	r2, #0
 8004578:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
                xReturn = pdTRUE;
 800457c:	2301      	movs	r3, #1
 800457e:	61fb      	str	r3, [r7, #28]
 8004580:	e02e      	b.n	80045e0 <xTaskCheckForTimeOut+0xd0>
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f1b3 3fff 	cmp.w	r3, #4294967295
 800458a:	d102      	bne.n	8004592 <xTaskCheckForTimeOut+0x82>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800458c:	2300      	movs	r3, #0
 800458e:	61fb      	str	r3, [r7, #28]
 8004590:	e026      	b.n	80045e0 <xTaskCheckForTimeOut+0xd0>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	4b18      	ldr	r3, [pc, #96]	; (80045f8 <xTaskCheckForTimeOut+0xe8>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	429a      	cmp	r2, r3
 800459c:	d00a      	beq.n	80045b4 <xTaskCheckForTimeOut+0xa4>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	69ba      	ldr	r2, [r7, #24]
 80045a4:	429a      	cmp	r2, r3
 80045a6:	d305      	bcc.n	80045b4 <xTaskCheckForTimeOut+0xa4>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80045a8:	2301      	movs	r3, #1
 80045aa:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	2200      	movs	r2, #0
 80045b0:	601a      	str	r2, [r3, #0]
 80045b2:	e015      	b.n	80045e0 <xTaskCheckForTimeOut+0xd0>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	697a      	ldr	r2, [r7, #20]
 80045ba:	429a      	cmp	r2, r3
 80045bc:	d20b      	bcs.n	80045d6 <xTaskCheckForTimeOut+0xc6>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	1ad2      	subs	r2, r2, r3
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f7ff ff8a 	bl	80044e4 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80045d0:	2300      	movs	r3, #0
 80045d2:	61fb      	str	r3, [r7, #28]
 80045d4:	e004      	b.n	80045e0 <xTaskCheckForTimeOut+0xd0>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	2200      	movs	r2, #0
 80045da:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80045dc:	2301      	movs	r3, #1
 80045de:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80045e0:	f000 fe3a 	bl	8005258 <vPortExitCritical>

    return xReturn;
 80045e4:	69fb      	ldr	r3, [r7, #28]
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3720      	adds	r7, #32
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}
 80045ee:	bf00      	nop
 80045f0:	200001c8 	.word	0x200001c8
 80045f4:	200000ec 	.word	0x200000ec
 80045f8:	200001dc 	.word	0x200001dc

080045fc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80045fc:	b480      	push	{r7}
 80045fe:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8004600:	4b03      	ldr	r3, [pc, #12]	; (8004610 <vTaskMissedYield+0x14>)
 8004602:	2201      	movs	r2, #1
 8004604:	601a      	str	r2, [r3, #0]
}
 8004606:	bf00      	nop
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr
 8004610:	200001d8 	.word	0x200001d8

08004614 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b082      	sub	sp, #8
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800461c:	f000 f852 	bl	80046c4 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004620:	4b06      	ldr	r3, [pc, #24]	; (800463c <prvIdleTask+0x28>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	2b01      	cmp	r3, #1
 8004626:	d9f9      	bls.n	800461c <prvIdleTask+0x8>
                {
                    taskYIELD();
 8004628:	4b05      	ldr	r3, [pc, #20]	; (8004640 <prvIdleTask+0x2c>)
 800462a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800462e:	601a      	str	r2, [r3, #0]
 8004630:	f3bf 8f4f 	dsb	sy
 8004634:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8004638:	e7f0      	b.n	800461c <prvIdleTask+0x8>
 800463a:	bf00      	nop
 800463c:	200000f0 	.word	0x200000f0
 8004640:	e000ed04 	.word	0xe000ed04

08004644 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b082      	sub	sp, #8
 8004648:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800464a:	2300      	movs	r3, #0
 800464c:	607b      	str	r3, [r7, #4]
 800464e:	e00c      	b.n	800466a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004650:	687a      	ldr	r2, [r7, #4]
 8004652:	4613      	mov	r3, r2
 8004654:	009b      	lsls	r3, r3, #2
 8004656:	4413      	add	r3, r2
 8004658:	009b      	lsls	r3, r3, #2
 800465a:	4a12      	ldr	r2, [pc, #72]	; (80046a4 <prvInitialiseTaskLists+0x60>)
 800465c:	4413      	add	r3, r2
 800465e:	4618      	mov	r0, r3
 8004660:	f7fe fccf 	bl	8003002 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	3301      	adds	r3, #1
 8004668:	607b      	str	r3, [r7, #4]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2b04      	cmp	r3, #4
 800466e:	d9ef      	bls.n	8004650 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8004670:	480d      	ldr	r0, [pc, #52]	; (80046a8 <prvInitialiseTaskLists+0x64>)
 8004672:	f7fe fcc6 	bl	8003002 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8004676:	480d      	ldr	r0, [pc, #52]	; (80046ac <prvInitialiseTaskLists+0x68>)
 8004678:	f7fe fcc3 	bl	8003002 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800467c:	480c      	ldr	r0, [pc, #48]	; (80046b0 <prvInitialiseTaskLists+0x6c>)
 800467e:	f7fe fcc0 	bl	8003002 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8004682:	480c      	ldr	r0, [pc, #48]	; (80046b4 <prvInitialiseTaskLists+0x70>)
 8004684:	f7fe fcbd 	bl	8003002 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8004688:	480b      	ldr	r0, [pc, #44]	; (80046b8 <prvInitialiseTaskLists+0x74>)
 800468a:	f7fe fcba 	bl	8003002 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800468e:	4b0b      	ldr	r3, [pc, #44]	; (80046bc <prvInitialiseTaskLists+0x78>)
 8004690:	4a05      	ldr	r2, [pc, #20]	; (80046a8 <prvInitialiseTaskLists+0x64>)
 8004692:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004694:	4b0a      	ldr	r3, [pc, #40]	; (80046c0 <prvInitialiseTaskLists+0x7c>)
 8004696:	4a05      	ldr	r2, [pc, #20]	; (80046ac <prvInitialiseTaskLists+0x68>)
 8004698:	601a      	str	r2, [r3, #0]
}
 800469a:	bf00      	nop
 800469c:	3708      	adds	r7, #8
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}
 80046a2:	bf00      	nop
 80046a4:	200000f0 	.word	0x200000f0
 80046a8:	20000154 	.word	0x20000154
 80046ac:	20000168 	.word	0x20000168
 80046b0:	20000184 	.word	0x20000184
 80046b4:	20000198 	.word	0x20000198
 80046b8:	200001b0 	.word	0x200001b0
 80046bc:	2000017c 	.word	0x2000017c
 80046c0:	20000180 	.word	0x20000180

080046c4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b082      	sub	sp, #8
 80046c8:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80046ca:	e019      	b.n	8004700 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 80046cc:	f000 fd94 	bl	80051f8 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046d0:	4b10      	ldr	r3, [pc, #64]	; (8004714 <prvCheckTasksWaitingTermination+0x50>)
 80046d2:	68db      	ldr	r3, [r3, #12]
 80046d4:	68db      	ldr	r3, [r3, #12]
 80046d6:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	3304      	adds	r3, #4
 80046dc:	4618      	mov	r0, r3
 80046de:	f7fe fd1a 	bl	8003116 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 80046e2:	4b0d      	ldr	r3, [pc, #52]	; (8004718 <prvCheckTasksWaitingTermination+0x54>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	3b01      	subs	r3, #1
 80046e8:	4a0b      	ldr	r2, [pc, #44]	; (8004718 <prvCheckTasksWaitingTermination+0x54>)
 80046ea:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 80046ec:	4b0b      	ldr	r3, [pc, #44]	; (800471c <prvCheckTasksWaitingTermination+0x58>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	3b01      	subs	r3, #1
 80046f2:	4a0a      	ldr	r2, [pc, #40]	; (800471c <prvCheckTasksWaitingTermination+0x58>)
 80046f4:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 80046f6:	f000 fdaf 	bl	8005258 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f000 f810 	bl	8004720 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004700:	4b06      	ldr	r3, [pc, #24]	; (800471c <prvCheckTasksWaitingTermination+0x58>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d1e1      	bne.n	80046cc <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8004708:	bf00      	nop
 800470a:	bf00      	nop
 800470c:	3708      	adds	r7, #8
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}
 8004712:	bf00      	nop
 8004714:	20000198 	.word	0x20000198
 8004718:	200001c4 	.word	0x200001c4
 800471c:	200001ac 	.word	0x200001ac

08004720 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8004720:	b580      	push	{r7, lr}
 8004722:	b082      	sub	sp, #8
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800472c:	4618      	mov	r0, r3
 800472e:	f000 ff47 	bl	80055c0 <vPortFree>
                vPortFree( pxTCB );
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f000 ff44 	bl	80055c0 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8004738:	bf00      	nop
 800473a:	3708      	adds	r7, #8
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}

08004740 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004740:	b480      	push	{r7}
 8004742:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004744:	4b0a      	ldr	r3, [pc, #40]	; (8004770 <prvResetNextTaskUnblockTime+0x30>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d104      	bne.n	8004758 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800474e:	4b09      	ldr	r3, [pc, #36]	; (8004774 <prvResetNextTaskUnblockTime+0x34>)
 8004750:	f04f 32ff 	mov.w	r2, #4294967295
 8004754:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8004756:	e005      	b.n	8004764 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004758:	4b05      	ldr	r3, [pc, #20]	; (8004770 <prvResetNextTaskUnblockTime+0x30>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	68db      	ldr	r3, [r3, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a04      	ldr	r2, [pc, #16]	; (8004774 <prvResetNextTaskUnblockTime+0x34>)
 8004762:	6013      	str	r3, [r2, #0]
}
 8004764:	bf00      	nop
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr
 800476e:	bf00      	nop
 8004770:	2000017c 	.word	0x2000017c
 8004774:	200001e4 	.word	0x200001e4

08004778 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8004778:	b480      	push	{r7}
 800477a:	b083      	sub	sp, #12
 800477c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800477e:	4b0b      	ldr	r3, [pc, #44]	; (80047ac <xTaskGetSchedulerState+0x34>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d102      	bne.n	800478c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8004786:	2301      	movs	r3, #1
 8004788:	607b      	str	r3, [r7, #4]
 800478a:	e008      	b.n	800479e <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800478c:	4b08      	ldr	r3, [pc, #32]	; (80047b0 <xTaskGetSchedulerState+0x38>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d102      	bne.n	800479a <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8004794:	2302      	movs	r3, #2
 8004796:	607b      	str	r3, [r7, #4]
 8004798:	e001      	b.n	800479e <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800479a:	2300      	movs	r3, #0
 800479c:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800479e:	687b      	ldr	r3, [r7, #4]
    }
 80047a0:	4618      	mov	r0, r3
 80047a2:	370c      	adds	r7, #12
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr
 80047ac:	200001d0 	.word	0x200001d0
 80047b0:	200001ec 	.word	0x200001ec

080047b4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b086      	sub	sp, #24
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 80047c0:	2300      	movs	r3, #0
 80047c2:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d063      	beq.n	8004892 <xTaskPriorityDisinherit+0xde>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 80047ca:	4b34      	ldr	r3, [pc, #208]	; (800489c <xTaskPriorityDisinherit+0xe8>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	693a      	ldr	r2, [r7, #16]
 80047d0:	429a      	cmp	r2, r3
 80047d2:	d00a      	beq.n	80047ea <xTaskPriorityDisinherit+0x36>
        __asm volatile
 80047d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047d8:	f383 8811 	msr	BASEPRI, r3
 80047dc:	f3bf 8f6f 	isb	sy
 80047e0:	f3bf 8f4f 	dsb	sy
 80047e4:	60fb      	str	r3, [r7, #12]
    }
 80047e6:	bf00      	nop
 80047e8:	e7fe      	b.n	80047e8 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d10a      	bne.n	8004808 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 80047f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047f6:	f383 8811 	msr	BASEPRI, r3
 80047fa:	f3bf 8f6f 	isb	sy
 80047fe:	f3bf 8f4f 	dsb	sy
 8004802:	60bb      	str	r3, [r7, #8]
    }
 8004804:	bf00      	nop
 8004806:	e7fe      	b.n	8004806 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800480c:	1e5a      	subs	r2, r3, #1
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800481a:	429a      	cmp	r2, r3
 800481c:	d039      	beq.n	8004892 <xTaskPriorityDisinherit+0xde>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004822:	2b00      	cmp	r3, #0
 8004824:	d135      	bne.n	8004892 <xTaskPriorityDisinherit+0xde>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	3304      	adds	r3, #4
 800482a:	4618      	mov	r0, r3
 800482c:	f7fe fc73 	bl	8003116 <uxListRemove>
 8004830:	4603      	mov	r3, r0
 8004832:	2b00      	cmp	r3, #0
 8004834:	d10a      	bne.n	800484c <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800483a:	2201      	movs	r2, #1
 800483c:	fa02 f303 	lsl.w	r3, r2, r3
 8004840:	43da      	mvns	r2, r3
 8004842:	4b17      	ldr	r3, [pc, #92]	; (80048a0 <xTaskPriorityDisinherit+0xec>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4013      	ands	r3, r2
 8004848:	4a15      	ldr	r2, [pc, #84]	; (80048a0 <xTaskPriorityDisinherit+0xec>)
 800484a:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004858:	f1c3 0205 	rsb	r2, r3, #5
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004864:	2201      	movs	r2, #1
 8004866:	409a      	lsls	r2, r3
 8004868:	4b0d      	ldr	r3, [pc, #52]	; (80048a0 <xTaskPriorityDisinherit+0xec>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4313      	orrs	r3, r2
 800486e:	4a0c      	ldr	r2, [pc, #48]	; (80048a0 <xTaskPriorityDisinherit+0xec>)
 8004870:	6013      	str	r3, [r2, #0]
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004876:	4613      	mov	r3, r2
 8004878:	009b      	lsls	r3, r3, #2
 800487a:	4413      	add	r3, r2
 800487c:	009b      	lsls	r3, r3, #2
 800487e:	4a09      	ldr	r2, [pc, #36]	; (80048a4 <xTaskPriorityDisinherit+0xf0>)
 8004880:	441a      	add	r2, r3
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	3304      	adds	r3, #4
 8004886:	4619      	mov	r1, r3
 8004888:	4610      	mov	r0, r2
 800488a:	f7fe fbe7 	bl	800305c <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800488e:	2301      	movs	r3, #1
 8004890:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8004892:	697b      	ldr	r3, [r7, #20]
    }
 8004894:	4618      	mov	r0, r3
 8004896:	3718      	adds	r7, #24
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}
 800489c:	200000ec 	.word	0x200000ec
 80048a0:	200001cc 	.word	0x200001cc
 80048a4:	200000f0 	.word	0x200000f0

080048a8 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b084      	sub	sp, #16
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
 80048b0:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80048b2:	4b2b      	ldr	r3, [pc, #172]	; (8004960 <prvAddCurrentTaskToDelayedList+0xb8>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	60fb      	str	r3, [r7, #12]
    #if ( INCLUDE_xTaskAbortDelay == 1 )
        {
            /* About to enter a delayed list, so ensure the ucDelayAborted flag is
             * reset to pdFALSE so it can be detected as having been set to pdTRUE
             * when the task leaves the Blocked state. */
            pxCurrentTCB->ucDelayAborted = pdFALSE;
 80048b8:	4b2a      	ldr	r3, [pc, #168]	; (8004964 <prvAddCurrentTaskToDelayedList+0xbc>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	2200      	movs	r2, #0
 80048be:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80048c2:	4b28      	ldr	r3, [pc, #160]	; (8004964 <prvAddCurrentTaskToDelayedList+0xbc>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	3304      	adds	r3, #4
 80048c8:	4618      	mov	r0, r3
 80048ca:	f7fe fc24 	bl	8003116 <uxListRemove>
 80048ce:	4603      	mov	r3, r0
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d10b      	bne.n	80048ec <prvAddCurrentTaskToDelayedList+0x44>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80048d4:	4b23      	ldr	r3, [pc, #140]	; (8004964 <prvAddCurrentTaskToDelayedList+0xbc>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048da:	2201      	movs	r2, #1
 80048dc:	fa02 f303 	lsl.w	r3, r2, r3
 80048e0:	43da      	mvns	r2, r3
 80048e2:	4b21      	ldr	r3, [pc, #132]	; (8004968 <prvAddCurrentTaskToDelayedList+0xc0>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4013      	ands	r3, r2
 80048e8:	4a1f      	ldr	r2, [pc, #124]	; (8004968 <prvAddCurrentTaskToDelayedList+0xc0>)
 80048ea:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048f2:	d10a      	bne.n	800490a <prvAddCurrentTaskToDelayedList+0x62>
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d007      	beq.n	800490a <prvAddCurrentTaskToDelayedList+0x62>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80048fa:	4b1a      	ldr	r3, [pc, #104]	; (8004964 <prvAddCurrentTaskToDelayedList+0xbc>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	3304      	adds	r3, #4
 8004900:	4619      	mov	r1, r3
 8004902:	481a      	ldr	r0, [pc, #104]	; (800496c <prvAddCurrentTaskToDelayedList+0xc4>)
 8004904:	f7fe fbaa 	bl	800305c <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8004908:	e026      	b.n	8004958 <prvAddCurrentTaskToDelayedList+0xb0>
                xTimeToWake = xConstTickCount + xTicksToWait;
 800490a:	68fa      	ldr	r2, [r7, #12]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	4413      	add	r3, r2
 8004910:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004912:	4b14      	ldr	r3, [pc, #80]	; (8004964 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	68ba      	ldr	r2, [r7, #8]
 8004918:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 800491a:	68ba      	ldr	r2, [r7, #8]
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	429a      	cmp	r2, r3
 8004920:	d209      	bcs.n	8004936 <prvAddCurrentTaskToDelayedList+0x8e>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004922:	4b13      	ldr	r3, [pc, #76]	; (8004970 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	4b0f      	ldr	r3, [pc, #60]	; (8004964 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	3304      	adds	r3, #4
 800492c:	4619      	mov	r1, r3
 800492e:	4610      	mov	r0, r2
 8004930:	f7fe fbb8 	bl	80030a4 <vListInsert>
}
 8004934:	e010      	b.n	8004958 <prvAddCurrentTaskToDelayedList+0xb0>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004936:	4b0f      	ldr	r3, [pc, #60]	; (8004974 <prvAddCurrentTaskToDelayedList+0xcc>)
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	4b0a      	ldr	r3, [pc, #40]	; (8004964 <prvAddCurrentTaskToDelayedList+0xbc>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	3304      	adds	r3, #4
 8004940:	4619      	mov	r1, r3
 8004942:	4610      	mov	r0, r2
 8004944:	f7fe fbae 	bl	80030a4 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8004948:	4b0b      	ldr	r3, [pc, #44]	; (8004978 <prvAddCurrentTaskToDelayedList+0xd0>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	68ba      	ldr	r2, [r7, #8]
 800494e:	429a      	cmp	r2, r3
 8004950:	d202      	bcs.n	8004958 <prvAddCurrentTaskToDelayedList+0xb0>
                        xNextTaskUnblockTime = xTimeToWake;
 8004952:	4a09      	ldr	r2, [pc, #36]	; (8004978 <prvAddCurrentTaskToDelayedList+0xd0>)
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	6013      	str	r3, [r2, #0]
}
 8004958:	bf00      	nop
 800495a:	3710      	adds	r7, #16
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}
 8004960:	200001c8 	.word	0x200001c8
 8004964:	200000ec 	.word	0x200000ec
 8004968:	200001cc 	.word	0x200001cc
 800496c:	200001b0 	.word	0x200001b0
 8004970:	20000180 	.word	0x20000180
 8004974:	2000017c 	.word	0x2000017c
 8004978:	200001e4 	.word	0x200001e4

0800497c <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800497c:	b580      	push	{r7, lr}
 800497e:	b084      	sub	sp, #16
 8004980:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8004982:	2300      	movs	r3, #0
 8004984:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8004986:	f000 fad5 	bl	8004f34 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800498a:	4b11      	ldr	r3, [pc, #68]	; (80049d0 <xTimerCreateTimerTask+0x54>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d00b      	beq.n	80049aa <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8004992:	4b10      	ldr	r3, [pc, #64]	; (80049d4 <xTimerCreateTimerTask+0x58>)
 8004994:	9301      	str	r3, [sp, #4]
 8004996:	2302      	movs	r3, #2
 8004998:	9300      	str	r3, [sp, #0]
 800499a:	2300      	movs	r3, #0
 800499c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80049a0:	490d      	ldr	r1, [pc, #52]	; (80049d8 <xTimerCreateTimerTask+0x5c>)
 80049a2:	480e      	ldr	r0, [pc, #56]	; (80049dc <xTimerCreateTimerTask+0x60>)
 80049a4:	f7ff f960 	bl	8003c68 <xTaskCreate>
 80049a8:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d10a      	bne.n	80049c6 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 80049b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049b4:	f383 8811 	msr	BASEPRI, r3
 80049b8:	f3bf 8f6f 	isb	sy
 80049bc:	f3bf 8f4f 	dsb	sy
 80049c0:	603b      	str	r3, [r7, #0]
    }
 80049c2:	bf00      	nop
 80049c4:	e7fe      	b.n	80049c4 <xTimerCreateTimerTask+0x48>
        return xReturn;
 80049c6:	687b      	ldr	r3, [r7, #4]
    }
 80049c8:	4618      	mov	r0, r3
 80049ca:	3708      	adds	r7, #8
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}
 80049d0:	20000228 	.word	0x20000228
 80049d4:	2000022c 	.word	0x2000022c
 80049d8:	080058b4 	.word	0x080058b4
 80049dc:	08004b15 	.word	0x08004b15

080049e0 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b08a      	sub	sp, #40	; 0x28
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	60f8      	str	r0, [r7, #12]
 80049e8:	60b9      	str	r1, [r7, #8]
 80049ea:	607a      	str	r2, [r7, #4]
 80049ec:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 80049ee:	2300      	movs	r3, #0
 80049f0:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d10a      	bne.n	8004a0e <xTimerGenericCommand+0x2e>
        __asm volatile
 80049f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049fc:	f383 8811 	msr	BASEPRI, r3
 8004a00:	f3bf 8f6f 	isb	sy
 8004a04:	f3bf 8f4f 	dsb	sy
 8004a08:	623b      	str	r3, [r7, #32]
    }
 8004a0a:	bf00      	nop
 8004a0c:	e7fe      	b.n	8004a0c <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8004a0e:	4b1a      	ldr	r3, [pc, #104]	; (8004a78 <xTimerGenericCommand+0x98>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d02a      	beq.n	8004a6c <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	2b05      	cmp	r3, #5
 8004a26:	dc18      	bgt.n	8004a5a <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004a28:	f7ff fea6 	bl	8004778 <xTaskGetSchedulerState>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	2b02      	cmp	r3, #2
 8004a30:	d109      	bne.n	8004a46 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004a32:	4b11      	ldr	r3, [pc, #68]	; (8004a78 <xTimerGenericCommand+0x98>)
 8004a34:	6818      	ldr	r0, [r3, #0]
 8004a36:	f107 0114 	add.w	r1, r7, #20
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a3e:	f7fe fc73 	bl	8003328 <xQueueGenericSend>
 8004a42:	6278      	str	r0, [r7, #36]	; 0x24
 8004a44:	e012      	b.n	8004a6c <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004a46:	4b0c      	ldr	r3, [pc, #48]	; (8004a78 <xTimerGenericCommand+0x98>)
 8004a48:	6818      	ldr	r0, [r3, #0]
 8004a4a:	f107 0114 	add.w	r1, r7, #20
 8004a4e:	2300      	movs	r3, #0
 8004a50:	2200      	movs	r2, #0
 8004a52:	f7fe fc69 	bl	8003328 <xQueueGenericSend>
 8004a56:	6278      	str	r0, [r7, #36]	; 0x24
 8004a58:	e008      	b.n	8004a6c <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004a5a:	4b07      	ldr	r3, [pc, #28]	; (8004a78 <xTimerGenericCommand+0x98>)
 8004a5c:	6818      	ldr	r0, [r3, #0]
 8004a5e:	f107 0114 	add.w	r1, r7, #20
 8004a62:	2300      	movs	r3, #0
 8004a64:	683a      	ldr	r2, [r7, #0]
 8004a66:	f7fe fd79 	bl	800355c <xQueueGenericSendFromISR>
 8004a6a:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8004a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3728      	adds	r7, #40	; 0x28
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}
 8004a76:	bf00      	nop
 8004a78:	20000228 	.word	0x20000228

08004a7c <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b088      	sub	sp, #32
 8004a80:	af02      	add	r7, sp, #8
 8004a82:	6078      	str	r0, [r7, #4]
 8004a84:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a86:	4b22      	ldr	r3, [pc, #136]	; (8004b10 <prvProcessExpiredTimer+0x94>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	68db      	ldr	r3, [r3, #12]
 8004a8c:	68db      	ldr	r3, [r3, #12]
 8004a8e:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	3304      	adds	r3, #4
 8004a94:	4618      	mov	r0, r3
 8004a96:	f7fe fb3e 	bl	8003116 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004aa0:	f003 0304 	and.w	r3, r3, #4
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d022      	beq.n	8004aee <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	699a      	ldr	r2, [r3, #24]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	18d1      	adds	r1, r2, r3
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	683a      	ldr	r2, [r7, #0]
 8004ab4:	6978      	ldr	r0, [r7, #20]
 8004ab6:	f000 f8d1 	bl	8004c5c <prvInsertTimerInActiveList>
 8004aba:	4603      	mov	r3, r0
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d01f      	beq.n	8004b00 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	9300      	str	r3, [sp, #0]
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	687a      	ldr	r2, [r7, #4]
 8004ac8:	2100      	movs	r1, #0
 8004aca:	6978      	ldr	r0, [r7, #20]
 8004acc:	f7ff ff88 	bl	80049e0 <xTimerGenericCommand>
 8004ad0:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d113      	bne.n	8004b00 <prvProcessExpiredTimer+0x84>
        __asm volatile
 8004ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004adc:	f383 8811 	msr	BASEPRI, r3
 8004ae0:	f3bf 8f6f 	isb	sy
 8004ae4:	f3bf 8f4f 	dsb	sy
 8004ae8:	60fb      	str	r3, [r7, #12]
    }
 8004aea:	bf00      	nop
 8004aec:	e7fe      	b.n	8004aec <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004af4:	f023 0301 	bic.w	r3, r3, #1
 8004af8:	b2da      	uxtb	r2, r3
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	6a1b      	ldr	r3, [r3, #32]
 8004b04:	6978      	ldr	r0, [r7, #20]
 8004b06:	4798      	blx	r3
    }
 8004b08:	bf00      	nop
 8004b0a:	3718      	adds	r7, #24
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}
 8004b10:	20000220 	.word	0x20000220

08004b14 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b084      	sub	sp, #16
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004b1c:	f107 0308 	add.w	r3, r7, #8
 8004b20:	4618      	mov	r0, r3
 8004b22:	f000 f857 	bl	8004bd4 <prvGetNextExpireTime>
 8004b26:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	4619      	mov	r1, r3
 8004b2c:	68f8      	ldr	r0, [r7, #12]
 8004b2e:	f000 f803 	bl	8004b38 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8004b32:	f000 f8d5 	bl	8004ce0 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004b36:	e7f1      	b.n	8004b1c <prvTimerTask+0x8>

08004b38 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b084      	sub	sp, #16
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
 8004b40:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8004b42:	f7ff fa35 	bl	8003fb0 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004b46:	f107 0308 	add.w	r3, r7, #8
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f000 f866 	bl	8004c1c <prvSampleTimeNow>
 8004b50:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d130      	bne.n	8004bba <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d10a      	bne.n	8004b74 <prvProcessTimerOrBlockTask+0x3c>
 8004b5e:	687a      	ldr	r2, [r7, #4]
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	429a      	cmp	r2, r3
 8004b64:	d806      	bhi.n	8004b74 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8004b66:	f7ff fa31 	bl	8003fcc <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004b6a:	68f9      	ldr	r1, [r7, #12]
 8004b6c:	6878      	ldr	r0, [r7, #4]
 8004b6e:	f7ff ff85 	bl	8004a7c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8004b72:	e024      	b.n	8004bbe <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d008      	beq.n	8004b8c <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004b7a:	4b13      	ldr	r3, [pc, #76]	; (8004bc8 <prvProcessTimerOrBlockTask+0x90>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d101      	bne.n	8004b88 <prvProcessTimerOrBlockTask+0x50>
 8004b84:	2301      	movs	r3, #1
 8004b86:	e000      	b.n	8004b8a <prvProcessTimerOrBlockTask+0x52>
 8004b88:	2300      	movs	r3, #0
 8004b8a:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004b8c:	4b0f      	ldr	r3, [pc, #60]	; (8004bcc <prvProcessTimerOrBlockTask+0x94>)
 8004b8e:	6818      	ldr	r0, [r3, #0]
 8004b90:	687a      	ldr	r2, [r7, #4]
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	1ad3      	subs	r3, r2, r3
 8004b96:	683a      	ldr	r2, [r7, #0]
 8004b98:	4619      	mov	r1, r3
 8004b9a:	f7fe ffc9 	bl	8003b30 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8004b9e:	f7ff fa15 	bl	8003fcc <xTaskResumeAll>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d10a      	bne.n	8004bbe <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8004ba8:	4b09      	ldr	r3, [pc, #36]	; (8004bd0 <prvProcessTimerOrBlockTask+0x98>)
 8004baa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bae:	601a      	str	r2, [r3, #0]
 8004bb0:	f3bf 8f4f 	dsb	sy
 8004bb4:	f3bf 8f6f 	isb	sy
    }
 8004bb8:	e001      	b.n	8004bbe <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8004bba:	f7ff fa07 	bl	8003fcc <xTaskResumeAll>
    }
 8004bbe:	bf00      	nop
 8004bc0:	3710      	adds	r7, #16
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}
 8004bc6:	bf00      	nop
 8004bc8:	20000224 	.word	0x20000224
 8004bcc:	20000228 	.word	0x20000228
 8004bd0:	e000ed04 	.word	0xe000ed04

08004bd4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8004bd4:	b480      	push	{r7}
 8004bd6:	b085      	sub	sp, #20
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004bdc:	4b0e      	ldr	r3, [pc, #56]	; (8004c18 <prvGetNextExpireTime+0x44>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d101      	bne.n	8004bea <prvGetNextExpireTime+0x16>
 8004be6:	2201      	movs	r2, #1
 8004be8:	e000      	b.n	8004bec <prvGetNextExpireTime+0x18>
 8004bea:	2200      	movs	r2, #0
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d105      	bne.n	8004c04 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004bf8:	4b07      	ldr	r3, [pc, #28]	; (8004c18 <prvGetNextExpireTime+0x44>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	68db      	ldr	r3, [r3, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	60fb      	str	r3, [r7, #12]
 8004c02:	e001      	b.n	8004c08 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8004c04:	2300      	movs	r3, #0
 8004c06:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8004c08:	68fb      	ldr	r3, [r7, #12]
    }
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3714      	adds	r7, #20
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr
 8004c16:	bf00      	nop
 8004c18:	20000220 	.word	0x20000220

08004c1c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b084      	sub	sp, #16
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8004c24:	f7ff fa6e 	bl	8004104 <xTaskGetTickCount>
 8004c28:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8004c2a:	4b0b      	ldr	r3, [pc, #44]	; (8004c58 <prvSampleTimeNow+0x3c>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	68fa      	ldr	r2, [r7, #12]
 8004c30:	429a      	cmp	r2, r3
 8004c32:	d205      	bcs.n	8004c40 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8004c34:	f000 f91a 	bl	8004e6c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	601a      	str	r2, [r3, #0]
 8004c3e:	e002      	b.n	8004c46 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2200      	movs	r2, #0
 8004c44:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8004c46:	4a04      	ldr	r2, [pc, #16]	; (8004c58 <prvSampleTimeNow+0x3c>)
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
    }
 8004c4e:	4618      	mov	r0, r3
 8004c50:	3710      	adds	r7, #16
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}
 8004c56:	bf00      	nop
 8004c58:	20000230 	.word	0x20000230

08004c5c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b086      	sub	sp, #24
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	60f8      	str	r0, [r7, #12]
 8004c64:	60b9      	str	r1, [r7, #8]
 8004c66:	607a      	str	r2, [r7, #4]
 8004c68:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	68ba      	ldr	r2, [r7, #8]
 8004c72:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	68fa      	ldr	r2, [r7, #12]
 8004c78:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8004c7a:	68ba      	ldr	r2, [r7, #8]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	d812      	bhi.n	8004ca8 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c82:	687a      	ldr	r2, [r7, #4]
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	1ad2      	subs	r2, r2, r3
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	699b      	ldr	r3, [r3, #24]
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	d302      	bcc.n	8004c96 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8004c90:	2301      	movs	r3, #1
 8004c92:	617b      	str	r3, [r7, #20]
 8004c94:	e01b      	b.n	8004cce <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004c96:	4b10      	ldr	r3, [pc, #64]	; (8004cd8 <prvInsertTimerInActiveList+0x7c>)
 8004c98:	681a      	ldr	r2, [r3, #0]
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	3304      	adds	r3, #4
 8004c9e:	4619      	mov	r1, r3
 8004ca0:	4610      	mov	r0, r2
 8004ca2:	f7fe f9ff 	bl	80030a4 <vListInsert>
 8004ca6:	e012      	b.n	8004cce <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004ca8:	687a      	ldr	r2, [r7, #4]
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d206      	bcs.n	8004cbe <prvInsertTimerInActiveList+0x62>
 8004cb0:	68ba      	ldr	r2, [r7, #8]
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	d302      	bcc.n	8004cbe <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	617b      	str	r3, [r7, #20]
 8004cbc:	e007      	b.n	8004cce <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004cbe:	4b07      	ldr	r3, [pc, #28]	; (8004cdc <prvInsertTimerInActiveList+0x80>)
 8004cc0:	681a      	ldr	r2, [r3, #0]
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	3304      	adds	r3, #4
 8004cc6:	4619      	mov	r1, r3
 8004cc8:	4610      	mov	r0, r2
 8004cca:	f7fe f9eb 	bl	80030a4 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8004cce:	697b      	ldr	r3, [r7, #20]
    }
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	3718      	adds	r7, #24
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}
 8004cd8:	20000224 	.word	0x20000224
 8004cdc:	20000220 	.word	0x20000220

08004ce0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b08c      	sub	sp, #48	; 0x30
 8004ce4:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004ce6:	e0ae      	b.n	8004e46 <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	f2c0 80ab 	blt.w	8004e46 <prvProcessReceivedCommands+0x166>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf6:	695b      	ldr	r3, [r3, #20]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d004      	beq.n	8004d06 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cfe:	3304      	adds	r3, #4
 8004d00:	4618      	mov	r0, r3
 8004d02:	f7fe fa08 	bl	8003116 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004d06:	1d3b      	adds	r3, r7, #4
 8004d08:	4618      	mov	r0, r3
 8004d0a:	f7ff ff87 	bl	8004c1c <prvSampleTimeNow>
 8004d0e:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	2b09      	cmp	r3, #9
 8004d14:	f200 8096 	bhi.w	8004e44 <prvProcessReceivedCommands+0x164>
 8004d18:	a201      	add	r2, pc, #4	; (adr r2, 8004d20 <prvProcessReceivedCommands+0x40>)
 8004d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d1e:	bf00      	nop
 8004d20:	08004d49 	.word	0x08004d49
 8004d24:	08004d49 	.word	0x08004d49
 8004d28:	08004d49 	.word	0x08004d49
 8004d2c:	08004dbd 	.word	0x08004dbd
 8004d30:	08004dd1 	.word	0x08004dd1
 8004d34:	08004e1b 	.word	0x08004e1b
 8004d38:	08004d49 	.word	0x08004d49
 8004d3c:	08004d49 	.word	0x08004d49
 8004d40:	08004dbd 	.word	0x08004dbd
 8004d44:	08004dd1 	.word	0x08004dd1
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d4e:	f043 0301 	orr.w	r3, r3, #1
 8004d52:	b2da      	uxtb	r2, r3
 8004d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004d5a:	68fa      	ldr	r2, [r7, #12]
 8004d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5e:	699b      	ldr	r3, [r3, #24]
 8004d60:	18d1      	adds	r1, r2, r3
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	6a3a      	ldr	r2, [r7, #32]
 8004d66:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004d68:	f7ff ff78 	bl	8004c5c <prvInsertTimerInActiveList>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d069      	beq.n	8004e46 <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d74:	6a1b      	ldr	r3, [r3, #32]
 8004d76:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004d78:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d7c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d80:	f003 0304 	and.w	r3, r3, #4
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d05e      	beq.n	8004e46 <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004d88:	68fa      	ldr	r2, [r7, #12]
 8004d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d8c:	699b      	ldr	r3, [r3, #24]
 8004d8e:	441a      	add	r2, r3
 8004d90:	2300      	movs	r3, #0
 8004d92:	9300      	str	r3, [sp, #0]
 8004d94:	2300      	movs	r3, #0
 8004d96:	2100      	movs	r1, #0
 8004d98:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004d9a:	f7ff fe21 	bl	80049e0 <xTimerGenericCommand>
 8004d9e:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8004da0:	69fb      	ldr	r3, [r7, #28]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d14f      	bne.n	8004e46 <prvProcessReceivedCommands+0x166>
        __asm volatile
 8004da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004daa:	f383 8811 	msr	BASEPRI, r3
 8004dae:	f3bf 8f6f 	isb	sy
 8004db2:	f3bf 8f4f 	dsb	sy
 8004db6:	61bb      	str	r3, [r7, #24]
    }
 8004db8:	bf00      	nop
 8004dba:	e7fe      	b.n	8004dba <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dbe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004dc2:	f023 0301 	bic.w	r3, r3, #1
 8004dc6:	b2da      	uxtb	r2, r3
 8004dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8004dce:	e03a      	b.n	8004e46 <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004dd6:	f043 0301 	orr.w	r3, r3, #1
 8004dda:	b2da      	uxtb	r2, r3
 8004ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dde:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004de2:	68fa      	ldr	r2, [r7, #12]
 8004de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de6:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dea:	699b      	ldr	r3, [r3, #24]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d10a      	bne.n	8004e06 <prvProcessReceivedCommands+0x126>
        __asm volatile
 8004df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004df4:	f383 8811 	msr	BASEPRI, r3
 8004df8:	f3bf 8f6f 	isb	sy
 8004dfc:	f3bf 8f4f 	dsb	sy
 8004e00:	617b      	str	r3, [r7, #20]
    }
 8004e02:	bf00      	nop
 8004e04:	e7fe      	b.n	8004e04 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e08:	699a      	ldr	r2, [r3, #24]
 8004e0a:	6a3b      	ldr	r3, [r7, #32]
 8004e0c:	18d1      	adds	r1, r2, r3
 8004e0e:	6a3b      	ldr	r3, [r7, #32]
 8004e10:	6a3a      	ldr	r2, [r7, #32]
 8004e12:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004e14:	f7ff ff22 	bl	8004c5c <prvInsertTimerInActiveList>
                        break;
 8004e18:	e015      	b.n	8004e46 <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e20:	f003 0302 	and.w	r3, r3, #2
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d103      	bne.n	8004e30 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8004e28:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004e2a:	f000 fbc9 	bl	80055c0 <vPortFree>
 8004e2e:	e00a      	b.n	8004e46 <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e32:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e36:	f023 0301 	bic.w	r3, r3, #1
 8004e3a:	b2da      	uxtb	r2, r3
 8004e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e3e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8004e42:	e000      	b.n	8004e46 <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
 8004e44:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004e46:	4b08      	ldr	r3, [pc, #32]	; (8004e68 <prvProcessReceivedCommands+0x188>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f107 0108 	add.w	r1, r7, #8
 8004e4e:	2200      	movs	r2, #0
 8004e50:	4618      	mov	r0, r3
 8004e52:	f7fe fc45 	bl	80036e0 <xQueueReceive>
 8004e56:	4603      	mov	r3, r0
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	f47f af45 	bne.w	8004ce8 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8004e5e:	bf00      	nop
 8004e60:	bf00      	nop
 8004e62:	3728      	adds	r7, #40	; 0x28
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}
 8004e68:	20000228 	.word	0x20000228

08004e6c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b088      	sub	sp, #32
 8004e70:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004e72:	e048      	b.n	8004f06 <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004e74:	4b2d      	ldr	r3, [pc, #180]	; (8004f2c <prvSwitchTimerLists+0xc0>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	68db      	ldr	r3, [r3, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e7e:	4b2b      	ldr	r3, [pc, #172]	; (8004f2c <prvSwitchTimerLists+0xc0>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	68db      	ldr	r3, [r3, #12]
 8004e84:	68db      	ldr	r3, [r3, #12]
 8004e86:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	3304      	adds	r3, #4
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	f7fe f942 	bl	8003116 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	6a1b      	ldr	r3, [r3, #32]
 8004e96:	68f8      	ldr	r0, [r7, #12]
 8004e98:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ea0:	f003 0304 	and.w	r3, r3, #4
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d02e      	beq.n	8004f06 <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	699b      	ldr	r3, [r3, #24]
 8004eac:	693a      	ldr	r2, [r7, #16]
 8004eae:	4413      	add	r3, r2
 8004eb0:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8004eb2:	68ba      	ldr	r2, [r7, #8]
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	d90e      	bls.n	8004ed8 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	68ba      	ldr	r2, [r7, #8]
 8004ebe:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	68fa      	ldr	r2, [r7, #12]
 8004ec4:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004ec6:	4b19      	ldr	r3, [pc, #100]	; (8004f2c <prvSwitchTimerLists+0xc0>)
 8004ec8:	681a      	ldr	r2, [r3, #0]
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	3304      	adds	r3, #4
 8004ece:	4619      	mov	r1, r3
 8004ed0:	4610      	mov	r0, r2
 8004ed2:	f7fe f8e7 	bl	80030a4 <vListInsert>
 8004ed6:	e016      	b.n	8004f06 <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004ed8:	2300      	movs	r3, #0
 8004eda:	9300      	str	r3, [sp, #0]
 8004edc:	2300      	movs	r3, #0
 8004ede:	693a      	ldr	r2, [r7, #16]
 8004ee0:	2100      	movs	r1, #0
 8004ee2:	68f8      	ldr	r0, [r7, #12]
 8004ee4:	f7ff fd7c 	bl	80049e0 <xTimerGenericCommand>
 8004ee8:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d10a      	bne.n	8004f06 <prvSwitchTimerLists+0x9a>
        __asm volatile
 8004ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ef4:	f383 8811 	msr	BASEPRI, r3
 8004ef8:	f3bf 8f6f 	isb	sy
 8004efc:	f3bf 8f4f 	dsb	sy
 8004f00:	603b      	str	r3, [r7, #0]
    }
 8004f02:	bf00      	nop
 8004f04:	e7fe      	b.n	8004f04 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004f06:	4b09      	ldr	r3, [pc, #36]	; (8004f2c <prvSwitchTimerLists+0xc0>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d1b1      	bne.n	8004e74 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8004f10:	4b06      	ldr	r3, [pc, #24]	; (8004f2c <prvSwitchTimerLists+0xc0>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8004f16:	4b06      	ldr	r3, [pc, #24]	; (8004f30 <prvSwitchTimerLists+0xc4>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a04      	ldr	r2, [pc, #16]	; (8004f2c <prvSwitchTimerLists+0xc0>)
 8004f1c:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8004f1e:	4a04      	ldr	r2, [pc, #16]	; (8004f30 <prvSwitchTimerLists+0xc4>)
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	6013      	str	r3, [r2, #0]
    }
 8004f24:	bf00      	nop
 8004f26:	3718      	adds	r7, #24
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}
 8004f2c:	20000220 	.word	0x20000220
 8004f30:	20000224 	.word	0x20000224

08004f34 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004f34:	b580      	push	{r7, lr}
 8004f36:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004f38:	f000 f95e 	bl	80051f8 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004f3c:	4b12      	ldr	r3, [pc, #72]	; (8004f88 <prvCheckForValidListAndQueue+0x54>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d11d      	bne.n	8004f80 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8004f44:	4811      	ldr	r0, [pc, #68]	; (8004f8c <prvCheckForValidListAndQueue+0x58>)
 8004f46:	f7fe f85c 	bl	8003002 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8004f4a:	4811      	ldr	r0, [pc, #68]	; (8004f90 <prvCheckForValidListAndQueue+0x5c>)
 8004f4c:	f7fe f859 	bl	8003002 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004f50:	4b10      	ldr	r3, [pc, #64]	; (8004f94 <prvCheckForValidListAndQueue+0x60>)
 8004f52:	4a0e      	ldr	r2, [pc, #56]	; (8004f8c <prvCheckForValidListAndQueue+0x58>)
 8004f54:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8004f56:	4b10      	ldr	r3, [pc, #64]	; (8004f98 <prvCheckForValidListAndQueue+0x64>)
 8004f58:	4a0d      	ldr	r2, [pc, #52]	; (8004f90 <prvCheckForValidListAndQueue+0x5c>)
 8004f5a:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	210c      	movs	r1, #12
 8004f60:	2005      	movs	r0, #5
 8004f62:	f7fe f96b 	bl	800323c <xQueueGenericCreate>
 8004f66:	4603      	mov	r3, r0
 8004f68:	4a07      	ldr	r2, [pc, #28]	; (8004f88 <prvCheckForValidListAndQueue+0x54>)
 8004f6a:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8004f6c:	4b06      	ldr	r3, [pc, #24]	; (8004f88 <prvCheckForValidListAndQueue+0x54>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d005      	beq.n	8004f80 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004f74:	4b04      	ldr	r3, [pc, #16]	; (8004f88 <prvCheckForValidListAndQueue+0x54>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4908      	ldr	r1, [pc, #32]	; (8004f9c <prvCheckForValidListAndQueue+0x68>)
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f7fe fdae 	bl	8003adc <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004f80:	f000 f96a 	bl	8005258 <vPortExitCritical>
    }
 8004f84:	bf00      	nop
 8004f86:	bd80      	pop	{r7, pc}
 8004f88:	20000228 	.word	0x20000228
 8004f8c:	200001f8 	.word	0x200001f8
 8004f90:	2000020c 	.word	0x2000020c
 8004f94:	20000220 	.word	0x20000220
 8004f98:	20000224 	.word	0x20000224
 8004f9c:	080058bc 	.word	0x080058bc

08004fa0 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b085      	sub	sp, #20
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	60f8      	str	r0, [r7, #12]
 8004fa8:	60b9      	str	r1, [r7, #8]
 8004faa:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	3b04      	subs	r3, #4
 8004fb0:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004fb8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	3b04      	subs	r3, #4
 8004fbe:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	f023 0201 	bic.w	r2, r3, #1
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	3b04      	subs	r3, #4
 8004fce:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8004fd0:	4a0c      	ldr	r2, [pc, #48]	; (8005004 <pxPortInitialiseStack+0x64>)
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	3b14      	subs	r3, #20
 8004fda:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004fdc:	687a      	ldr	r2, [r7, #4]
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	3b04      	subs	r3, #4
 8004fe6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f06f 0202 	mvn.w	r2, #2
 8004fee:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	3b20      	subs	r3, #32
 8004ff4:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	3714      	adds	r7, #20
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005002:	4770      	bx	lr
 8005004:	08005009 	.word	0x08005009

08005008 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005008:	b480      	push	{r7}
 800500a:	b085      	sub	sp, #20
 800500c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800500e:	2300      	movs	r3, #0
 8005010:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8005012:	4b12      	ldr	r3, [pc, #72]	; (800505c <prvTaskExitError+0x54>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f1b3 3fff 	cmp.w	r3, #4294967295
 800501a:	d00a      	beq.n	8005032 <prvTaskExitError+0x2a>
        __asm volatile
 800501c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005020:	f383 8811 	msr	BASEPRI, r3
 8005024:	f3bf 8f6f 	isb	sy
 8005028:	f3bf 8f4f 	dsb	sy
 800502c:	60fb      	str	r3, [r7, #12]
    }
 800502e:	bf00      	nop
 8005030:	e7fe      	b.n	8005030 <prvTaskExitError+0x28>
        __asm volatile
 8005032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005036:	f383 8811 	msr	BASEPRI, r3
 800503a:	f3bf 8f6f 	isb	sy
 800503e:	f3bf 8f4f 	dsb	sy
 8005042:	60bb      	str	r3, [r7, #8]
    }
 8005044:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8005046:	bf00      	nop
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d0fc      	beq.n	8005048 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800504e:	bf00      	nop
 8005050:	bf00      	nop
 8005052:	3714      	adds	r7, #20
 8005054:	46bd      	mov	sp, r7
 8005056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505a:	4770      	bx	lr
 800505c:	2000000c 	.word	0x2000000c

08005060 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8005060:	4b07      	ldr	r3, [pc, #28]	; (8005080 <pxCurrentTCBConst2>)
 8005062:	6819      	ldr	r1, [r3, #0]
 8005064:	6808      	ldr	r0, [r1, #0]
 8005066:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800506a:	f380 8809 	msr	PSP, r0
 800506e:	f3bf 8f6f 	isb	sy
 8005072:	f04f 0000 	mov.w	r0, #0
 8005076:	f380 8811 	msr	BASEPRI, r0
 800507a:	4770      	bx	lr
 800507c:	f3af 8000 	nop.w

08005080 <pxCurrentTCBConst2>:
 8005080:	200000ec 	.word	0x200000ec
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8005084:	bf00      	nop
 8005086:	bf00      	nop

08005088 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8005088:	4808      	ldr	r0, [pc, #32]	; (80050ac <prvPortStartFirstTask+0x24>)
 800508a:	6800      	ldr	r0, [r0, #0]
 800508c:	6800      	ldr	r0, [r0, #0]
 800508e:	f380 8808 	msr	MSP, r0
 8005092:	f04f 0000 	mov.w	r0, #0
 8005096:	f380 8814 	msr	CONTROL, r0
 800509a:	b662      	cpsie	i
 800509c:	b661      	cpsie	f
 800509e:	f3bf 8f4f 	dsb	sy
 80050a2:	f3bf 8f6f 	isb	sy
 80050a6:	df00      	svc	0
 80050a8:	bf00      	nop
 80050aa:	0000      	.short	0x0000
 80050ac:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80050b0:	bf00      	nop
 80050b2:	bf00      	nop

080050b4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b086      	sub	sp, #24
 80050b8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80050ba:	4b46      	ldr	r3, [pc, #280]	; (80051d4 <xPortStartScheduler+0x120>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a46      	ldr	r2, [pc, #280]	; (80051d8 <xPortStartScheduler+0x124>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d10a      	bne.n	80050da <xPortStartScheduler+0x26>
        __asm volatile
 80050c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050c8:	f383 8811 	msr	BASEPRI, r3
 80050cc:	f3bf 8f6f 	isb	sy
 80050d0:	f3bf 8f4f 	dsb	sy
 80050d4:	613b      	str	r3, [r7, #16]
    }
 80050d6:	bf00      	nop
 80050d8:	e7fe      	b.n	80050d8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80050da:	4b3e      	ldr	r3, [pc, #248]	; (80051d4 <xPortStartScheduler+0x120>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a3f      	ldr	r2, [pc, #252]	; (80051dc <xPortStartScheduler+0x128>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d10a      	bne.n	80050fa <xPortStartScheduler+0x46>
        __asm volatile
 80050e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050e8:	f383 8811 	msr	BASEPRI, r3
 80050ec:	f3bf 8f6f 	isb	sy
 80050f0:	f3bf 8f4f 	dsb	sy
 80050f4:	60fb      	str	r3, [r7, #12]
    }
 80050f6:	bf00      	nop
 80050f8:	e7fe      	b.n	80050f8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80050fa:	4b39      	ldr	r3, [pc, #228]	; (80051e0 <xPortStartScheduler+0x12c>)
 80050fc:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	781b      	ldrb	r3, [r3, #0]
 8005102:	b2db      	uxtb	r3, r3
 8005104:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	22ff      	movs	r2, #255	; 0xff
 800510a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	781b      	ldrb	r3, [r3, #0]
 8005110:	b2db      	uxtb	r3, r3
 8005112:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005114:	78fb      	ldrb	r3, [r7, #3]
 8005116:	b2db      	uxtb	r3, r3
 8005118:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800511c:	b2da      	uxtb	r2, r3
 800511e:	4b31      	ldr	r3, [pc, #196]	; (80051e4 <xPortStartScheduler+0x130>)
 8005120:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005122:	4b31      	ldr	r3, [pc, #196]	; (80051e8 <xPortStartScheduler+0x134>)
 8005124:	2207      	movs	r2, #7
 8005126:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005128:	e009      	b.n	800513e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800512a:	4b2f      	ldr	r3, [pc, #188]	; (80051e8 <xPortStartScheduler+0x134>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	3b01      	subs	r3, #1
 8005130:	4a2d      	ldr	r2, [pc, #180]	; (80051e8 <xPortStartScheduler+0x134>)
 8005132:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005134:	78fb      	ldrb	r3, [r7, #3]
 8005136:	b2db      	uxtb	r3, r3
 8005138:	005b      	lsls	r3, r3, #1
 800513a:	b2db      	uxtb	r3, r3
 800513c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800513e:	78fb      	ldrb	r3, [r7, #3]
 8005140:	b2db      	uxtb	r3, r3
 8005142:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005146:	2b80      	cmp	r3, #128	; 0x80
 8005148:	d0ef      	beq.n	800512a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800514a:	4b27      	ldr	r3, [pc, #156]	; (80051e8 <xPortStartScheduler+0x134>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f1c3 0307 	rsb	r3, r3, #7
 8005152:	2b04      	cmp	r3, #4
 8005154:	d00a      	beq.n	800516c <xPortStartScheduler+0xb8>
        __asm volatile
 8005156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800515a:	f383 8811 	msr	BASEPRI, r3
 800515e:	f3bf 8f6f 	isb	sy
 8005162:	f3bf 8f4f 	dsb	sy
 8005166:	60bb      	str	r3, [r7, #8]
    }
 8005168:	bf00      	nop
 800516a:	e7fe      	b.n	800516a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800516c:	4b1e      	ldr	r3, [pc, #120]	; (80051e8 <xPortStartScheduler+0x134>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	021b      	lsls	r3, r3, #8
 8005172:	4a1d      	ldr	r2, [pc, #116]	; (80051e8 <xPortStartScheduler+0x134>)
 8005174:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005176:	4b1c      	ldr	r3, [pc, #112]	; (80051e8 <xPortStartScheduler+0x134>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800517e:	4a1a      	ldr	r2, [pc, #104]	; (80051e8 <xPortStartScheduler+0x134>)
 8005180:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	b2da      	uxtb	r2, r3
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800518a:	4b18      	ldr	r3, [pc, #96]	; (80051ec <xPortStartScheduler+0x138>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a17      	ldr	r2, [pc, #92]	; (80051ec <xPortStartScheduler+0x138>)
 8005190:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005194:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8005196:	4b15      	ldr	r3, [pc, #84]	; (80051ec <xPortStartScheduler+0x138>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a14      	ldr	r2, [pc, #80]	; (80051ec <xPortStartScheduler+0x138>)
 800519c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80051a0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80051a2:	f000 f8db 	bl	800535c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80051a6:	4b12      	ldr	r3, [pc, #72]	; (80051f0 <xPortStartScheduler+0x13c>)
 80051a8:	2200      	movs	r2, #0
 80051aa:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80051ac:	f000 f8f0 	bl	8005390 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80051b0:	4b10      	ldr	r3, [pc, #64]	; (80051f4 <xPortStartScheduler+0x140>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a0f      	ldr	r2, [pc, #60]	; (80051f4 <xPortStartScheduler+0x140>)
 80051b6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80051ba:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80051bc:	f7ff ff64 	bl	8005088 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80051c0:	f7ff f868 	bl	8004294 <vTaskSwitchContext>
    prvTaskExitError();
 80051c4:	f7ff ff20 	bl	8005008 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80051c8:	2300      	movs	r3, #0
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3718      	adds	r7, #24
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}
 80051d2:	bf00      	nop
 80051d4:	e000ed00 	.word	0xe000ed00
 80051d8:	410fc271 	.word	0x410fc271
 80051dc:	410fc270 	.word	0x410fc270
 80051e0:	e000e400 	.word	0xe000e400
 80051e4:	20000234 	.word	0x20000234
 80051e8:	20000238 	.word	0x20000238
 80051ec:	e000ed20 	.word	0xe000ed20
 80051f0:	2000000c 	.word	0x2000000c
 80051f4:	e000ef34 	.word	0xe000ef34

080051f8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80051f8:	b480      	push	{r7}
 80051fa:	b083      	sub	sp, #12
 80051fc:	af00      	add	r7, sp, #0
        __asm volatile
 80051fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005202:	f383 8811 	msr	BASEPRI, r3
 8005206:	f3bf 8f6f 	isb	sy
 800520a:	f3bf 8f4f 	dsb	sy
 800520e:	607b      	str	r3, [r7, #4]
    }
 8005210:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8005212:	4b0f      	ldr	r3, [pc, #60]	; (8005250 <vPortEnterCritical+0x58>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	3301      	adds	r3, #1
 8005218:	4a0d      	ldr	r2, [pc, #52]	; (8005250 <vPortEnterCritical+0x58>)
 800521a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800521c:	4b0c      	ldr	r3, [pc, #48]	; (8005250 <vPortEnterCritical+0x58>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	2b01      	cmp	r3, #1
 8005222:	d10f      	bne.n	8005244 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005224:	4b0b      	ldr	r3, [pc, #44]	; (8005254 <vPortEnterCritical+0x5c>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	b2db      	uxtb	r3, r3
 800522a:	2b00      	cmp	r3, #0
 800522c:	d00a      	beq.n	8005244 <vPortEnterCritical+0x4c>
        __asm volatile
 800522e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005232:	f383 8811 	msr	BASEPRI, r3
 8005236:	f3bf 8f6f 	isb	sy
 800523a:	f3bf 8f4f 	dsb	sy
 800523e:	603b      	str	r3, [r7, #0]
    }
 8005240:	bf00      	nop
 8005242:	e7fe      	b.n	8005242 <vPortEnterCritical+0x4a>
    }
}
 8005244:	bf00      	nop
 8005246:	370c      	adds	r7, #12
 8005248:	46bd      	mov	sp, r7
 800524a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524e:	4770      	bx	lr
 8005250:	2000000c 	.word	0x2000000c
 8005254:	e000ed04 	.word	0xe000ed04

08005258 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005258:	b480      	push	{r7}
 800525a:	b083      	sub	sp, #12
 800525c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800525e:	4b12      	ldr	r3, [pc, #72]	; (80052a8 <vPortExitCritical+0x50>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d10a      	bne.n	800527c <vPortExitCritical+0x24>
        __asm volatile
 8005266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800526a:	f383 8811 	msr	BASEPRI, r3
 800526e:	f3bf 8f6f 	isb	sy
 8005272:	f3bf 8f4f 	dsb	sy
 8005276:	607b      	str	r3, [r7, #4]
    }
 8005278:	bf00      	nop
 800527a:	e7fe      	b.n	800527a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800527c:	4b0a      	ldr	r3, [pc, #40]	; (80052a8 <vPortExitCritical+0x50>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	3b01      	subs	r3, #1
 8005282:	4a09      	ldr	r2, [pc, #36]	; (80052a8 <vPortExitCritical+0x50>)
 8005284:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8005286:	4b08      	ldr	r3, [pc, #32]	; (80052a8 <vPortExitCritical+0x50>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d105      	bne.n	800529a <vPortExitCritical+0x42>
 800528e:	2300      	movs	r3, #0
 8005290:	603b      	str	r3, [r7, #0]
        __asm volatile
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	f383 8811 	msr	BASEPRI, r3
    }
 8005298:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800529a:	bf00      	nop
 800529c:	370c      	adds	r7, #12
 800529e:	46bd      	mov	sp, r7
 80052a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a4:	4770      	bx	lr
 80052a6:	bf00      	nop
 80052a8:	2000000c 	.word	0x2000000c
 80052ac:	00000000 	.word	0x00000000

080052b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80052b0:	f3ef 8009 	mrs	r0, PSP
 80052b4:	f3bf 8f6f 	isb	sy
 80052b8:	4b15      	ldr	r3, [pc, #84]	; (8005310 <pxCurrentTCBConst>)
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	f01e 0f10 	tst.w	lr, #16
 80052c0:	bf08      	it	eq
 80052c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80052c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052ca:	6010      	str	r0, [r2, #0]
 80052cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80052d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80052d4:	f380 8811 	msr	BASEPRI, r0
 80052d8:	f3bf 8f4f 	dsb	sy
 80052dc:	f3bf 8f6f 	isb	sy
 80052e0:	f7fe ffd8 	bl	8004294 <vTaskSwitchContext>
 80052e4:	f04f 0000 	mov.w	r0, #0
 80052e8:	f380 8811 	msr	BASEPRI, r0
 80052ec:	bc09      	pop	{r0, r3}
 80052ee:	6819      	ldr	r1, [r3, #0]
 80052f0:	6808      	ldr	r0, [r1, #0]
 80052f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052f6:	f01e 0f10 	tst.w	lr, #16
 80052fa:	bf08      	it	eq
 80052fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005300:	f380 8809 	msr	PSP, r0
 8005304:	f3bf 8f6f 	isb	sy
 8005308:	4770      	bx	lr
 800530a:	bf00      	nop
 800530c:	f3af 8000 	nop.w

08005310 <pxCurrentTCBConst>:
 8005310:	200000ec 	.word	0x200000ec
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8005314:	bf00      	nop
 8005316:	bf00      	nop

08005318 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b082      	sub	sp, #8
 800531c:	af00      	add	r7, sp, #0
        __asm volatile
 800531e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005322:	f383 8811 	msr	BASEPRI, r3
 8005326:	f3bf 8f6f 	isb	sy
 800532a:	f3bf 8f4f 	dsb	sy
 800532e:	607b      	str	r3, [r7, #4]
    }
 8005330:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8005332:	f7fe fef7 	bl	8004124 <xTaskIncrementTick>
 8005336:	4603      	mov	r3, r0
 8005338:	2b00      	cmp	r3, #0
 800533a:	d003      	beq.n	8005344 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800533c:	4b06      	ldr	r3, [pc, #24]	; (8005358 <SysTick_Handler+0x40>)
 800533e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005342:	601a      	str	r2, [r3, #0]
 8005344:	2300      	movs	r3, #0
 8005346:	603b      	str	r3, [r7, #0]
        __asm volatile
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	f383 8811 	msr	BASEPRI, r3
    }
 800534e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8005350:	bf00      	nop
 8005352:	3708      	adds	r7, #8
 8005354:	46bd      	mov	sp, r7
 8005356:	bd80      	pop	{r7, pc}
 8005358:	e000ed04 	.word	0xe000ed04

0800535c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800535c:	b480      	push	{r7}
 800535e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005360:	4b08      	ldr	r3, [pc, #32]	; (8005384 <vPortSetupTimerInterrupt+0x28>)
 8005362:	2200      	movs	r2, #0
 8005364:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005366:	4b08      	ldr	r3, [pc, #32]	; (8005388 <vPortSetupTimerInterrupt+0x2c>)
 8005368:	2200      	movs	r2, #0
 800536a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800536c:	4b07      	ldr	r3, [pc, #28]	; (800538c <vPortSetupTimerInterrupt+0x30>)
 800536e:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 8005372:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005374:	4b03      	ldr	r3, [pc, #12]	; (8005384 <vPortSetupTimerInterrupt+0x28>)
 8005376:	2207      	movs	r2, #7
 8005378:	601a      	str	r2, [r3, #0]
}
 800537a:	bf00      	nop
 800537c:	46bd      	mov	sp, r7
 800537e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005382:	4770      	bx	lr
 8005384:	e000e010 	.word	0xe000e010
 8005388:	e000e018 	.word	0xe000e018
 800538c:	e000e014 	.word	0xe000e014

08005390 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8005390:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80053a0 <vPortEnableVFP+0x10>
 8005394:	6801      	ldr	r1, [r0, #0]
 8005396:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800539a:	6001      	str	r1, [r0, #0]
 800539c:	4770      	bx	lr
 800539e:	0000      	.short	0x0000
 80053a0:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80053a4:	bf00      	nop
 80053a6:	bf00      	nop

080053a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80053a8:	b480      	push	{r7}
 80053aa:	b085      	sub	sp, #20
 80053ac:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80053ae:	f3ef 8305 	mrs	r3, IPSR
 80053b2:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2b0f      	cmp	r3, #15
 80053b8:	d914      	bls.n	80053e4 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80053ba:	4a17      	ldr	r2, [pc, #92]	; (8005418 <vPortValidateInterruptPriority+0x70>)
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	4413      	add	r3, r2
 80053c0:	781b      	ldrb	r3, [r3, #0]
 80053c2:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80053c4:	4b15      	ldr	r3, [pc, #84]	; (800541c <vPortValidateInterruptPriority+0x74>)
 80053c6:	781b      	ldrb	r3, [r3, #0]
 80053c8:	7afa      	ldrb	r2, [r7, #11]
 80053ca:	429a      	cmp	r2, r3
 80053cc:	d20a      	bcs.n	80053e4 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 80053ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053d2:	f383 8811 	msr	BASEPRI, r3
 80053d6:	f3bf 8f6f 	isb	sy
 80053da:	f3bf 8f4f 	dsb	sy
 80053de:	607b      	str	r3, [r7, #4]
    }
 80053e0:	bf00      	nop
 80053e2:	e7fe      	b.n	80053e2 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80053e4:	4b0e      	ldr	r3, [pc, #56]	; (8005420 <vPortValidateInterruptPriority+0x78>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80053ec:	4b0d      	ldr	r3, [pc, #52]	; (8005424 <vPortValidateInterruptPriority+0x7c>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	429a      	cmp	r2, r3
 80053f2:	d90a      	bls.n	800540a <vPortValidateInterruptPriority+0x62>
        __asm volatile
 80053f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053f8:	f383 8811 	msr	BASEPRI, r3
 80053fc:	f3bf 8f6f 	isb	sy
 8005400:	f3bf 8f4f 	dsb	sy
 8005404:	603b      	str	r3, [r7, #0]
    }
 8005406:	bf00      	nop
 8005408:	e7fe      	b.n	8005408 <vPortValidateInterruptPriority+0x60>
    }
 800540a:	bf00      	nop
 800540c:	3714      	adds	r7, #20
 800540e:	46bd      	mov	sp, r7
 8005410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005414:	4770      	bx	lr
 8005416:	bf00      	nop
 8005418:	e000e3f0 	.word	0xe000e3f0
 800541c:	20000234 	.word	0x20000234
 8005420:	e000ed0c 	.word	0xe000ed0c
 8005424:	20000238 	.word	0x20000238

08005428 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b08a      	sub	sp, #40	; 0x28
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8005430:	2300      	movs	r3, #0
 8005432:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8005434:	f7fe fdbc 	bl	8003fb0 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8005438:	4b5b      	ldr	r3, [pc, #364]	; (80055a8 <pvPortMalloc+0x180>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d101      	bne.n	8005444 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8005440:	f000 f920 	bl	8005684 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005444:	4b59      	ldr	r3, [pc, #356]	; (80055ac <pvPortMalloc+0x184>)
 8005446:	681a      	ldr	r2, [r3, #0]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	4013      	ands	r3, r2
 800544c:	2b00      	cmp	r3, #0
 800544e:	f040 8093 	bne.w	8005578 <pvPortMalloc+0x150>
        {
            /* The wanted size is increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( xWantedSize > 0 )
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d01d      	beq.n	8005494 <pvPortMalloc+0x6c>
            {
                xWantedSize += xHeapStructSize;
 8005458:	2208      	movs	r2, #8
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	4413      	add	r3, r2
 800545e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned to the required number
                 * of bytes. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	f003 0307 	and.w	r3, r3, #7
 8005466:	2b00      	cmp	r3, #0
 8005468:	d014      	beq.n	8005494 <pvPortMalloc+0x6c>
                {
                    /* Byte alignment required. */
                    xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	f023 0307 	bic.w	r3, r3, #7
 8005470:	3308      	adds	r3, #8
 8005472:	607b      	str	r3, [r7, #4]
                    configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	f003 0307 	and.w	r3, r3, #7
 800547a:	2b00      	cmp	r3, #0
 800547c:	d00a      	beq.n	8005494 <pvPortMalloc+0x6c>
        __asm volatile
 800547e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005482:	f383 8811 	msr	BASEPRI, r3
 8005486:	f3bf 8f6f 	isb	sy
 800548a:	f3bf 8f4f 	dsb	sy
 800548e:	617b      	str	r3, [r7, #20]
    }
 8005490:	bf00      	nop
 8005492:	e7fe      	b.n	8005492 <pvPortMalloc+0x6a>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d06e      	beq.n	8005578 <pvPortMalloc+0x150>
 800549a:	4b45      	ldr	r3, [pc, #276]	; (80055b0 <pvPortMalloc+0x188>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	687a      	ldr	r2, [r7, #4]
 80054a0:	429a      	cmp	r2, r3
 80054a2:	d869      	bhi.n	8005578 <pvPortMalloc+0x150>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one	of adequate size is found. */
                pxPreviousBlock = &xStart;
 80054a4:	4b43      	ldr	r3, [pc, #268]	; (80055b4 <pvPortMalloc+0x18c>)
 80054a6:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80054a8:	4b42      	ldr	r3, [pc, #264]	; (80055b4 <pvPortMalloc+0x18c>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80054ae:	e004      	b.n	80054ba <pvPortMalloc+0x92>
                {
                    pxPreviousBlock = pxBlock;
 80054b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b2:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80054b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80054ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	687a      	ldr	r2, [r7, #4]
 80054c0:	429a      	cmp	r2, r3
 80054c2:	d903      	bls.n	80054cc <pvPortMalloc+0xa4>
 80054c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d1f1      	bne.n	80054b0 <pvPortMalloc+0x88>
                }

                /* If the end marker was reached then a block of adequate size
                 * was	not found. */
                if( pxBlock != pxEnd )
 80054cc:	4b36      	ldr	r3, [pc, #216]	; (80055a8 <pvPortMalloc+0x180>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054d2:	429a      	cmp	r2, r3
 80054d4:	d050      	beq.n	8005578 <pvPortMalloc+0x150>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80054d6:	6a3b      	ldr	r3, [r7, #32]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	2208      	movs	r2, #8
 80054dc:	4413      	add	r3, r2
 80054de:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80054e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e2:	681a      	ldr	r2, [r3, #0]
 80054e4:	6a3b      	ldr	r3, [r7, #32]
 80054e6:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80054e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ea:	685a      	ldr	r2, [r3, #4]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	1ad2      	subs	r2, r2, r3
 80054f0:	2308      	movs	r3, #8
 80054f2:	005b      	lsls	r3, r3, #1
 80054f4:	429a      	cmp	r2, r3
 80054f6:	d91f      	bls.n	8005538 <pvPortMalloc+0x110>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80054f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	4413      	add	r3, r2
 80054fe:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005500:	69bb      	ldr	r3, [r7, #24]
 8005502:	f003 0307 	and.w	r3, r3, #7
 8005506:	2b00      	cmp	r3, #0
 8005508:	d00a      	beq.n	8005520 <pvPortMalloc+0xf8>
        __asm volatile
 800550a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800550e:	f383 8811 	msr	BASEPRI, r3
 8005512:	f3bf 8f6f 	isb	sy
 8005516:	f3bf 8f4f 	dsb	sy
 800551a:	613b      	str	r3, [r7, #16]
    }
 800551c:	bf00      	nop
 800551e:	e7fe      	b.n	800551e <pvPortMalloc+0xf6>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005522:	685a      	ldr	r2, [r3, #4]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	1ad2      	subs	r2, r2, r3
 8005528:	69bb      	ldr	r3, [r7, #24]
 800552a:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 800552c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800552e:	687a      	ldr	r2, [r7, #4]
 8005530:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005532:	69b8      	ldr	r0, [r7, #24]
 8005534:	f000 f908 	bl	8005748 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005538:	4b1d      	ldr	r3, [pc, #116]	; (80055b0 <pvPortMalloc+0x188>)
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	1ad3      	subs	r3, r2, r3
 8005542:	4a1b      	ldr	r2, [pc, #108]	; (80055b0 <pvPortMalloc+0x188>)
 8005544:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005546:	4b1a      	ldr	r3, [pc, #104]	; (80055b0 <pvPortMalloc+0x188>)
 8005548:	681a      	ldr	r2, [r3, #0]
 800554a:	4b1b      	ldr	r3, [pc, #108]	; (80055b8 <pvPortMalloc+0x190>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	429a      	cmp	r2, r3
 8005550:	d203      	bcs.n	800555a <pvPortMalloc+0x132>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005552:	4b17      	ldr	r3, [pc, #92]	; (80055b0 <pvPortMalloc+0x188>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a18      	ldr	r2, [pc, #96]	; (80055b8 <pvPortMalloc+0x190>)
 8005558:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 800555a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800555c:	685a      	ldr	r2, [r3, #4]
 800555e:	4b13      	ldr	r3, [pc, #76]	; (80055ac <pvPortMalloc+0x184>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	431a      	orrs	r2, r3
 8005564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005566:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8005568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800556a:	2200      	movs	r2, #0
 800556c:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800556e:	4b13      	ldr	r3, [pc, #76]	; (80055bc <pvPortMalloc+0x194>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	3301      	adds	r3, #1
 8005574:	4a11      	ldr	r2, [pc, #68]	; (80055bc <pvPortMalloc+0x194>)
 8005576:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8005578:	f7fe fd28 	bl	8003fcc <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800557c:	69fb      	ldr	r3, [r7, #28]
 800557e:	f003 0307 	and.w	r3, r3, #7
 8005582:	2b00      	cmp	r3, #0
 8005584:	d00a      	beq.n	800559c <pvPortMalloc+0x174>
        __asm volatile
 8005586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800558a:	f383 8811 	msr	BASEPRI, r3
 800558e:	f3bf 8f6f 	isb	sy
 8005592:	f3bf 8f4f 	dsb	sy
 8005596:	60fb      	str	r3, [r7, #12]
    }
 8005598:	bf00      	nop
 800559a:	e7fe      	b.n	800559a <pvPortMalloc+0x172>
    return pvReturn;
 800559c:	69fb      	ldr	r3, [r7, #28]
}
 800559e:	4618      	mov	r0, r3
 80055a0:	3728      	adds	r7, #40	; 0x28
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}
 80055a6:	bf00      	nop
 80055a8:	20004244 	.word	0x20004244
 80055ac:	20004258 	.word	0x20004258
 80055b0:	20004248 	.word	0x20004248
 80055b4:	2000423c 	.word	0x2000423c
 80055b8:	2000424c 	.word	0x2000424c
 80055bc:	20004250 	.word	0x20004250

080055c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b086      	sub	sp, #24
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d04d      	beq.n	800566e <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80055d2:	2308      	movs	r3, #8
 80055d4:	425b      	negs	r3, r3
 80055d6:	697a      	ldr	r2, [r7, #20]
 80055d8:	4413      	add	r3, r2
 80055da:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	685a      	ldr	r2, [r3, #4]
 80055e4:	4b24      	ldr	r3, [pc, #144]	; (8005678 <vPortFree+0xb8>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4013      	ands	r3, r2
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d10a      	bne.n	8005604 <vPortFree+0x44>
        __asm volatile
 80055ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055f2:	f383 8811 	msr	BASEPRI, r3
 80055f6:	f3bf 8f6f 	isb	sy
 80055fa:	f3bf 8f4f 	dsb	sy
 80055fe:	60fb      	str	r3, [r7, #12]
    }
 8005600:	bf00      	nop
 8005602:	e7fe      	b.n	8005602 <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d00a      	beq.n	8005622 <vPortFree+0x62>
        __asm volatile
 800560c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005610:	f383 8811 	msr	BASEPRI, r3
 8005614:	f3bf 8f6f 	isb	sy
 8005618:	f3bf 8f4f 	dsb	sy
 800561c:	60bb      	str	r3, [r7, #8]
    }
 800561e:	bf00      	nop
 8005620:	e7fe      	b.n	8005620 <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	685a      	ldr	r2, [r3, #4]
 8005626:	4b14      	ldr	r3, [pc, #80]	; (8005678 <vPortFree+0xb8>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4013      	ands	r3, r2
 800562c:	2b00      	cmp	r3, #0
 800562e:	d01e      	beq.n	800566e <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d11a      	bne.n	800566e <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	685a      	ldr	r2, [r3, #4]
 800563c:	4b0e      	ldr	r3, [pc, #56]	; (8005678 <vPortFree+0xb8>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	43db      	mvns	r3, r3
 8005642:	401a      	ands	r2, r3
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8005648:	f7fe fcb2 	bl	8003fb0 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 800564c:	693b      	ldr	r3, [r7, #16]
 800564e:	685a      	ldr	r2, [r3, #4]
 8005650:	4b0a      	ldr	r3, [pc, #40]	; (800567c <vPortFree+0xbc>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4413      	add	r3, r2
 8005656:	4a09      	ldr	r2, [pc, #36]	; (800567c <vPortFree+0xbc>)
 8005658:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800565a:	6938      	ldr	r0, [r7, #16]
 800565c:	f000 f874 	bl	8005748 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8005660:	4b07      	ldr	r3, [pc, #28]	; (8005680 <vPortFree+0xc0>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	3301      	adds	r3, #1
 8005666:	4a06      	ldr	r2, [pc, #24]	; (8005680 <vPortFree+0xc0>)
 8005668:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800566a:	f7fe fcaf 	bl	8003fcc <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800566e:	bf00      	nop
 8005670:	3718      	adds	r7, #24
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}
 8005676:	bf00      	nop
 8005678:	20004258 	.word	0x20004258
 800567c:	20004248 	.word	0x20004248
 8005680:	20004254 	.word	0x20004254

08005684 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8005684:	b480      	push	{r7}
 8005686:	b085      	sub	sp, #20
 8005688:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800568a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800568e:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8005690:	4b27      	ldr	r3, [pc, #156]	; (8005730 <prvHeapInit+0xac>)
 8005692:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	f003 0307 	and.w	r3, r3, #7
 800569a:	2b00      	cmp	r3, #0
 800569c:	d00c      	beq.n	80056b8 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	3307      	adds	r3, #7
 80056a2:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f023 0307 	bic.w	r3, r3, #7
 80056aa:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80056ac:	68ba      	ldr	r2, [r7, #8]
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	1ad3      	subs	r3, r2, r3
 80056b2:	4a1f      	ldr	r2, [pc, #124]	; (8005730 <prvHeapInit+0xac>)
 80056b4:	4413      	add	r3, r2
 80056b6:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80056bc:	4a1d      	ldr	r2, [pc, #116]	; (8005734 <prvHeapInit+0xb0>)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80056c2:	4b1c      	ldr	r3, [pc, #112]	; (8005734 <prvHeapInit+0xb0>)
 80056c4:	2200      	movs	r2, #0
 80056c6:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	68ba      	ldr	r2, [r7, #8]
 80056cc:	4413      	add	r3, r2
 80056ce:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80056d0:	2208      	movs	r2, #8
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	1a9b      	subs	r3, r3, r2
 80056d6:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	f023 0307 	bic.w	r3, r3, #7
 80056de:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	4a15      	ldr	r2, [pc, #84]	; (8005738 <prvHeapInit+0xb4>)
 80056e4:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80056e6:	4b14      	ldr	r3, [pc, #80]	; (8005738 <prvHeapInit+0xb4>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	2200      	movs	r2, #0
 80056ec:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80056ee:	4b12      	ldr	r3, [pc, #72]	; (8005738 <prvHeapInit+0xb4>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	2200      	movs	r2, #0
 80056f4:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	68fa      	ldr	r2, [r7, #12]
 80056fe:	1ad2      	subs	r2, r2, r3
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005704:	4b0c      	ldr	r3, [pc, #48]	; (8005738 <prvHeapInit+0xb4>)
 8005706:	681a      	ldr	r2, [r3, #0]
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	4a0a      	ldr	r2, [pc, #40]	; (800573c <prvHeapInit+0xb8>)
 8005712:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	4a09      	ldr	r2, [pc, #36]	; (8005740 <prvHeapInit+0xbc>)
 800571a:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800571c:	4b09      	ldr	r3, [pc, #36]	; (8005744 <prvHeapInit+0xc0>)
 800571e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005722:	601a      	str	r2, [r3, #0]
}
 8005724:	bf00      	nop
 8005726:	3714      	adds	r7, #20
 8005728:	46bd      	mov	sp, r7
 800572a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572e:	4770      	bx	lr
 8005730:	2000023c 	.word	0x2000023c
 8005734:	2000423c 	.word	0x2000423c
 8005738:	20004244 	.word	0x20004244
 800573c:	2000424c 	.word	0x2000424c
 8005740:	20004248 	.word	0x20004248
 8005744:	20004258 	.word	0x20004258

08005748 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8005748:	b480      	push	{r7}
 800574a:	b085      	sub	sp, #20
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005750:	4b28      	ldr	r3, [pc, #160]	; (80057f4 <prvInsertBlockIntoFreeList+0xac>)
 8005752:	60fb      	str	r3, [r7, #12]
 8005754:	e002      	b.n	800575c <prvInsertBlockIntoFreeList+0x14>
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	60fb      	str	r3, [r7, #12]
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	687a      	ldr	r2, [r7, #4]
 8005762:	429a      	cmp	r2, r3
 8005764:	d8f7      	bhi.n	8005756 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	68ba      	ldr	r2, [r7, #8]
 8005770:	4413      	add	r3, r2
 8005772:	687a      	ldr	r2, [r7, #4]
 8005774:	429a      	cmp	r2, r3
 8005776:	d108      	bne.n	800578a <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	685a      	ldr	r2, [r3, #4]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	441a      	add	r2, r3
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	68ba      	ldr	r2, [r7, #8]
 8005794:	441a      	add	r2, r3
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	429a      	cmp	r2, r3
 800579c:	d118      	bne.n	80057d0 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681a      	ldr	r2, [r3, #0]
 80057a2:	4b15      	ldr	r3, [pc, #84]	; (80057f8 <prvInsertBlockIntoFreeList+0xb0>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	429a      	cmp	r2, r3
 80057a8:	d00d      	beq.n	80057c6 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	685a      	ldr	r2, [r3, #4]
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	441a      	add	r2, r3
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	681a      	ldr	r2, [r3, #0]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	601a      	str	r2, [r3, #0]
 80057c4:	e008      	b.n	80057d8 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80057c6:	4b0c      	ldr	r3, [pc, #48]	; (80057f8 <prvInsertBlockIntoFreeList+0xb0>)
 80057c8:	681a      	ldr	r2, [r3, #0]
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	601a      	str	r2, [r3, #0]
 80057ce:	e003      	b.n	80057d8 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681a      	ldr	r2, [r3, #0]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80057d8:	68fa      	ldr	r2, [r7, #12]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	429a      	cmp	r2, r3
 80057de:	d002      	beq.n	80057e6 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	687a      	ldr	r2, [r7, #4]
 80057e4:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80057e6:	bf00      	nop
 80057e8:	3714      	adds	r7, #20
 80057ea:	46bd      	mov	sp, r7
 80057ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f0:	4770      	bx	lr
 80057f2:	bf00      	nop
 80057f4:	2000423c 	.word	0x2000423c
 80057f8:	20004244 	.word	0x20004244

080057fc <memset>:
 80057fc:	4402      	add	r2, r0
 80057fe:	4603      	mov	r3, r0
 8005800:	4293      	cmp	r3, r2
 8005802:	d100      	bne.n	8005806 <memset+0xa>
 8005804:	4770      	bx	lr
 8005806:	f803 1b01 	strb.w	r1, [r3], #1
 800580a:	e7f9      	b.n	8005800 <memset+0x4>

0800580c <__libc_init_array>:
 800580c:	b570      	push	{r4, r5, r6, lr}
 800580e:	4d0d      	ldr	r5, [pc, #52]	; (8005844 <__libc_init_array+0x38>)
 8005810:	4c0d      	ldr	r4, [pc, #52]	; (8005848 <__libc_init_array+0x3c>)
 8005812:	1b64      	subs	r4, r4, r5
 8005814:	10a4      	asrs	r4, r4, #2
 8005816:	2600      	movs	r6, #0
 8005818:	42a6      	cmp	r6, r4
 800581a:	d109      	bne.n	8005830 <__libc_init_array+0x24>
 800581c:	4d0b      	ldr	r5, [pc, #44]	; (800584c <__libc_init_array+0x40>)
 800581e:	4c0c      	ldr	r4, [pc, #48]	; (8005850 <__libc_init_array+0x44>)
 8005820:	f000 f826 	bl	8005870 <_init>
 8005824:	1b64      	subs	r4, r4, r5
 8005826:	10a4      	asrs	r4, r4, #2
 8005828:	2600      	movs	r6, #0
 800582a:	42a6      	cmp	r6, r4
 800582c:	d105      	bne.n	800583a <__libc_init_array+0x2e>
 800582e:	bd70      	pop	{r4, r5, r6, pc}
 8005830:	f855 3b04 	ldr.w	r3, [r5], #4
 8005834:	4798      	blx	r3
 8005836:	3601      	adds	r6, #1
 8005838:	e7ee      	b.n	8005818 <__libc_init_array+0xc>
 800583a:	f855 3b04 	ldr.w	r3, [r5], #4
 800583e:	4798      	blx	r3
 8005840:	3601      	adds	r6, #1
 8005842:	e7f2      	b.n	800582a <__libc_init_array+0x1e>
 8005844:	08005914 	.word	0x08005914
 8005848:	08005914 	.word	0x08005914
 800584c:	08005914 	.word	0x08005914
 8005850:	08005918 	.word	0x08005918

08005854 <memcpy>:
 8005854:	440a      	add	r2, r1
 8005856:	4291      	cmp	r1, r2
 8005858:	f100 33ff 	add.w	r3, r0, #4294967295
 800585c:	d100      	bne.n	8005860 <memcpy+0xc>
 800585e:	4770      	bx	lr
 8005860:	b510      	push	{r4, lr}
 8005862:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005866:	f803 4f01 	strb.w	r4, [r3, #1]!
 800586a:	4291      	cmp	r1, r2
 800586c:	d1f9      	bne.n	8005862 <memcpy+0xe>
 800586e:	bd10      	pop	{r4, pc}

08005870 <_init>:
 8005870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005872:	bf00      	nop
 8005874:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005876:	bc08      	pop	{r3}
 8005878:	469e      	mov	lr, r3
 800587a:	4770      	bx	lr

0800587c <_fini>:
 800587c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800587e:	bf00      	nop
 8005880:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005882:	bc08      	pop	{r3}
 8005884:	469e      	mov	lr, r3
 8005886:	4770      	bx	lr
